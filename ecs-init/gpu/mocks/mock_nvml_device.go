// Code generated by MockGen. DO NOT EDIT.
// Source: /home/harishxr/go/src/github.com/amazon-ecs-agent/ecs-init/vendor/github.com/NVIDIA/go-nvml/pkg/nvml/zz_generated.api.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	nvml "github.com/NVIDIA/go-nvml/pkg/nvml"
	gomock "github.com/golang/mock/gomock"
)

// MockInterface is a mock of Interface interface.
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface.
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance.
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// ComputeInstanceDestroy mocks base method.
func (m *MockInterface) ComputeInstanceDestroy(arg0 nvml.ComputeInstance) nvml.Return {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ComputeInstanceDestroy", arg0)
	ret0, _ := ret[0].(nvml.Return)
	return ret0
}

// ComputeInstanceDestroy indicates an expected call of ComputeInstanceDestroy.
func (mr *MockInterfaceMockRecorder) ComputeInstanceDestroy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ComputeInstanceDestroy", reflect.TypeOf((*MockInterface)(nil).ComputeInstanceDestroy), arg0)
}

// ComputeInstanceGetInfo mocks base method.
func (m *MockInterface) ComputeInstanceGetInfo(arg0 nvml.ComputeInstance) (nvml.ComputeInstanceInfo, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ComputeInstanceGetInfo", arg0)
	ret0, _ := ret[0].(nvml.ComputeInstanceInfo)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// ComputeInstanceGetInfo indicates an expected call of ComputeInstanceGetInfo.
func (mr *MockInterfaceMockRecorder) ComputeInstanceGetInfo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ComputeInstanceGetInfo", reflect.TypeOf((*MockInterface)(nil).ComputeInstanceGetInfo), arg0)
}

// DeviceClearAccountingPids mocks base method.
func (m *MockInterface) DeviceClearAccountingPids(arg0 nvml.Device) nvml.Return {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceClearAccountingPids", arg0)
	ret0, _ := ret[0].(nvml.Return)
	return ret0
}

// DeviceClearAccountingPids indicates an expected call of DeviceClearAccountingPids.
func (mr *MockInterfaceMockRecorder) DeviceClearAccountingPids(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceClearAccountingPids", reflect.TypeOf((*MockInterface)(nil).DeviceClearAccountingPids), arg0)
}

// DeviceClearCpuAffinity mocks base method.
func (m *MockInterface) DeviceClearCpuAffinity(arg0 nvml.Device) nvml.Return {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceClearCpuAffinity", arg0)
	ret0, _ := ret[0].(nvml.Return)
	return ret0
}

// DeviceClearCpuAffinity indicates an expected call of DeviceClearCpuAffinity.
func (mr *MockInterfaceMockRecorder) DeviceClearCpuAffinity(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceClearCpuAffinity", reflect.TypeOf((*MockInterface)(nil).DeviceClearCpuAffinity), arg0)
}

// DeviceClearEccErrorCounts mocks base method.
func (m *MockInterface) DeviceClearEccErrorCounts(arg0 nvml.Device, arg1 nvml.EccCounterType) nvml.Return {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceClearEccErrorCounts", arg0, arg1)
	ret0, _ := ret[0].(nvml.Return)
	return ret0
}

// DeviceClearEccErrorCounts indicates an expected call of DeviceClearEccErrorCounts.
func (mr *MockInterfaceMockRecorder) DeviceClearEccErrorCounts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceClearEccErrorCounts", reflect.TypeOf((*MockInterface)(nil).DeviceClearEccErrorCounts), arg0, arg1)
}

// DeviceClearFieldValues mocks base method.
func (m *MockInterface) DeviceClearFieldValues(arg0 nvml.Device, arg1 []nvml.FieldValue) nvml.Return {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceClearFieldValues", arg0, arg1)
	ret0, _ := ret[0].(nvml.Return)
	return ret0
}

// DeviceClearFieldValues indicates an expected call of DeviceClearFieldValues.
func (mr *MockInterfaceMockRecorder) DeviceClearFieldValues(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceClearFieldValues", reflect.TypeOf((*MockInterface)(nil).DeviceClearFieldValues), arg0, arg1)
}

// DeviceCreateGpuInstance mocks base method.
func (m *MockInterface) DeviceCreateGpuInstance(arg0 nvml.Device, arg1 *nvml.GpuInstanceProfileInfo) (nvml.GpuInstance, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceCreateGpuInstance", arg0, arg1)
	ret0, _ := ret[0].(nvml.GpuInstance)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceCreateGpuInstance indicates an expected call of DeviceCreateGpuInstance.
func (mr *MockInterfaceMockRecorder) DeviceCreateGpuInstance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceCreateGpuInstance", reflect.TypeOf((*MockInterface)(nil).DeviceCreateGpuInstance), arg0, arg1)
}

// DeviceCreateGpuInstanceWithPlacement mocks base method.
func (m *MockInterface) DeviceCreateGpuInstanceWithPlacement(arg0 nvml.Device, arg1 *nvml.GpuInstanceProfileInfo, arg2 *nvml.GpuInstancePlacement) (nvml.GpuInstance, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceCreateGpuInstanceWithPlacement", arg0, arg1, arg2)
	ret0, _ := ret[0].(nvml.GpuInstance)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceCreateGpuInstanceWithPlacement indicates an expected call of DeviceCreateGpuInstanceWithPlacement.
func (mr *MockInterfaceMockRecorder) DeviceCreateGpuInstanceWithPlacement(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceCreateGpuInstanceWithPlacement", reflect.TypeOf((*MockInterface)(nil).DeviceCreateGpuInstanceWithPlacement), arg0, arg1, arg2)
}

// DeviceDiscoverGpus mocks base method.
func (m *MockInterface) DeviceDiscoverGpus() (nvml.PciInfo, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceDiscoverGpus")
	ret0, _ := ret[0].(nvml.PciInfo)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceDiscoverGpus indicates an expected call of DeviceDiscoverGpus.
func (mr *MockInterfaceMockRecorder) DeviceDiscoverGpus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceDiscoverGpus", reflect.TypeOf((*MockInterface)(nil).DeviceDiscoverGpus))
}

// DeviceFreezeNvLinkUtilizationCounter mocks base method.
func (m *MockInterface) DeviceFreezeNvLinkUtilizationCounter(arg0 nvml.Device, arg1, arg2 int, arg3 nvml.EnableState) nvml.Return {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceFreezeNvLinkUtilizationCounter", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(nvml.Return)
	return ret0
}

// DeviceFreezeNvLinkUtilizationCounter indicates an expected call of DeviceFreezeNvLinkUtilizationCounter.
func (mr *MockInterfaceMockRecorder) DeviceFreezeNvLinkUtilizationCounter(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceFreezeNvLinkUtilizationCounter", reflect.TypeOf((*MockInterface)(nil).DeviceFreezeNvLinkUtilizationCounter), arg0, arg1, arg2, arg3)
}

// DeviceGetAPIRestriction mocks base method.
func (m *MockInterface) DeviceGetAPIRestriction(arg0 nvml.Device, arg1 nvml.RestrictedAPI) (nvml.EnableState, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetAPIRestriction", arg0, arg1)
	ret0, _ := ret[0].(nvml.EnableState)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetAPIRestriction indicates an expected call of DeviceGetAPIRestriction.
func (mr *MockInterfaceMockRecorder) DeviceGetAPIRestriction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetAPIRestriction", reflect.TypeOf((*MockInterface)(nil).DeviceGetAPIRestriction), arg0, arg1)
}

// DeviceGetAccountingBufferSize mocks base method.
func (m *MockInterface) DeviceGetAccountingBufferSize(arg0 nvml.Device) (int, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetAccountingBufferSize", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetAccountingBufferSize indicates an expected call of DeviceGetAccountingBufferSize.
func (mr *MockInterfaceMockRecorder) DeviceGetAccountingBufferSize(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetAccountingBufferSize", reflect.TypeOf((*MockInterface)(nil).DeviceGetAccountingBufferSize), arg0)
}

// DeviceGetAccountingMode mocks base method.
func (m *MockInterface) DeviceGetAccountingMode(arg0 nvml.Device) (nvml.EnableState, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetAccountingMode", arg0)
	ret0, _ := ret[0].(nvml.EnableState)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetAccountingMode indicates an expected call of DeviceGetAccountingMode.
func (mr *MockInterfaceMockRecorder) DeviceGetAccountingMode(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetAccountingMode", reflect.TypeOf((*MockInterface)(nil).DeviceGetAccountingMode), arg0)
}

// DeviceGetAccountingPids mocks base method.
func (m *MockInterface) DeviceGetAccountingPids(arg0 nvml.Device) ([]int, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetAccountingPids", arg0)
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetAccountingPids indicates an expected call of DeviceGetAccountingPids.
func (mr *MockInterfaceMockRecorder) DeviceGetAccountingPids(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetAccountingPids", reflect.TypeOf((*MockInterface)(nil).DeviceGetAccountingPids), arg0)
}

// DeviceGetAccountingStats mocks base method.
func (m *MockInterface) DeviceGetAccountingStats(arg0 nvml.Device, arg1 uint32) (nvml.AccountingStats, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetAccountingStats", arg0, arg1)
	ret0, _ := ret[0].(nvml.AccountingStats)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetAccountingStats indicates an expected call of DeviceGetAccountingStats.
func (mr *MockInterfaceMockRecorder) DeviceGetAccountingStats(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetAccountingStats", reflect.TypeOf((*MockInterface)(nil).DeviceGetAccountingStats), arg0, arg1)
}

// DeviceGetActiveVgpus mocks base method.
func (m *MockInterface) DeviceGetActiveVgpus(arg0 nvml.Device) ([]nvml.VgpuInstance, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetActiveVgpus", arg0)
	ret0, _ := ret[0].([]nvml.VgpuInstance)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetActiveVgpus indicates an expected call of DeviceGetActiveVgpus.
func (mr *MockInterfaceMockRecorder) DeviceGetActiveVgpus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetActiveVgpus", reflect.TypeOf((*MockInterface)(nil).DeviceGetActiveVgpus), arg0)
}

// DeviceGetAdaptiveClockInfoStatus mocks base method.
func (m *MockInterface) DeviceGetAdaptiveClockInfoStatus(arg0 nvml.Device) (uint32, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetAdaptiveClockInfoStatus", arg0)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetAdaptiveClockInfoStatus indicates an expected call of DeviceGetAdaptiveClockInfoStatus.
func (mr *MockInterfaceMockRecorder) DeviceGetAdaptiveClockInfoStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetAdaptiveClockInfoStatus", reflect.TypeOf((*MockInterface)(nil).DeviceGetAdaptiveClockInfoStatus), arg0)
}

// DeviceGetApplicationsClock mocks base method.
func (m *MockInterface) DeviceGetApplicationsClock(arg0 nvml.Device, arg1 nvml.ClockType) (uint32, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetApplicationsClock", arg0, arg1)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetApplicationsClock indicates an expected call of DeviceGetApplicationsClock.
func (mr *MockInterfaceMockRecorder) DeviceGetApplicationsClock(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetApplicationsClock", reflect.TypeOf((*MockInterface)(nil).DeviceGetApplicationsClock), arg0, arg1)
}

// DeviceGetArchitecture mocks base method.
func (m *MockInterface) DeviceGetArchitecture(arg0 nvml.Device) (nvml.DeviceArchitecture, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetArchitecture", arg0)
	ret0, _ := ret[0].(nvml.DeviceArchitecture)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetArchitecture indicates an expected call of DeviceGetArchitecture.
func (mr *MockInterfaceMockRecorder) DeviceGetArchitecture(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetArchitecture", reflect.TypeOf((*MockInterface)(nil).DeviceGetArchitecture), arg0)
}

// DeviceGetAttributes mocks base method.
func (m *MockInterface) DeviceGetAttributes(arg0 nvml.Device) (nvml.DeviceAttributes, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetAttributes", arg0)
	ret0, _ := ret[0].(nvml.DeviceAttributes)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetAttributes indicates an expected call of DeviceGetAttributes.
func (mr *MockInterfaceMockRecorder) DeviceGetAttributes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetAttributes", reflect.TypeOf((*MockInterface)(nil).DeviceGetAttributes), arg0)
}

// DeviceGetAutoBoostedClocksEnabled mocks base method.
func (m *MockInterface) DeviceGetAutoBoostedClocksEnabled(arg0 nvml.Device) (nvml.EnableState, nvml.EnableState, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetAutoBoostedClocksEnabled", arg0)
	ret0, _ := ret[0].(nvml.EnableState)
	ret1, _ := ret[1].(nvml.EnableState)
	ret2, _ := ret[2].(nvml.Return)
	return ret0, ret1, ret2
}

// DeviceGetAutoBoostedClocksEnabled indicates an expected call of DeviceGetAutoBoostedClocksEnabled.
func (mr *MockInterfaceMockRecorder) DeviceGetAutoBoostedClocksEnabled(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetAutoBoostedClocksEnabled", reflect.TypeOf((*MockInterface)(nil).DeviceGetAutoBoostedClocksEnabled), arg0)
}

// DeviceGetBAR1MemoryInfo mocks base method.
func (m *MockInterface) DeviceGetBAR1MemoryInfo(arg0 nvml.Device) (nvml.BAR1Memory, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetBAR1MemoryInfo", arg0)
	ret0, _ := ret[0].(nvml.BAR1Memory)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetBAR1MemoryInfo indicates an expected call of DeviceGetBAR1MemoryInfo.
func (mr *MockInterfaceMockRecorder) DeviceGetBAR1MemoryInfo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetBAR1MemoryInfo", reflect.TypeOf((*MockInterface)(nil).DeviceGetBAR1MemoryInfo), arg0)
}

// DeviceGetBoardId mocks base method.
func (m *MockInterface) DeviceGetBoardId(arg0 nvml.Device) (uint32, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetBoardId", arg0)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetBoardId indicates an expected call of DeviceGetBoardId.
func (mr *MockInterfaceMockRecorder) DeviceGetBoardId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetBoardId", reflect.TypeOf((*MockInterface)(nil).DeviceGetBoardId), arg0)
}

// DeviceGetBoardPartNumber mocks base method.
func (m *MockInterface) DeviceGetBoardPartNumber(arg0 nvml.Device) (string, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetBoardPartNumber", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetBoardPartNumber indicates an expected call of DeviceGetBoardPartNumber.
func (mr *MockInterfaceMockRecorder) DeviceGetBoardPartNumber(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetBoardPartNumber", reflect.TypeOf((*MockInterface)(nil).DeviceGetBoardPartNumber), arg0)
}

// DeviceGetBrand mocks base method.
func (m *MockInterface) DeviceGetBrand(arg0 nvml.Device) (nvml.BrandType, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetBrand", arg0)
	ret0, _ := ret[0].(nvml.BrandType)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetBrand indicates an expected call of DeviceGetBrand.
func (mr *MockInterfaceMockRecorder) DeviceGetBrand(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetBrand", reflect.TypeOf((*MockInterface)(nil).DeviceGetBrand), arg0)
}

// DeviceGetBridgeChipInfo mocks base method.
func (m *MockInterface) DeviceGetBridgeChipInfo(arg0 nvml.Device) (nvml.BridgeChipHierarchy, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetBridgeChipInfo", arg0)
	ret0, _ := ret[0].(nvml.BridgeChipHierarchy)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetBridgeChipInfo indicates an expected call of DeviceGetBridgeChipInfo.
func (mr *MockInterfaceMockRecorder) DeviceGetBridgeChipInfo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetBridgeChipInfo", reflect.TypeOf((*MockInterface)(nil).DeviceGetBridgeChipInfo), arg0)
}

// DeviceGetBusType mocks base method.
func (m *MockInterface) DeviceGetBusType(arg0 nvml.Device) (nvml.BusType, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetBusType", arg0)
	ret0, _ := ret[0].(nvml.BusType)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetBusType indicates an expected call of DeviceGetBusType.
func (mr *MockInterfaceMockRecorder) DeviceGetBusType(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetBusType", reflect.TypeOf((*MockInterface)(nil).DeviceGetBusType), arg0)
}

// DeviceGetC2cModeInfoV mocks base method.
func (m *MockInterface) DeviceGetC2cModeInfoV(arg0 nvml.Device) nvml.C2cModeInfoHandler {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetC2cModeInfoV", arg0)
	ret0, _ := ret[0].(nvml.C2cModeInfoHandler)
	return ret0
}

// DeviceGetC2cModeInfoV indicates an expected call of DeviceGetC2cModeInfoV.
func (mr *MockInterfaceMockRecorder) DeviceGetC2cModeInfoV(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetC2cModeInfoV", reflect.TypeOf((*MockInterface)(nil).DeviceGetC2cModeInfoV), arg0)
}

// DeviceGetClkMonStatus mocks base method.
func (m *MockInterface) DeviceGetClkMonStatus(arg0 nvml.Device) (nvml.ClkMonStatus, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetClkMonStatus", arg0)
	ret0, _ := ret[0].(nvml.ClkMonStatus)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetClkMonStatus indicates an expected call of DeviceGetClkMonStatus.
func (mr *MockInterfaceMockRecorder) DeviceGetClkMonStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetClkMonStatus", reflect.TypeOf((*MockInterface)(nil).DeviceGetClkMonStatus), arg0)
}

// DeviceGetClock mocks base method.
func (m *MockInterface) DeviceGetClock(arg0 nvml.Device, arg1 nvml.ClockType, arg2 nvml.ClockId) (uint32, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetClock", arg0, arg1, arg2)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetClock indicates an expected call of DeviceGetClock.
func (mr *MockInterfaceMockRecorder) DeviceGetClock(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetClock", reflect.TypeOf((*MockInterface)(nil).DeviceGetClock), arg0, arg1, arg2)
}

// DeviceGetClockInfo mocks base method.
func (m *MockInterface) DeviceGetClockInfo(arg0 nvml.Device, arg1 nvml.ClockType) (uint32, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetClockInfo", arg0, arg1)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetClockInfo indicates an expected call of DeviceGetClockInfo.
func (mr *MockInterfaceMockRecorder) DeviceGetClockInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetClockInfo", reflect.TypeOf((*MockInterface)(nil).DeviceGetClockInfo), arg0, arg1)
}

// DeviceGetComputeInstanceId mocks base method.
func (m *MockInterface) DeviceGetComputeInstanceId(arg0 nvml.Device) (int, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetComputeInstanceId", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetComputeInstanceId indicates an expected call of DeviceGetComputeInstanceId.
func (mr *MockInterfaceMockRecorder) DeviceGetComputeInstanceId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetComputeInstanceId", reflect.TypeOf((*MockInterface)(nil).DeviceGetComputeInstanceId), arg0)
}

// DeviceGetComputeMode mocks base method.
func (m *MockInterface) DeviceGetComputeMode(arg0 nvml.Device) (nvml.ComputeMode, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetComputeMode", arg0)
	ret0, _ := ret[0].(nvml.ComputeMode)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetComputeMode indicates an expected call of DeviceGetComputeMode.
func (mr *MockInterfaceMockRecorder) DeviceGetComputeMode(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetComputeMode", reflect.TypeOf((*MockInterface)(nil).DeviceGetComputeMode), arg0)
}

// DeviceGetComputeRunningProcesses mocks base method.
func (m *MockInterface) DeviceGetComputeRunningProcesses(arg0 nvml.Device) ([]nvml.ProcessInfo, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetComputeRunningProcesses", arg0)
	ret0, _ := ret[0].([]nvml.ProcessInfo)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetComputeRunningProcesses indicates an expected call of DeviceGetComputeRunningProcesses.
func (mr *MockInterfaceMockRecorder) DeviceGetComputeRunningProcesses(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetComputeRunningProcesses", reflect.TypeOf((*MockInterface)(nil).DeviceGetComputeRunningProcesses), arg0)
}

// DeviceGetConfComputeGpuAttestationReport mocks base method.
func (m *MockInterface) DeviceGetConfComputeGpuAttestationReport(arg0 nvml.Device) (nvml.ConfComputeGpuAttestationReport, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetConfComputeGpuAttestationReport", arg0)
	ret0, _ := ret[0].(nvml.ConfComputeGpuAttestationReport)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetConfComputeGpuAttestationReport indicates an expected call of DeviceGetConfComputeGpuAttestationReport.
func (mr *MockInterfaceMockRecorder) DeviceGetConfComputeGpuAttestationReport(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetConfComputeGpuAttestationReport", reflect.TypeOf((*MockInterface)(nil).DeviceGetConfComputeGpuAttestationReport), arg0)
}

// DeviceGetConfComputeGpuCertificate mocks base method.
func (m *MockInterface) DeviceGetConfComputeGpuCertificate(arg0 nvml.Device) (nvml.ConfComputeGpuCertificate, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetConfComputeGpuCertificate", arg0)
	ret0, _ := ret[0].(nvml.ConfComputeGpuCertificate)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetConfComputeGpuCertificate indicates an expected call of DeviceGetConfComputeGpuCertificate.
func (mr *MockInterfaceMockRecorder) DeviceGetConfComputeGpuCertificate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetConfComputeGpuCertificate", reflect.TypeOf((*MockInterface)(nil).DeviceGetConfComputeGpuCertificate), arg0)
}

// DeviceGetConfComputeMemSizeInfo mocks base method.
func (m *MockInterface) DeviceGetConfComputeMemSizeInfo(arg0 nvml.Device) (nvml.ConfComputeMemSizeInfo, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetConfComputeMemSizeInfo", arg0)
	ret0, _ := ret[0].(nvml.ConfComputeMemSizeInfo)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetConfComputeMemSizeInfo indicates an expected call of DeviceGetConfComputeMemSizeInfo.
func (mr *MockInterfaceMockRecorder) DeviceGetConfComputeMemSizeInfo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetConfComputeMemSizeInfo", reflect.TypeOf((*MockInterface)(nil).DeviceGetConfComputeMemSizeInfo), arg0)
}

// DeviceGetConfComputeProtectedMemoryUsage mocks base method.
func (m *MockInterface) DeviceGetConfComputeProtectedMemoryUsage(arg0 nvml.Device) (nvml.Memory, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetConfComputeProtectedMemoryUsage", arg0)
	ret0, _ := ret[0].(nvml.Memory)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetConfComputeProtectedMemoryUsage indicates an expected call of DeviceGetConfComputeProtectedMemoryUsage.
func (mr *MockInterfaceMockRecorder) DeviceGetConfComputeProtectedMemoryUsage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetConfComputeProtectedMemoryUsage", reflect.TypeOf((*MockInterface)(nil).DeviceGetConfComputeProtectedMemoryUsage), arg0)
}

// DeviceGetCount mocks base method.
func (m *MockInterface) DeviceGetCount() (int, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetCount")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetCount indicates an expected call of DeviceGetCount.
func (mr *MockInterfaceMockRecorder) DeviceGetCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetCount", reflect.TypeOf((*MockInterface)(nil).DeviceGetCount))
}

// DeviceGetCpuAffinity mocks base method.
func (m *MockInterface) DeviceGetCpuAffinity(arg0 nvml.Device, arg1 int) ([]uint, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetCpuAffinity", arg0, arg1)
	ret0, _ := ret[0].([]uint)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetCpuAffinity indicates an expected call of DeviceGetCpuAffinity.
func (mr *MockInterfaceMockRecorder) DeviceGetCpuAffinity(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetCpuAffinity", reflect.TypeOf((*MockInterface)(nil).DeviceGetCpuAffinity), arg0, arg1)
}

// DeviceGetCpuAffinityWithinScope mocks base method.
func (m *MockInterface) DeviceGetCpuAffinityWithinScope(arg0 nvml.Device, arg1 int, arg2 nvml.AffinityScope) ([]uint, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetCpuAffinityWithinScope", arg0, arg1, arg2)
	ret0, _ := ret[0].([]uint)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetCpuAffinityWithinScope indicates an expected call of DeviceGetCpuAffinityWithinScope.
func (mr *MockInterfaceMockRecorder) DeviceGetCpuAffinityWithinScope(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetCpuAffinityWithinScope", reflect.TypeOf((*MockInterface)(nil).DeviceGetCpuAffinityWithinScope), arg0, arg1, arg2)
}

// DeviceGetCreatableVgpus mocks base method.
func (m *MockInterface) DeviceGetCreatableVgpus(arg0 nvml.Device) ([]nvml.VgpuTypeId, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetCreatableVgpus", arg0)
	ret0, _ := ret[0].([]nvml.VgpuTypeId)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetCreatableVgpus indicates an expected call of DeviceGetCreatableVgpus.
func (mr *MockInterfaceMockRecorder) DeviceGetCreatableVgpus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetCreatableVgpus", reflect.TypeOf((*MockInterface)(nil).DeviceGetCreatableVgpus), arg0)
}

// DeviceGetCudaComputeCapability mocks base method.
func (m *MockInterface) DeviceGetCudaComputeCapability(arg0 nvml.Device) (int, int, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetCudaComputeCapability", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(nvml.Return)
	return ret0, ret1, ret2
}

// DeviceGetCudaComputeCapability indicates an expected call of DeviceGetCudaComputeCapability.
func (mr *MockInterfaceMockRecorder) DeviceGetCudaComputeCapability(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetCudaComputeCapability", reflect.TypeOf((*MockInterface)(nil).DeviceGetCudaComputeCapability), arg0)
}

// DeviceGetCurrPcieLinkGeneration mocks base method.
func (m *MockInterface) DeviceGetCurrPcieLinkGeneration(arg0 nvml.Device) (int, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetCurrPcieLinkGeneration", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetCurrPcieLinkGeneration indicates an expected call of DeviceGetCurrPcieLinkGeneration.
func (mr *MockInterfaceMockRecorder) DeviceGetCurrPcieLinkGeneration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetCurrPcieLinkGeneration", reflect.TypeOf((*MockInterface)(nil).DeviceGetCurrPcieLinkGeneration), arg0)
}

// DeviceGetCurrPcieLinkWidth mocks base method.
func (m *MockInterface) DeviceGetCurrPcieLinkWidth(arg0 nvml.Device) (int, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetCurrPcieLinkWidth", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetCurrPcieLinkWidth indicates an expected call of DeviceGetCurrPcieLinkWidth.
func (mr *MockInterfaceMockRecorder) DeviceGetCurrPcieLinkWidth(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetCurrPcieLinkWidth", reflect.TypeOf((*MockInterface)(nil).DeviceGetCurrPcieLinkWidth), arg0)
}

// DeviceGetCurrentClocksEventReasons mocks base method.
func (m *MockInterface) DeviceGetCurrentClocksEventReasons(arg0 nvml.Device) (uint64, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetCurrentClocksEventReasons", arg0)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetCurrentClocksEventReasons indicates an expected call of DeviceGetCurrentClocksEventReasons.
func (mr *MockInterfaceMockRecorder) DeviceGetCurrentClocksEventReasons(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetCurrentClocksEventReasons", reflect.TypeOf((*MockInterface)(nil).DeviceGetCurrentClocksEventReasons), arg0)
}

// DeviceGetCurrentClocksThrottleReasons mocks base method.
func (m *MockInterface) DeviceGetCurrentClocksThrottleReasons(arg0 nvml.Device) (uint64, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetCurrentClocksThrottleReasons", arg0)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetCurrentClocksThrottleReasons indicates an expected call of DeviceGetCurrentClocksThrottleReasons.
func (mr *MockInterfaceMockRecorder) DeviceGetCurrentClocksThrottleReasons(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetCurrentClocksThrottleReasons", reflect.TypeOf((*MockInterface)(nil).DeviceGetCurrentClocksThrottleReasons), arg0)
}

// DeviceGetDecoderUtilization mocks base method.
func (m *MockInterface) DeviceGetDecoderUtilization(arg0 nvml.Device) (uint32, uint32, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetDecoderUtilization", arg0)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(uint32)
	ret2, _ := ret[2].(nvml.Return)
	return ret0, ret1, ret2
}

// DeviceGetDecoderUtilization indicates an expected call of DeviceGetDecoderUtilization.
func (mr *MockInterfaceMockRecorder) DeviceGetDecoderUtilization(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetDecoderUtilization", reflect.TypeOf((*MockInterface)(nil).DeviceGetDecoderUtilization), arg0)
}

// DeviceGetDefaultApplicationsClock mocks base method.
func (m *MockInterface) DeviceGetDefaultApplicationsClock(arg0 nvml.Device, arg1 nvml.ClockType) (uint32, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetDefaultApplicationsClock", arg0, arg1)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetDefaultApplicationsClock indicates an expected call of DeviceGetDefaultApplicationsClock.
func (mr *MockInterfaceMockRecorder) DeviceGetDefaultApplicationsClock(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetDefaultApplicationsClock", reflect.TypeOf((*MockInterface)(nil).DeviceGetDefaultApplicationsClock), arg0, arg1)
}

// DeviceGetDefaultEccMode mocks base method.
func (m *MockInterface) DeviceGetDefaultEccMode(arg0 nvml.Device) (nvml.EnableState, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetDefaultEccMode", arg0)
	ret0, _ := ret[0].(nvml.EnableState)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetDefaultEccMode indicates an expected call of DeviceGetDefaultEccMode.
func (mr *MockInterfaceMockRecorder) DeviceGetDefaultEccMode(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetDefaultEccMode", reflect.TypeOf((*MockInterface)(nil).DeviceGetDefaultEccMode), arg0)
}

// DeviceGetDetailedEccErrors mocks base method.
func (m *MockInterface) DeviceGetDetailedEccErrors(arg0 nvml.Device, arg1 nvml.MemoryErrorType, arg2 nvml.EccCounterType) (nvml.EccErrorCounts, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetDetailedEccErrors", arg0, arg1, arg2)
	ret0, _ := ret[0].(nvml.EccErrorCounts)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetDetailedEccErrors indicates an expected call of DeviceGetDetailedEccErrors.
func (mr *MockInterfaceMockRecorder) DeviceGetDetailedEccErrors(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetDetailedEccErrors", reflect.TypeOf((*MockInterface)(nil).DeviceGetDetailedEccErrors), arg0, arg1, arg2)
}

// DeviceGetDeviceHandleFromMigDeviceHandle mocks base method.
func (m *MockInterface) DeviceGetDeviceHandleFromMigDeviceHandle(arg0 nvml.Device) (nvml.Device, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetDeviceHandleFromMigDeviceHandle", arg0)
	ret0, _ := ret[0].(nvml.Device)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetDeviceHandleFromMigDeviceHandle indicates an expected call of DeviceGetDeviceHandleFromMigDeviceHandle.
func (mr *MockInterfaceMockRecorder) DeviceGetDeviceHandleFromMigDeviceHandle(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetDeviceHandleFromMigDeviceHandle", reflect.TypeOf((*MockInterface)(nil).DeviceGetDeviceHandleFromMigDeviceHandle), arg0)
}

// DeviceGetDisplayActive mocks base method.
func (m *MockInterface) DeviceGetDisplayActive(arg0 nvml.Device) (nvml.EnableState, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetDisplayActive", arg0)
	ret0, _ := ret[0].(nvml.EnableState)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetDisplayActive indicates an expected call of DeviceGetDisplayActive.
func (mr *MockInterfaceMockRecorder) DeviceGetDisplayActive(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetDisplayActive", reflect.TypeOf((*MockInterface)(nil).DeviceGetDisplayActive), arg0)
}

// DeviceGetDisplayMode mocks base method.
func (m *MockInterface) DeviceGetDisplayMode(arg0 nvml.Device) (nvml.EnableState, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetDisplayMode", arg0)
	ret0, _ := ret[0].(nvml.EnableState)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetDisplayMode indicates an expected call of DeviceGetDisplayMode.
func (mr *MockInterfaceMockRecorder) DeviceGetDisplayMode(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetDisplayMode", reflect.TypeOf((*MockInterface)(nil).DeviceGetDisplayMode), arg0)
}

// DeviceGetDriverModel mocks base method.
func (m *MockInterface) DeviceGetDriverModel(arg0 nvml.Device) (nvml.DriverModel, nvml.DriverModel, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetDriverModel", arg0)
	ret0, _ := ret[0].(nvml.DriverModel)
	ret1, _ := ret[1].(nvml.DriverModel)
	ret2, _ := ret[2].(nvml.Return)
	return ret0, ret1, ret2
}

// DeviceGetDriverModel indicates an expected call of DeviceGetDriverModel.
func (mr *MockInterfaceMockRecorder) DeviceGetDriverModel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetDriverModel", reflect.TypeOf((*MockInterface)(nil).DeviceGetDriverModel), arg0)
}

// DeviceGetDynamicPstatesInfo mocks base method.
func (m *MockInterface) DeviceGetDynamicPstatesInfo(arg0 nvml.Device) (nvml.GpuDynamicPstatesInfo, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetDynamicPstatesInfo", arg0)
	ret0, _ := ret[0].(nvml.GpuDynamicPstatesInfo)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetDynamicPstatesInfo indicates an expected call of DeviceGetDynamicPstatesInfo.
func (mr *MockInterfaceMockRecorder) DeviceGetDynamicPstatesInfo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetDynamicPstatesInfo", reflect.TypeOf((*MockInterface)(nil).DeviceGetDynamicPstatesInfo), arg0)
}

// DeviceGetEccMode mocks base method.
func (m *MockInterface) DeviceGetEccMode(arg0 nvml.Device) (nvml.EnableState, nvml.EnableState, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetEccMode", arg0)
	ret0, _ := ret[0].(nvml.EnableState)
	ret1, _ := ret[1].(nvml.EnableState)
	ret2, _ := ret[2].(nvml.Return)
	return ret0, ret1, ret2
}

// DeviceGetEccMode indicates an expected call of DeviceGetEccMode.
func (mr *MockInterfaceMockRecorder) DeviceGetEccMode(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetEccMode", reflect.TypeOf((*MockInterface)(nil).DeviceGetEccMode), arg0)
}

// DeviceGetEncoderCapacity mocks base method.
func (m *MockInterface) DeviceGetEncoderCapacity(arg0 nvml.Device, arg1 nvml.EncoderType) (int, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetEncoderCapacity", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetEncoderCapacity indicates an expected call of DeviceGetEncoderCapacity.
func (mr *MockInterfaceMockRecorder) DeviceGetEncoderCapacity(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetEncoderCapacity", reflect.TypeOf((*MockInterface)(nil).DeviceGetEncoderCapacity), arg0, arg1)
}

// DeviceGetEncoderSessions mocks base method.
func (m *MockInterface) DeviceGetEncoderSessions(arg0 nvml.Device) ([]nvml.EncoderSessionInfo, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetEncoderSessions", arg0)
	ret0, _ := ret[0].([]nvml.EncoderSessionInfo)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetEncoderSessions indicates an expected call of DeviceGetEncoderSessions.
func (mr *MockInterfaceMockRecorder) DeviceGetEncoderSessions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetEncoderSessions", reflect.TypeOf((*MockInterface)(nil).DeviceGetEncoderSessions), arg0)
}

// DeviceGetEncoderStats mocks base method.
func (m *MockInterface) DeviceGetEncoderStats(arg0 nvml.Device) (int, uint32, uint32, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetEncoderStats", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(uint32)
	ret2, _ := ret[2].(uint32)
	ret3, _ := ret[3].(nvml.Return)
	return ret0, ret1, ret2, ret3
}

// DeviceGetEncoderStats indicates an expected call of DeviceGetEncoderStats.
func (mr *MockInterfaceMockRecorder) DeviceGetEncoderStats(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetEncoderStats", reflect.TypeOf((*MockInterface)(nil).DeviceGetEncoderStats), arg0)
}

// DeviceGetEncoderUtilization mocks base method.
func (m *MockInterface) DeviceGetEncoderUtilization(arg0 nvml.Device) (uint32, uint32, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetEncoderUtilization", arg0)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(uint32)
	ret2, _ := ret[2].(nvml.Return)
	return ret0, ret1, ret2
}

// DeviceGetEncoderUtilization indicates an expected call of DeviceGetEncoderUtilization.
func (mr *MockInterfaceMockRecorder) DeviceGetEncoderUtilization(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetEncoderUtilization", reflect.TypeOf((*MockInterface)(nil).DeviceGetEncoderUtilization), arg0)
}

// DeviceGetEnforcedPowerLimit mocks base method.
func (m *MockInterface) DeviceGetEnforcedPowerLimit(arg0 nvml.Device) (uint32, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetEnforcedPowerLimit", arg0)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetEnforcedPowerLimit indicates an expected call of DeviceGetEnforcedPowerLimit.
func (mr *MockInterfaceMockRecorder) DeviceGetEnforcedPowerLimit(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetEnforcedPowerLimit", reflect.TypeOf((*MockInterface)(nil).DeviceGetEnforcedPowerLimit), arg0)
}

// DeviceGetFBCSessions mocks base method.
func (m *MockInterface) DeviceGetFBCSessions(arg0 nvml.Device) ([]nvml.FBCSessionInfo, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetFBCSessions", arg0)
	ret0, _ := ret[0].([]nvml.FBCSessionInfo)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetFBCSessions indicates an expected call of DeviceGetFBCSessions.
func (mr *MockInterfaceMockRecorder) DeviceGetFBCSessions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetFBCSessions", reflect.TypeOf((*MockInterface)(nil).DeviceGetFBCSessions), arg0)
}

// DeviceGetFBCStats mocks base method.
func (m *MockInterface) DeviceGetFBCStats(arg0 nvml.Device) (nvml.FBCStats, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetFBCStats", arg0)
	ret0, _ := ret[0].(nvml.FBCStats)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetFBCStats indicates an expected call of DeviceGetFBCStats.
func (mr *MockInterfaceMockRecorder) DeviceGetFBCStats(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetFBCStats", reflect.TypeOf((*MockInterface)(nil).DeviceGetFBCStats), arg0)
}

// DeviceGetFanControlPolicy_v2 mocks base method.
func (m *MockInterface) DeviceGetFanControlPolicy_v2(arg0 nvml.Device, arg1 int) (nvml.FanControlPolicy, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetFanControlPolicy_v2", arg0, arg1)
	ret0, _ := ret[0].(nvml.FanControlPolicy)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetFanControlPolicy_v2 indicates an expected call of DeviceGetFanControlPolicy_v2.
func (mr *MockInterfaceMockRecorder) DeviceGetFanControlPolicy_v2(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetFanControlPolicy_v2", reflect.TypeOf((*MockInterface)(nil).DeviceGetFanControlPolicy_v2), arg0, arg1)
}

// DeviceGetFanSpeed mocks base method.
func (m *MockInterface) DeviceGetFanSpeed(arg0 nvml.Device) (uint32, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetFanSpeed", arg0)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetFanSpeed indicates an expected call of DeviceGetFanSpeed.
func (mr *MockInterfaceMockRecorder) DeviceGetFanSpeed(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetFanSpeed", reflect.TypeOf((*MockInterface)(nil).DeviceGetFanSpeed), arg0)
}

// DeviceGetFanSpeed_v2 mocks base method.
func (m *MockInterface) DeviceGetFanSpeed_v2(arg0 nvml.Device, arg1 int) (uint32, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetFanSpeed_v2", arg0, arg1)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetFanSpeed_v2 indicates an expected call of DeviceGetFanSpeed_v2.
func (mr *MockInterfaceMockRecorder) DeviceGetFanSpeed_v2(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetFanSpeed_v2", reflect.TypeOf((*MockInterface)(nil).DeviceGetFanSpeed_v2), arg0, arg1)
}

// DeviceGetFieldValues mocks base method.
func (m *MockInterface) DeviceGetFieldValues(arg0 nvml.Device, arg1 []nvml.FieldValue) nvml.Return {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetFieldValues", arg0, arg1)
	ret0, _ := ret[0].(nvml.Return)
	return ret0
}

// DeviceGetFieldValues indicates an expected call of DeviceGetFieldValues.
func (mr *MockInterfaceMockRecorder) DeviceGetFieldValues(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetFieldValues", reflect.TypeOf((*MockInterface)(nil).DeviceGetFieldValues), arg0, arg1)
}

// DeviceGetGpcClkMinMaxVfOffset mocks base method.
func (m *MockInterface) DeviceGetGpcClkMinMaxVfOffset(arg0 nvml.Device) (int, int, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetGpcClkMinMaxVfOffset", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(nvml.Return)
	return ret0, ret1, ret2
}

// DeviceGetGpcClkMinMaxVfOffset indicates an expected call of DeviceGetGpcClkMinMaxVfOffset.
func (mr *MockInterfaceMockRecorder) DeviceGetGpcClkMinMaxVfOffset(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetGpcClkMinMaxVfOffset", reflect.TypeOf((*MockInterface)(nil).DeviceGetGpcClkMinMaxVfOffset), arg0)
}

// DeviceGetGpcClkVfOffset mocks base method.
func (m *MockInterface) DeviceGetGpcClkVfOffset(arg0 nvml.Device) (int, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetGpcClkVfOffset", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetGpcClkVfOffset indicates an expected call of DeviceGetGpcClkVfOffset.
func (mr *MockInterfaceMockRecorder) DeviceGetGpcClkVfOffset(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetGpcClkVfOffset", reflect.TypeOf((*MockInterface)(nil).DeviceGetGpcClkVfOffset), arg0)
}

// DeviceGetGpuFabricInfo mocks base method.
func (m *MockInterface) DeviceGetGpuFabricInfo(arg0 nvml.Device) (nvml.GpuFabricInfo, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetGpuFabricInfo", arg0)
	ret0, _ := ret[0].(nvml.GpuFabricInfo)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetGpuFabricInfo indicates an expected call of DeviceGetGpuFabricInfo.
func (mr *MockInterfaceMockRecorder) DeviceGetGpuFabricInfo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetGpuFabricInfo", reflect.TypeOf((*MockInterface)(nil).DeviceGetGpuFabricInfo), arg0)
}

// DeviceGetGpuFabricInfoV mocks base method.
func (m *MockInterface) DeviceGetGpuFabricInfoV(arg0 nvml.Device) nvml.GpuFabricInfoHandler {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetGpuFabricInfoV", arg0)
	ret0, _ := ret[0].(nvml.GpuFabricInfoHandler)
	return ret0
}

// DeviceGetGpuFabricInfoV indicates an expected call of DeviceGetGpuFabricInfoV.
func (mr *MockInterfaceMockRecorder) DeviceGetGpuFabricInfoV(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetGpuFabricInfoV", reflect.TypeOf((*MockInterface)(nil).DeviceGetGpuFabricInfoV), arg0)
}

// DeviceGetGpuInstanceById mocks base method.
func (m *MockInterface) DeviceGetGpuInstanceById(arg0 nvml.Device, arg1 int) (nvml.GpuInstance, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetGpuInstanceById", arg0, arg1)
	ret0, _ := ret[0].(nvml.GpuInstance)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetGpuInstanceById indicates an expected call of DeviceGetGpuInstanceById.
func (mr *MockInterfaceMockRecorder) DeviceGetGpuInstanceById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetGpuInstanceById", reflect.TypeOf((*MockInterface)(nil).DeviceGetGpuInstanceById), arg0, arg1)
}

// DeviceGetGpuInstanceId mocks base method.
func (m *MockInterface) DeviceGetGpuInstanceId(arg0 nvml.Device) (int, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetGpuInstanceId", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetGpuInstanceId indicates an expected call of DeviceGetGpuInstanceId.
func (mr *MockInterfaceMockRecorder) DeviceGetGpuInstanceId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetGpuInstanceId", reflect.TypeOf((*MockInterface)(nil).DeviceGetGpuInstanceId), arg0)
}

// DeviceGetGpuInstancePossiblePlacements mocks base method.
func (m *MockInterface) DeviceGetGpuInstancePossiblePlacements(arg0 nvml.Device, arg1 *nvml.GpuInstanceProfileInfo) ([]nvml.GpuInstancePlacement, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetGpuInstancePossiblePlacements", arg0, arg1)
	ret0, _ := ret[0].([]nvml.GpuInstancePlacement)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetGpuInstancePossiblePlacements indicates an expected call of DeviceGetGpuInstancePossiblePlacements.
func (mr *MockInterfaceMockRecorder) DeviceGetGpuInstancePossiblePlacements(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetGpuInstancePossiblePlacements", reflect.TypeOf((*MockInterface)(nil).DeviceGetGpuInstancePossiblePlacements), arg0, arg1)
}

// DeviceGetGpuInstanceProfileInfo mocks base method.
func (m *MockInterface) DeviceGetGpuInstanceProfileInfo(arg0 nvml.Device, arg1 int) (nvml.GpuInstanceProfileInfo, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetGpuInstanceProfileInfo", arg0, arg1)
	ret0, _ := ret[0].(nvml.GpuInstanceProfileInfo)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetGpuInstanceProfileInfo indicates an expected call of DeviceGetGpuInstanceProfileInfo.
func (mr *MockInterfaceMockRecorder) DeviceGetGpuInstanceProfileInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetGpuInstanceProfileInfo", reflect.TypeOf((*MockInterface)(nil).DeviceGetGpuInstanceProfileInfo), arg0, arg1)
}

// DeviceGetGpuInstanceProfileInfoV mocks base method.
func (m *MockInterface) DeviceGetGpuInstanceProfileInfoV(arg0 nvml.Device, arg1 int) nvml.GpuInstanceProfileInfoHandler {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetGpuInstanceProfileInfoV", arg0, arg1)
	ret0, _ := ret[0].(nvml.GpuInstanceProfileInfoHandler)
	return ret0
}

// DeviceGetGpuInstanceProfileInfoV indicates an expected call of DeviceGetGpuInstanceProfileInfoV.
func (mr *MockInterfaceMockRecorder) DeviceGetGpuInstanceProfileInfoV(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetGpuInstanceProfileInfoV", reflect.TypeOf((*MockInterface)(nil).DeviceGetGpuInstanceProfileInfoV), arg0, arg1)
}

// DeviceGetGpuInstanceRemainingCapacity mocks base method.
func (m *MockInterface) DeviceGetGpuInstanceRemainingCapacity(arg0 nvml.Device, arg1 *nvml.GpuInstanceProfileInfo) (int, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetGpuInstanceRemainingCapacity", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetGpuInstanceRemainingCapacity indicates an expected call of DeviceGetGpuInstanceRemainingCapacity.
func (mr *MockInterfaceMockRecorder) DeviceGetGpuInstanceRemainingCapacity(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetGpuInstanceRemainingCapacity", reflect.TypeOf((*MockInterface)(nil).DeviceGetGpuInstanceRemainingCapacity), arg0, arg1)
}

// DeviceGetGpuInstances mocks base method.
func (m *MockInterface) DeviceGetGpuInstances(arg0 nvml.Device, arg1 *nvml.GpuInstanceProfileInfo) ([]nvml.GpuInstance, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetGpuInstances", arg0, arg1)
	ret0, _ := ret[0].([]nvml.GpuInstance)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetGpuInstances indicates an expected call of DeviceGetGpuInstances.
func (mr *MockInterfaceMockRecorder) DeviceGetGpuInstances(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetGpuInstances", reflect.TypeOf((*MockInterface)(nil).DeviceGetGpuInstances), arg0, arg1)
}

// DeviceGetGpuMaxPcieLinkGeneration mocks base method.
func (m *MockInterface) DeviceGetGpuMaxPcieLinkGeneration(arg0 nvml.Device) (int, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetGpuMaxPcieLinkGeneration", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetGpuMaxPcieLinkGeneration indicates an expected call of DeviceGetGpuMaxPcieLinkGeneration.
func (mr *MockInterfaceMockRecorder) DeviceGetGpuMaxPcieLinkGeneration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetGpuMaxPcieLinkGeneration", reflect.TypeOf((*MockInterface)(nil).DeviceGetGpuMaxPcieLinkGeneration), arg0)
}

// DeviceGetGpuOperationMode mocks base method.
func (m *MockInterface) DeviceGetGpuOperationMode(arg0 nvml.Device) (nvml.GpuOperationMode, nvml.GpuOperationMode, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetGpuOperationMode", arg0)
	ret0, _ := ret[0].(nvml.GpuOperationMode)
	ret1, _ := ret[1].(nvml.GpuOperationMode)
	ret2, _ := ret[2].(nvml.Return)
	return ret0, ret1, ret2
}

// DeviceGetGpuOperationMode indicates an expected call of DeviceGetGpuOperationMode.
func (mr *MockInterfaceMockRecorder) DeviceGetGpuOperationMode(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetGpuOperationMode", reflect.TypeOf((*MockInterface)(nil).DeviceGetGpuOperationMode), arg0)
}

// DeviceGetGraphicsRunningProcesses mocks base method.
func (m *MockInterface) DeviceGetGraphicsRunningProcesses(arg0 nvml.Device) ([]nvml.ProcessInfo, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetGraphicsRunningProcesses", arg0)
	ret0, _ := ret[0].([]nvml.ProcessInfo)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetGraphicsRunningProcesses indicates an expected call of DeviceGetGraphicsRunningProcesses.
func (mr *MockInterfaceMockRecorder) DeviceGetGraphicsRunningProcesses(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetGraphicsRunningProcesses", reflect.TypeOf((*MockInterface)(nil).DeviceGetGraphicsRunningProcesses), arg0)
}

// DeviceGetGridLicensableFeatures mocks base method.
func (m *MockInterface) DeviceGetGridLicensableFeatures(arg0 nvml.Device) (nvml.GridLicensableFeatures, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetGridLicensableFeatures", arg0)
	ret0, _ := ret[0].(nvml.GridLicensableFeatures)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetGridLicensableFeatures indicates an expected call of DeviceGetGridLicensableFeatures.
func (mr *MockInterfaceMockRecorder) DeviceGetGridLicensableFeatures(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetGridLicensableFeatures", reflect.TypeOf((*MockInterface)(nil).DeviceGetGridLicensableFeatures), arg0)
}

// DeviceGetGspFirmwareMode mocks base method.
func (m *MockInterface) DeviceGetGspFirmwareMode(arg0 nvml.Device) (bool, bool, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetGspFirmwareMode", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(nvml.Return)
	return ret0, ret1, ret2
}

// DeviceGetGspFirmwareMode indicates an expected call of DeviceGetGspFirmwareMode.
func (mr *MockInterfaceMockRecorder) DeviceGetGspFirmwareMode(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetGspFirmwareMode", reflect.TypeOf((*MockInterface)(nil).DeviceGetGspFirmwareMode), arg0)
}

// DeviceGetGspFirmwareVersion mocks base method.
func (m *MockInterface) DeviceGetGspFirmwareVersion(arg0 nvml.Device) (string, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetGspFirmwareVersion", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetGspFirmwareVersion indicates an expected call of DeviceGetGspFirmwareVersion.
func (mr *MockInterfaceMockRecorder) DeviceGetGspFirmwareVersion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetGspFirmwareVersion", reflect.TypeOf((*MockInterface)(nil).DeviceGetGspFirmwareVersion), arg0)
}

// DeviceGetHandleByIndex mocks base method.
func (m *MockInterface) DeviceGetHandleByIndex(arg0 int) (nvml.Device, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetHandleByIndex", arg0)
	ret0, _ := ret[0].(nvml.Device)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetHandleByIndex indicates an expected call of DeviceGetHandleByIndex.
func (mr *MockInterfaceMockRecorder) DeviceGetHandleByIndex(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetHandleByIndex", reflect.TypeOf((*MockInterface)(nil).DeviceGetHandleByIndex), arg0)
}

// DeviceGetHandleByPciBusId mocks base method.
func (m *MockInterface) DeviceGetHandleByPciBusId(arg0 string) (nvml.Device, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetHandleByPciBusId", arg0)
	ret0, _ := ret[0].(nvml.Device)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetHandleByPciBusId indicates an expected call of DeviceGetHandleByPciBusId.
func (mr *MockInterfaceMockRecorder) DeviceGetHandleByPciBusId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetHandleByPciBusId", reflect.TypeOf((*MockInterface)(nil).DeviceGetHandleByPciBusId), arg0)
}

// DeviceGetHandleBySerial mocks base method.
func (m *MockInterface) DeviceGetHandleBySerial(arg0 string) (nvml.Device, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetHandleBySerial", arg0)
	ret0, _ := ret[0].(nvml.Device)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetHandleBySerial indicates an expected call of DeviceGetHandleBySerial.
func (mr *MockInterfaceMockRecorder) DeviceGetHandleBySerial(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetHandleBySerial", reflect.TypeOf((*MockInterface)(nil).DeviceGetHandleBySerial), arg0)
}

// DeviceGetHandleByUUID mocks base method.
func (m *MockInterface) DeviceGetHandleByUUID(arg0 string) (nvml.Device, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetHandleByUUID", arg0)
	ret0, _ := ret[0].(nvml.Device)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetHandleByUUID indicates an expected call of DeviceGetHandleByUUID.
func (mr *MockInterfaceMockRecorder) DeviceGetHandleByUUID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetHandleByUUID", reflect.TypeOf((*MockInterface)(nil).DeviceGetHandleByUUID), arg0)
}

// DeviceGetHostVgpuMode mocks base method.
func (m *MockInterface) DeviceGetHostVgpuMode(arg0 nvml.Device) (nvml.HostVgpuMode, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetHostVgpuMode", arg0)
	ret0, _ := ret[0].(nvml.HostVgpuMode)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetHostVgpuMode indicates an expected call of DeviceGetHostVgpuMode.
func (mr *MockInterfaceMockRecorder) DeviceGetHostVgpuMode(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetHostVgpuMode", reflect.TypeOf((*MockInterface)(nil).DeviceGetHostVgpuMode), arg0)
}

// DeviceGetIndex mocks base method.
func (m *MockInterface) DeviceGetIndex(arg0 nvml.Device) (int, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetIndex", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetIndex indicates an expected call of DeviceGetIndex.
func (mr *MockInterfaceMockRecorder) DeviceGetIndex(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetIndex", reflect.TypeOf((*MockInterface)(nil).DeviceGetIndex), arg0)
}

// DeviceGetInforomConfigurationChecksum mocks base method.
func (m *MockInterface) DeviceGetInforomConfigurationChecksum(arg0 nvml.Device) (uint32, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetInforomConfigurationChecksum", arg0)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetInforomConfigurationChecksum indicates an expected call of DeviceGetInforomConfigurationChecksum.
func (mr *MockInterfaceMockRecorder) DeviceGetInforomConfigurationChecksum(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetInforomConfigurationChecksum", reflect.TypeOf((*MockInterface)(nil).DeviceGetInforomConfigurationChecksum), arg0)
}

// DeviceGetInforomImageVersion mocks base method.
func (m *MockInterface) DeviceGetInforomImageVersion(arg0 nvml.Device) (string, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetInforomImageVersion", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetInforomImageVersion indicates an expected call of DeviceGetInforomImageVersion.
func (mr *MockInterfaceMockRecorder) DeviceGetInforomImageVersion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetInforomImageVersion", reflect.TypeOf((*MockInterface)(nil).DeviceGetInforomImageVersion), arg0)
}

// DeviceGetInforomVersion mocks base method.
func (m *MockInterface) DeviceGetInforomVersion(arg0 nvml.Device, arg1 nvml.InforomObject) (string, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetInforomVersion", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetInforomVersion indicates an expected call of DeviceGetInforomVersion.
func (mr *MockInterfaceMockRecorder) DeviceGetInforomVersion(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetInforomVersion", reflect.TypeOf((*MockInterface)(nil).DeviceGetInforomVersion), arg0, arg1)
}

// DeviceGetIrqNum mocks base method.
func (m *MockInterface) DeviceGetIrqNum(arg0 nvml.Device) (int, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetIrqNum", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetIrqNum indicates an expected call of DeviceGetIrqNum.
func (mr *MockInterfaceMockRecorder) DeviceGetIrqNum(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetIrqNum", reflect.TypeOf((*MockInterface)(nil).DeviceGetIrqNum), arg0)
}

// DeviceGetJpgUtilization mocks base method.
func (m *MockInterface) DeviceGetJpgUtilization(arg0 nvml.Device) (uint32, uint32, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetJpgUtilization", arg0)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(uint32)
	ret2, _ := ret[2].(nvml.Return)
	return ret0, ret1, ret2
}

// DeviceGetJpgUtilization indicates an expected call of DeviceGetJpgUtilization.
func (mr *MockInterfaceMockRecorder) DeviceGetJpgUtilization(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetJpgUtilization", reflect.TypeOf((*MockInterface)(nil).DeviceGetJpgUtilization), arg0)
}

// DeviceGetLastBBXFlushTime mocks base method.
func (m *MockInterface) DeviceGetLastBBXFlushTime(arg0 nvml.Device) (uint64, uint, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetLastBBXFlushTime", arg0)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(uint)
	ret2, _ := ret[2].(nvml.Return)
	return ret0, ret1, ret2
}

// DeviceGetLastBBXFlushTime indicates an expected call of DeviceGetLastBBXFlushTime.
func (mr *MockInterfaceMockRecorder) DeviceGetLastBBXFlushTime(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetLastBBXFlushTime", reflect.TypeOf((*MockInterface)(nil).DeviceGetLastBBXFlushTime), arg0)
}

// DeviceGetMPSComputeRunningProcesses mocks base method.
func (m *MockInterface) DeviceGetMPSComputeRunningProcesses(arg0 nvml.Device) ([]nvml.ProcessInfo, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetMPSComputeRunningProcesses", arg0)
	ret0, _ := ret[0].([]nvml.ProcessInfo)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetMPSComputeRunningProcesses indicates an expected call of DeviceGetMPSComputeRunningProcesses.
func (mr *MockInterfaceMockRecorder) DeviceGetMPSComputeRunningProcesses(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetMPSComputeRunningProcesses", reflect.TypeOf((*MockInterface)(nil).DeviceGetMPSComputeRunningProcesses), arg0)
}

// DeviceGetMaxClockInfo mocks base method.
func (m *MockInterface) DeviceGetMaxClockInfo(arg0 nvml.Device, arg1 nvml.ClockType) (uint32, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetMaxClockInfo", arg0, arg1)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetMaxClockInfo indicates an expected call of DeviceGetMaxClockInfo.
func (mr *MockInterfaceMockRecorder) DeviceGetMaxClockInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetMaxClockInfo", reflect.TypeOf((*MockInterface)(nil).DeviceGetMaxClockInfo), arg0, arg1)
}

// DeviceGetMaxCustomerBoostClock mocks base method.
func (m *MockInterface) DeviceGetMaxCustomerBoostClock(arg0 nvml.Device, arg1 nvml.ClockType) (uint32, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetMaxCustomerBoostClock", arg0, arg1)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetMaxCustomerBoostClock indicates an expected call of DeviceGetMaxCustomerBoostClock.
func (mr *MockInterfaceMockRecorder) DeviceGetMaxCustomerBoostClock(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetMaxCustomerBoostClock", reflect.TypeOf((*MockInterface)(nil).DeviceGetMaxCustomerBoostClock), arg0, arg1)
}

// DeviceGetMaxMigDeviceCount mocks base method.
func (m *MockInterface) DeviceGetMaxMigDeviceCount(arg0 nvml.Device) (int, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetMaxMigDeviceCount", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetMaxMigDeviceCount indicates an expected call of DeviceGetMaxMigDeviceCount.
func (mr *MockInterfaceMockRecorder) DeviceGetMaxMigDeviceCount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetMaxMigDeviceCount", reflect.TypeOf((*MockInterface)(nil).DeviceGetMaxMigDeviceCount), arg0)
}

// DeviceGetMaxPcieLinkGeneration mocks base method.
func (m *MockInterface) DeviceGetMaxPcieLinkGeneration(arg0 nvml.Device) (int, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetMaxPcieLinkGeneration", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetMaxPcieLinkGeneration indicates an expected call of DeviceGetMaxPcieLinkGeneration.
func (mr *MockInterfaceMockRecorder) DeviceGetMaxPcieLinkGeneration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetMaxPcieLinkGeneration", reflect.TypeOf((*MockInterface)(nil).DeviceGetMaxPcieLinkGeneration), arg0)
}

// DeviceGetMaxPcieLinkWidth mocks base method.
func (m *MockInterface) DeviceGetMaxPcieLinkWidth(arg0 nvml.Device) (int, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetMaxPcieLinkWidth", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetMaxPcieLinkWidth indicates an expected call of DeviceGetMaxPcieLinkWidth.
func (mr *MockInterfaceMockRecorder) DeviceGetMaxPcieLinkWidth(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetMaxPcieLinkWidth", reflect.TypeOf((*MockInterface)(nil).DeviceGetMaxPcieLinkWidth), arg0)
}

// DeviceGetMemClkMinMaxVfOffset mocks base method.
func (m *MockInterface) DeviceGetMemClkMinMaxVfOffset(arg0 nvml.Device) (int, int, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetMemClkMinMaxVfOffset", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(nvml.Return)
	return ret0, ret1, ret2
}

// DeviceGetMemClkMinMaxVfOffset indicates an expected call of DeviceGetMemClkMinMaxVfOffset.
func (mr *MockInterfaceMockRecorder) DeviceGetMemClkMinMaxVfOffset(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetMemClkMinMaxVfOffset", reflect.TypeOf((*MockInterface)(nil).DeviceGetMemClkMinMaxVfOffset), arg0)
}

// DeviceGetMemClkVfOffset mocks base method.
func (m *MockInterface) DeviceGetMemClkVfOffset(arg0 nvml.Device) (int, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetMemClkVfOffset", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetMemClkVfOffset indicates an expected call of DeviceGetMemClkVfOffset.
func (mr *MockInterfaceMockRecorder) DeviceGetMemClkVfOffset(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetMemClkVfOffset", reflect.TypeOf((*MockInterface)(nil).DeviceGetMemClkVfOffset), arg0)
}

// DeviceGetMemoryAffinity mocks base method.
func (m *MockInterface) DeviceGetMemoryAffinity(arg0 nvml.Device, arg1 int, arg2 nvml.AffinityScope) ([]uint, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetMemoryAffinity", arg0, arg1, arg2)
	ret0, _ := ret[0].([]uint)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetMemoryAffinity indicates an expected call of DeviceGetMemoryAffinity.
func (mr *MockInterfaceMockRecorder) DeviceGetMemoryAffinity(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetMemoryAffinity", reflect.TypeOf((*MockInterface)(nil).DeviceGetMemoryAffinity), arg0, arg1, arg2)
}

// DeviceGetMemoryBusWidth mocks base method.
func (m *MockInterface) DeviceGetMemoryBusWidth(arg0 nvml.Device) (uint32, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetMemoryBusWidth", arg0)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetMemoryBusWidth indicates an expected call of DeviceGetMemoryBusWidth.
func (mr *MockInterfaceMockRecorder) DeviceGetMemoryBusWidth(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetMemoryBusWidth", reflect.TypeOf((*MockInterface)(nil).DeviceGetMemoryBusWidth), arg0)
}

// DeviceGetMemoryErrorCounter mocks base method.
func (m *MockInterface) DeviceGetMemoryErrorCounter(arg0 nvml.Device, arg1 nvml.MemoryErrorType, arg2 nvml.EccCounterType, arg3 nvml.MemoryLocation) (uint64, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetMemoryErrorCounter", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetMemoryErrorCounter indicates an expected call of DeviceGetMemoryErrorCounter.
func (mr *MockInterfaceMockRecorder) DeviceGetMemoryErrorCounter(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetMemoryErrorCounter", reflect.TypeOf((*MockInterface)(nil).DeviceGetMemoryErrorCounter), arg0, arg1, arg2, arg3)
}

// DeviceGetMemoryInfo mocks base method.
func (m *MockInterface) DeviceGetMemoryInfo(arg0 nvml.Device) (nvml.Memory, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetMemoryInfo", arg0)
	ret0, _ := ret[0].(nvml.Memory)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetMemoryInfo indicates an expected call of DeviceGetMemoryInfo.
func (mr *MockInterfaceMockRecorder) DeviceGetMemoryInfo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetMemoryInfo", reflect.TypeOf((*MockInterface)(nil).DeviceGetMemoryInfo), arg0)
}

// DeviceGetMemoryInfo_v2 mocks base method.
func (m *MockInterface) DeviceGetMemoryInfo_v2(arg0 nvml.Device) (nvml.Memory_v2, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetMemoryInfo_v2", arg0)
	ret0, _ := ret[0].(nvml.Memory_v2)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetMemoryInfo_v2 indicates an expected call of DeviceGetMemoryInfo_v2.
func (mr *MockInterfaceMockRecorder) DeviceGetMemoryInfo_v2(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetMemoryInfo_v2", reflect.TypeOf((*MockInterface)(nil).DeviceGetMemoryInfo_v2), arg0)
}

// DeviceGetMigDeviceHandleByIndex mocks base method.
func (m *MockInterface) DeviceGetMigDeviceHandleByIndex(arg0 nvml.Device, arg1 int) (nvml.Device, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetMigDeviceHandleByIndex", arg0, arg1)
	ret0, _ := ret[0].(nvml.Device)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetMigDeviceHandleByIndex indicates an expected call of DeviceGetMigDeviceHandleByIndex.
func (mr *MockInterfaceMockRecorder) DeviceGetMigDeviceHandleByIndex(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetMigDeviceHandleByIndex", reflect.TypeOf((*MockInterface)(nil).DeviceGetMigDeviceHandleByIndex), arg0, arg1)
}

// DeviceGetMigMode mocks base method.
func (m *MockInterface) DeviceGetMigMode(arg0 nvml.Device) (int, int, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetMigMode", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(nvml.Return)
	return ret0, ret1, ret2
}

// DeviceGetMigMode indicates an expected call of DeviceGetMigMode.
func (mr *MockInterfaceMockRecorder) DeviceGetMigMode(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetMigMode", reflect.TypeOf((*MockInterface)(nil).DeviceGetMigMode), arg0)
}

// DeviceGetMinMaxClockOfPState mocks base method.
func (m *MockInterface) DeviceGetMinMaxClockOfPState(arg0 nvml.Device, arg1 nvml.ClockType, arg2 nvml.Pstates) (uint32, uint32, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetMinMaxClockOfPState", arg0, arg1, arg2)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(uint32)
	ret2, _ := ret[2].(nvml.Return)
	return ret0, ret1, ret2
}

// DeviceGetMinMaxClockOfPState indicates an expected call of DeviceGetMinMaxClockOfPState.
func (mr *MockInterfaceMockRecorder) DeviceGetMinMaxClockOfPState(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetMinMaxClockOfPState", reflect.TypeOf((*MockInterface)(nil).DeviceGetMinMaxClockOfPState), arg0, arg1, arg2)
}

// DeviceGetMinMaxFanSpeed mocks base method.
func (m *MockInterface) DeviceGetMinMaxFanSpeed(arg0 nvml.Device) (int, int, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetMinMaxFanSpeed", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(nvml.Return)
	return ret0, ret1, ret2
}

// DeviceGetMinMaxFanSpeed indicates an expected call of DeviceGetMinMaxFanSpeed.
func (mr *MockInterfaceMockRecorder) DeviceGetMinMaxFanSpeed(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetMinMaxFanSpeed", reflect.TypeOf((*MockInterface)(nil).DeviceGetMinMaxFanSpeed), arg0)
}

// DeviceGetMinorNumber mocks base method.
func (m *MockInterface) DeviceGetMinorNumber(arg0 nvml.Device) (int, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetMinorNumber", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetMinorNumber indicates an expected call of DeviceGetMinorNumber.
func (mr *MockInterfaceMockRecorder) DeviceGetMinorNumber(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetMinorNumber", reflect.TypeOf((*MockInterface)(nil).DeviceGetMinorNumber), arg0)
}

// DeviceGetModuleId mocks base method.
func (m *MockInterface) DeviceGetModuleId(arg0 nvml.Device) (int, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetModuleId", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetModuleId indicates an expected call of DeviceGetModuleId.
func (mr *MockInterfaceMockRecorder) DeviceGetModuleId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetModuleId", reflect.TypeOf((*MockInterface)(nil).DeviceGetModuleId), arg0)
}

// DeviceGetMultiGpuBoard mocks base method.
func (m *MockInterface) DeviceGetMultiGpuBoard(arg0 nvml.Device) (int, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetMultiGpuBoard", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetMultiGpuBoard indicates an expected call of DeviceGetMultiGpuBoard.
func (mr *MockInterfaceMockRecorder) DeviceGetMultiGpuBoard(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetMultiGpuBoard", reflect.TypeOf((*MockInterface)(nil).DeviceGetMultiGpuBoard), arg0)
}

// DeviceGetName mocks base method.
func (m *MockInterface) DeviceGetName(arg0 nvml.Device) (string, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetName", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetName indicates an expected call of DeviceGetName.
func (mr *MockInterfaceMockRecorder) DeviceGetName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetName", reflect.TypeOf((*MockInterface)(nil).DeviceGetName), arg0)
}

// DeviceGetNumFans mocks base method.
func (m *MockInterface) DeviceGetNumFans(arg0 nvml.Device) (int, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetNumFans", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetNumFans indicates an expected call of DeviceGetNumFans.
func (mr *MockInterfaceMockRecorder) DeviceGetNumFans(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetNumFans", reflect.TypeOf((*MockInterface)(nil).DeviceGetNumFans), arg0)
}

// DeviceGetNumGpuCores mocks base method.
func (m *MockInterface) DeviceGetNumGpuCores(arg0 nvml.Device) (int, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetNumGpuCores", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetNumGpuCores indicates an expected call of DeviceGetNumGpuCores.
func (mr *MockInterfaceMockRecorder) DeviceGetNumGpuCores(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetNumGpuCores", reflect.TypeOf((*MockInterface)(nil).DeviceGetNumGpuCores), arg0)
}

// DeviceGetNumaNodeId mocks base method.
func (m *MockInterface) DeviceGetNumaNodeId(arg0 nvml.Device) (int, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetNumaNodeId", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetNumaNodeId indicates an expected call of DeviceGetNumaNodeId.
func (mr *MockInterfaceMockRecorder) DeviceGetNumaNodeId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetNumaNodeId", reflect.TypeOf((*MockInterface)(nil).DeviceGetNumaNodeId), arg0)
}

// DeviceGetNvLinkCapability mocks base method.
func (m *MockInterface) DeviceGetNvLinkCapability(arg0 nvml.Device, arg1 int, arg2 nvml.NvLinkCapability) (uint32, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetNvLinkCapability", arg0, arg1, arg2)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetNvLinkCapability indicates an expected call of DeviceGetNvLinkCapability.
func (mr *MockInterfaceMockRecorder) DeviceGetNvLinkCapability(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetNvLinkCapability", reflect.TypeOf((*MockInterface)(nil).DeviceGetNvLinkCapability), arg0, arg1, arg2)
}

// DeviceGetNvLinkErrorCounter mocks base method.
func (m *MockInterface) DeviceGetNvLinkErrorCounter(arg0 nvml.Device, arg1 int, arg2 nvml.NvLinkErrorCounter) (uint64, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetNvLinkErrorCounter", arg0, arg1, arg2)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetNvLinkErrorCounter indicates an expected call of DeviceGetNvLinkErrorCounter.
func (mr *MockInterfaceMockRecorder) DeviceGetNvLinkErrorCounter(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetNvLinkErrorCounter", reflect.TypeOf((*MockInterface)(nil).DeviceGetNvLinkErrorCounter), arg0, arg1, arg2)
}

// DeviceGetNvLinkRemoteDeviceType mocks base method.
func (m *MockInterface) DeviceGetNvLinkRemoteDeviceType(arg0 nvml.Device, arg1 int) (nvml.IntNvLinkDeviceType, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetNvLinkRemoteDeviceType", arg0, arg1)
	ret0, _ := ret[0].(nvml.IntNvLinkDeviceType)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetNvLinkRemoteDeviceType indicates an expected call of DeviceGetNvLinkRemoteDeviceType.
func (mr *MockInterfaceMockRecorder) DeviceGetNvLinkRemoteDeviceType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetNvLinkRemoteDeviceType", reflect.TypeOf((*MockInterface)(nil).DeviceGetNvLinkRemoteDeviceType), arg0, arg1)
}

// DeviceGetNvLinkRemotePciInfo mocks base method.
func (m *MockInterface) DeviceGetNvLinkRemotePciInfo(arg0 nvml.Device, arg1 int) (nvml.PciInfo, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetNvLinkRemotePciInfo", arg0, arg1)
	ret0, _ := ret[0].(nvml.PciInfo)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetNvLinkRemotePciInfo indicates an expected call of DeviceGetNvLinkRemotePciInfo.
func (mr *MockInterfaceMockRecorder) DeviceGetNvLinkRemotePciInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetNvLinkRemotePciInfo", reflect.TypeOf((*MockInterface)(nil).DeviceGetNvLinkRemotePciInfo), arg0, arg1)
}

// DeviceGetNvLinkState mocks base method.
func (m *MockInterface) DeviceGetNvLinkState(arg0 nvml.Device, arg1 int) (nvml.EnableState, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetNvLinkState", arg0, arg1)
	ret0, _ := ret[0].(nvml.EnableState)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetNvLinkState indicates an expected call of DeviceGetNvLinkState.
func (mr *MockInterfaceMockRecorder) DeviceGetNvLinkState(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetNvLinkState", reflect.TypeOf((*MockInterface)(nil).DeviceGetNvLinkState), arg0, arg1)
}

// DeviceGetNvLinkUtilizationControl mocks base method.
func (m *MockInterface) DeviceGetNvLinkUtilizationControl(arg0 nvml.Device, arg1, arg2 int) (nvml.NvLinkUtilizationControl, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetNvLinkUtilizationControl", arg0, arg1, arg2)
	ret0, _ := ret[0].(nvml.NvLinkUtilizationControl)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetNvLinkUtilizationControl indicates an expected call of DeviceGetNvLinkUtilizationControl.
func (mr *MockInterfaceMockRecorder) DeviceGetNvLinkUtilizationControl(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetNvLinkUtilizationControl", reflect.TypeOf((*MockInterface)(nil).DeviceGetNvLinkUtilizationControl), arg0, arg1, arg2)
}

// DeviceGetNvLinkUtilizationCounter mocks base method.
func (m *MockInterface) DeviceGetNvLinkUtilizationCounter(arg0 nvml.Device, arg1, arg2 int) (uint64, uint64, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetNvLinkUtilizationCounter", arg0, arg1, arg2)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(uint64)
	ret2, _ := ret[2].(nvml.Return)
	return ret0, ret1, ret2
}

// DeviceGetNvLinkUtilizationCounter indicates an expected call of DeviceGetNvLinkUtilizationCounter.
func (mr *MockInterfaceMockRecorder) DeviceGetNvLinkUtilizationCounter(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetNvLinkUtilizationCounter", reflect.TypeOf((*MockInterface)(nil).DeviceGetNvLinkUtilizationCounter), arg0, arg1, arg2)
}

// DeviceGetNvLinkVersion mocks base method.
func (m *MockInterface) DeviceGetNvLinkVersion(arg0 nvml.Device, arg1 int) (uint32, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetNvLinkVersion", arg0, arg1)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetNvLinkVersion indicates an expected call of DeviceGetNvLinkVersion.
func (mr *MockInterfaceMockRecorder) DeviceGetNvLinkVersion(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetNvLinkVersion", reflect.TypeOf((*MockInterface)(nil).DeviceGetNvLinkVersion), arg0, arg1)
}

// DeviceGetOfaUtilization mocks base method.
func (m *MockInterface) DeviceGetOfaUtilization(arg0 nvml.Device) (uint32, uint32, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetOfaUtilization", arg0)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(uint32)
	ret2, _ := ret[2].(nvml.Return)
	return ret0, ret1, ret2
}

// DeviceGetOfaUtilization indicates an expected call of DeviceGetOfaUtilization.
func (mr *MockInterfaceMockRecorder) DeviceGetOfaUtilization(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetOfaUtilization", reflect.TypeOf((*MockInterface)(nil).DeviceGetOfaUtilization), arg0)
}

// DeviceGetP2PStatus mocks base method.
func (m *MockInterface) DeviceGetP2PStatus(arg0, arg1 nvml.Device, arg2 nvml.GpuP2PCapsIndex) (nvml.GpuP2PStatus, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetP2PStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(nvml.GpuP2PStatus)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetP2PStatus indicates an expected call of DeviceGetP2PStatus.
func (mr *MockInterfaceMockRecorder) DeviceGetP2PStatus(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetP2PStatus", reflect.TypeOf((*MockInterface)(nil).DeviceGetP2PStatus), arg0, arg1, arg2)
}

// DeviceGetPciInfo mocks base method.
func (m *MockInterface) DeviceGetPciInfo(arg0 nvml.Device) (nvml.PciInfo, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetPciInfo", arg0)
	ret0, _ := ret[0].(nvml.PciInfo)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetPciInfo indicates an expected call of DeviceGetPciInfo.
func (mr *MockInterfaceMockRecorder) DeviceGetPciInfo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetPciInfo", reflect.TypeOf((*MockInterface)(nil).DeviceGetPciInfo), arg0)
}

// DeviceGetPciInfoExt mocks base method.
func (m *MockInterface) DeviceGetPciInfoExt(arg0 nvml.Device) (nvml.PciInfoExt, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetPciInfoExt", arg0)
	ret0, _ := ret[0].(nvml.PciInfoExt)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetPciInfoExt indicates an expected call of DeviceGetPciInfoExt.
func (mr *MockInterfaceMockRecorder) DeviceGetPciInfoExt(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetPciInfoExt", reflect.TypeOf((*MockInterface)(nil).DeviceGetPciInfoExt), arg0)
}

// DeviceGetPcieLinkMaxSpeed mocks base method.
func (m *MockInterface) DeviceGetPcieLinkMaxSpeed(arg0 nvml.Device) (uint32, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetPcieLinkMaxSpeed", arg0)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetPcieLinkMaxSpeed indicates an expected call of DeviceGetPcieLinkMaxSpeed.
func (mr *MockInterfaceMockRecorder) DeviceGetPcieLinkMaxSpeed(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetPcieLinkMaxSpeed", reflect.TypeOf((*MockInterface)(nil).DeviceGetPcieLinkMaxSpeed), arg0)
}

// DeviceGetPcieReplayCounter mocks base method.
func (m *MockInterface) DeviceGetPcieReplayCounter(arg0 nvml.Device) (int, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetPcieReplayCounter", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetPcieReplayCounter indicates an expected call of DeviceGetPcieReplayCounter.
func (mr *MockInterfaceMockRecorder) DeviceGetPcieReplayCounter(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetPcieReplayCounter", reflect.TypeOf((*MockInterface)(nil).DeviceGetPcieReplayCounter), arg0)
}

// DeviceGetPcieSpeed mocks base method.
func (m *MockInterface) DeviceGetPcieSpeed(arg0 nvml.Device) (int, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetPcieSpeed", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetPcieSpeed indicates an expected call of DeviceGetPcieSpeed.
func (mr *MockInterfaceMockRecorder) DeviceGetPcieSpeed(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetPcieSpeed", reflect.TypeOf((*MockInterface)(nil).DeviceGetPcieSpeed), arg0)
}

// DeviceGetPcieThroughput mocks base method.
func (m *MockInterface) DeviceGetPcieThroughput(arg0 nvml.Device, arg1 nvml.PcieUtilCounter) (uint32, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetPcieThroughput", arg0, arg1)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetPcieThroughput indicates an expected call of DeviceGetPcieThroughput.
func (mr *MockInterfaceMockRecorder) DeviceGetPcieThroughput(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetPcieThroughput", reflect.TypeOf((*MockInterface)(nil).DeviceGetPcieThroughput), arg0, arg1)
}

// DeviceGetPerformanceState mocks base method.
func (m *MockInterface) DeviceGetPerformanceState(arg0 nvml.Device) (nvml.Pstates, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetPerformanceState", arg0)
	ret0, _ := ret[0].(nvml.Pstates)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetPerformanceState indicates an expected call of DeviceGetPerformanceState.
func (mr *MockInterfaceMockRecorder) DeviceGetPerformanceState(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetPerformanceState", reflect.TypeOf((*MockInterface)(nil).DeviceGetPerformanceState), arg0)
}

// DeviceGetPersistenceMode mocks base method.
func (m *MockInterface) DeviceGetPersistenceMode(arg0 nvml.Device) (nvml.EnableState, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetPersistenceMode", arg0)
	ret0, _ := ret[0].(nvml.EnableState)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetPersistenceMode indicates an expected call of DeviceGetPersistenceMode.
func (mr *MockInterfaceMockRecorder) DeviceGetPersistenceMode(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetPersistenceMode", reflect.TypeOf((*MockInterface)(nil).DeviceGetPersistenceMode), arg0)
}

// DeviceGetPgpuMetadataString mocks base method.
func (m *MockInterface) DeviceGetPgpuMetadataString(arg0 nvml.Device) (string, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetPgpuMetadataString", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetPgpuMetadataString indicates an expected call of DeviceGetPgpuMetadataString.
func (mr *MockInterfaceMockRecorder) DeviceGetPgpuMetadataString(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetPgpuMetadataString", reflect.TypeOf((*MockInterface)(nil).DeviceGetPgpuMetadataString), arg0)
}

// DeviceGetPowerManagementDefaultLimit mocks base method.
func (m *MockInterface) DeviceGetPowerManagementDefaultLimit(arg0 nvml.Device) (uint32, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetPowerManagementDefaultLimit", arg0)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetPowerManagementDefaultLimit indicates an expected call of DeviceGetPowerManagementDefaultLimit.
func (mr *MockInterfaceMockRecorder) DeviceGetPowerManagementDefaultLimit(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetPowerManagementDefaultLimit", reflect.TypeOf((*MockInterface)(nil).DeviceGetPowerManagementDefaultLimit), arg0)
}

// DeviceGetPowerManagementLimit mocks base method.
func (m *MockInterface) DeviceGetPowerManagementLimit(arg0 nvml.Device) (uint32, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetPowerManagementLimit", arg0)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetPowerManagementLimit indicates an expected call of DeviceGetPowerManagementLimit.
func (mr *MockInterfaceMockRecorder) DeviceGetPowerManagementLimit(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetPowerManagementLimit", reflect.TypeOf((*MockInterface)(nil).DeviceGetPowerManagementLimit), arg0)
}

// DeviceGetPowerManagementLimitConstraints mocks base method.
func (m *MockInterface) DeviceGetPowerManagementLimitConstraints(arg0 nvml.Device) (uint32, uint32, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetPowerManagementLimitConstraints", arg0)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(uint32)
	ret2, _ := ret[2].(nvml.Return)
	return ret0, ret1, ret2
}

// DeviceGetPowerManagementLimitConstraints indicates an expected call of DeviceGetPowerManagementLimitConstraints.
func (mr *MockInterfaceMockRecorder) DeviceGetPowerManagementLimitConstraints(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetPowerManagementLimitConstraints", reflect.TypeOf((*MockInterface)(nil).DeviceGetPowerManagementLimitConstraints), arg0)
}

// DeviceGetPowerManagementMode mocks base method.
func (m *MockInterface) DeviceGetPowerManagementMode(arg0 nvml.Device) (nvml.EnableState, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetPowerManagementMode", arg0)
	ret0, _ := ret[0].(nvml.EnableState)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetPowerManagementMode indicates an expected call of DeviceGetPowerManagementMode.
func (mr *MockInterfaceMockRecorder) DeviceGetPowerManagementMode(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetPowerManagementMode", reflect.TypeOf((*MockInterface)(nil).DeviceGetPowerManagementMode), arg0)
}

// DeviceGetPowerSource mocks base method.
func (m *MockInterface) DeviceGetPowerSource(arg0 nvml.Device) (nvml.PowerSource, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetPowerSource", arg0)
	ret0, _ := ret[0].(nvml.PowerSource)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetPowerSource indicates an expected call of DeviceGetPowerSource.
func (mr *MockInterfaceMockRecorder) DeviceGetPowerSource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetPowerSource", reflect.TypeOf((*MockInterface)(nil).DeviceGetPowerSource), arg0)
}

// DeviceGetPowerState mocks base method.
func (m *MockInterface) DeviceGetPowerState(arg0 nvml.Device) (nvml.Pstates, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetPowerState", arg0)
	ret0, _ := ret[0].(nvml.Pstates)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetPowerState indicates an expected call of DeviceGetPowerState.
func (mr *MockInterfaceMockRecorder) DeviceGetPowerState(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetPowerState", reflect.TypeOf((*MockInterface)(nil).DeviceGetPowerState), arg0)
}

// DeviceGetPowerUsage mocks base method.
func (m *MockInterface) DeviceGetPowerUsage(arg0 nvml.Device) (uint32, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetPowerUsage", arg0)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetPowerUsage indicates an expected call of DeviceGetPowerUsage.
func (mr *MockInterfaceMockRecorder) DeviceGetPowerUsage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetPowerUsage", reflect.TypeOf((*MockInterface)(nil).DeviceGetPowerUsage), arg0)
}

// DeviceGetProcessUtilization mocks base method.
func (m *MockInterface) DeviceGetProcessUtilization(arg0 nvml.Device, arg1 uint64) ([]nvml.ProcessUtilizationSample, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetProcessUtilization", arg0, arg1)
	ret0, _ := ret[0].([]nvml.ProcessUtilizationSample)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetProcessUtilization indicates an expected call of DeviceGetProcessUtilization.
func (mr *MockInterfaceMockRecorder) DeviceGetProcessUtilization(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetProcessUtilization", reflect.TypeOf((*MockInterface)(nil).DeviceGetProcessUtilization), arg0, arg1)
}

// DeviceGetProcessesUtilizationInfo mocks base method.
func (m *MockInterface) DeviceGetProcessesUtilizationInfo(arg0 nvml.Device) (nvml.ProcessesUtilizationInfo, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetProcessesUtilizationInfo", arg0)
	ret0, _ := ret[0].(nvml.ProcessesUtilizationInfo)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetProcessesUtilizationInfo indicates an expected call of DeviceGetProcessesUtilizationInfo.
func (mr *MockInterfaceMockRecorder) DeviceGetProcessesUtilizationInfo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetProcessesUtilizationInfo", reflect.TypeOf((*MockInterface)(nil).DeviceGetProcessesUtilizationInfo), arg0)
}

// DeviceGetRemappedRows mocks base method.
func (m *MockInterface) DeviceGetRemappedRows(arg0 nvml.Device) (int, int, bool, bool, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetRemappedRows", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(bool)
	ret3, _ := ret[3].(bool)
	ret4, _ := ret[4].(nvml.Return)
	return ret0, ret1, ret2, ret3, ret4
}

// DeviceGetRemappedRows indicates an expected call of DeviceGetRemappedRows.
func (mr *MockInterfaceMockRecorder) DeviceGetRemappedRows(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetRemappedRows", reflect.TypeOf((*MockInterface)(nil).DeviceGetRemappedRows), arg0)
}

// DeviceGetRetiredPages mocks base method.
func (m *MockInterface) DeviceGetRetiredPages(arg0 nvml.Device, arg1 nvml.PageRetirementCause) ([]uint64, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetRetiredPages", arg0, arg1)
	ret0, _ := ret[0].([]uint64)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetRetiredPages indicates an expected call of DeviceGetRetiredPages.
func (mr *MockInterfaceMockRecorder) DeviceGetRetiredPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetRetiredPages", reflect.TypeOf((*MockInterface)(nil).DeviceGetRetiredPages), arg0, arg1)
}

// DeviceGetRetiredPagesPendingStatus mocks base method.
func (m *MockInterface) DeviceGetRetiredPagesPendingStatus(arg0 nvml.Device) (nvml.EnableState, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetRetiredPagesPendingStatus", arg0)
	ret0, _ := ret[0].(nvml.EnableState)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetRetiredPagesPendingStatus indicates an expected call of DeviceGetRetiredPagesPendingStatus.
func (mr *MockInterfaceMockRecorder) DeviceGetRetiredPagesPendingStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetRetiredPagesPendingStatus", reflect.TypeOf((*MockInterface)(nil).DeviceGetRetiredPagesPendingStatus), arg0)
}

// DeviceGetRetiredPages_v2 mocks base method.
func (m *MockInterface) DeviceGetRetiredPages_v2(arg0 nvml.Device, arg1 nvml.PageRetirementCause) ([]uint64, []uint64, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetRetiredPages_v2", arg0, arg1)
	ret0, _ := ret[0].([]uint64)
	ret1, _ := ret[1].([]uint64)
	ret2, _ := ret[2].(nvml.Return)
	return ret0, ret1, ret2
}

// DeviceGetRetiredPages_v2 indicates an expected call of DeviceGetRetiredPages_v2.
func (mr *MockInterfaceMockRecorder) DeviceGetRetiredPages_v2(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetRetiredPages_v2", reflect.TypeOf((*MockInterface)(nil).DeviceGetRetiredPages_v2), arg0, arg1)
}

// DeviceGetRowRemapperHistogram mocks base method.
func (m *MockInterface) DeviceGetRowRemapperHistogram(arg0 nvml.Device) (nvml.RowRemapperHistogramValues, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetRowRemapperHistogram", arg0)
	ret0, _ := ret[0].(nvml.RowRemapperHistogramValues)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetRowRemapperHistogram indicates an expected call of DeviceGetRowRemapperHistogram.
func (mr *MockInterfaceMockRecorder) DeviceGetRowRemapperHistogram(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetRowRemapperHistogram", reflect.TypeOf((*MockInterface)(nil).DeviceGetRowRemapperHistogram), arg0)
}

// DeviceGetRunningProcessDetailList mocks base method.
func (m *MockInterface) DeviceGetRunningProcessDetailList(arg0 nvml.Device) (nvml.ProcessDetailList, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetRunningProcessDetailList", arg0)
	ret0, _ := ret[0].(nvml.ProcessDetailList)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetRunningProcessDetailList indicates an expected call of DeviceGetRunningProcessDetailList.
func (mr *MockInterfaceMockRecorder) DeviceGetRunningProcessDetailList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetRunningProcessDetailList", reflect.TypeOf((*MockInterface)(nil).DeviceGetRunningProcessDetailList), arg0)
}

// DeviceGetSamples mocks base method.
func (m *MockInterface) DeviceGetSamples(arg0 nvml.Device, arg1 nvml.SamplingType, arg2 uint64) (nvml.ValueType, []nvml.Sample, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetSamples", arg0, arg1, arg2)
	ret0, _ := ret[0].(nvml.ValueType)
	ret1, _ := ret[1].([]nvml.Sample)
	ret2, _ := ret[2].(nvml.Return)
	return ret0, ret1, ret2
}

// DeviceGetSamples indicates an expected call of DeviceGetSamples.
func (mr *MockInterfaceMockRecorder) DeviceGetSamples(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetSamples", reflect.TypeOf((*MockInterface)(nil).DeviceGetSamples), arg0, arg1, arg2)
}

// DeviceGetSerial mocks base method.
func (m *MockInterface) DeviceGetSerial(arg0 nvml.Device) (string, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetSerial", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetSerial indicates an expected call of DeviceGetSerial.
func (mr *MockInterfaceMockRecorder) DeviceGetSerial(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetSerial", reflect.TypeOf((*MockInterface)(nil).DeviceGetSerial), arg0)
}

// DeviceGetSramEccErrorStatus mocks base method.
func (m *MockInterface) DeviceGetSramEccErrorStatus(arg0 nvml.Device) (nvml.EccSramErrorStatus, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetSramEccErrorStatus", arg0)
	ret0, _ := ret[0].(nvml.EccSramErrorStatus)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetSramEccErrorStatus indicates an expected call of DeviceGetSramEccErrorStatus.
func (mr *MockInterfaceMockRecorder) DeviceGetSramEccErrorStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetSramEccErrorStatus", reflect.TypeOf((*MockInterface)(nil).DeviceGetSramEccErrorStatus), arg0)
}

// DeviceGetSupportedClocksEventReasons mocks base method.
func (m *MockInterface) DeviceGetSupportedClocksEventReasons(arg0 nvml.Device) (uint64, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetSupportedClocksEventReasons", arg0)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetSupportedClocksEventReasons indicates an expected call of DeviceGetSupportedClocksEventReasons.
func (mr *MockInterfaceMockRecorder) DeviceGetSupportedClocksEventReasons(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetSupportedClocksEventReasons", reflect.TypeOf((*MockInterface)(nil).DeviceGetSupportedClocksEventReasons), arg0)
}

// DeviceGetSupportedClocksThrottleReasons mocks base method.
func (m *MockInterface) DeviceGetSupportedClocksThrottleReasons(arg0 nvml.Device) (uint64, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetSupportedClocksThrottleReasons", arg0)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetSupportedClocksThrottleReasons indicates an expected call of DeviceGetSupportedClocksThrottleReasons.
func (mr *MockInterfaceMockRecorder) DeviceGetSupportedClocksThrottleReasons(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetSupportedClocksThrottleReasons", reflect.TypeOf((*MockInterface)(nil).DeviceGetSupportedClocksThrottleReasons), arg0)
}

// DeviceGetSupportedEventTypes mocks base method.
func (m *MockInterface) DeviceGetSupportedEventTypes(arg0 nvml.Device) (uint64, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetSupportedEventTypes", arg0)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetSupportedEventTypes indicates an expected call of DeviceGetSupportedEventTypes.
func (mr *MockInterfaceMockRecorder) DeviceGetSupportedEventTypes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetSupportedEventTypes", reflect.TypeOf((*MockInterface)(nil).DeviceGetSupportedEventTypes), arg0)
}

// DeviceGetSupportedGraphicsClocks mocks base method.
func (m *MockInterface) DeviceGetSupportedGraphicsClocks(arg0 nvml.Device, arg1 int) (int, uint32, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetSupportedGraphicsClocks", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(uint32)
	ret2, _ := ret[2].(nvml.Return)
	return ret0, ret1, ret2
}

// DeviceGetSupportedGraphicsClocks indicates an expected call of DeviceGetSupportedGraphicsClocks.
func (mr *MockInterfaceMockRecorder) DeviceGetSupportedGraphicsClocks(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetSupportedGraphicsClocks", reflect.TypeOf((*MockInterface)(nil).DeviceGetSupportedGraphicsClocks), arg0, arg1)
}

// DeviceGetSupportedMemoryClocks mocks base method.
func (m *MockInterface) DeviceGetSupportedMemoryClocks(arg0 nvml.Device) (int, uint32, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetSupportedMemoryClocks", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(uint32)
	ret2, _ := ret[2].(nvml.Return)
	return ret0, ret1, ret2
}

// DeviceGetSupportedMemoryClocks indicates an expected call of DeviceGetSupportedMemoryClocks.
func (mr *MockInterfaceMockRecorder) DeviceGetSupportedMemoryClocks(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetSupportedMemoryClocks", reflect.TypeOf((*MockInterface)(nil).DeviceGetSupportedMemoryClocks), arg0)
}

// DeviceGetSupportedPerformanceStates mocks base method.
func (m *MockInterface) DeviceGetSupportedPerformanceStates(arg0 nvml.Device) ([]nvml.Pstates, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetSupportedPerformanceStates", arg0)
	ret0, _ := ret[0].([]nvml.Pstates)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetSupportedPerformanceStates indicates an expected call of DeviceGetSupportedPerformanceStates.
func (mr *MockInterfaceMockRecorder) DeviceGetSupportedPerformanceStates(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetSupportedPerformanceStates", reflect.TypeOf((*MockInterface)(nil).DeviceGetSupportedPerformanceStates), arg0)
}

// DeviceGetSupportedVgpus mocks base method.
func (m *MockInterface) DeviceGetSupportedVgpus(arg0 nvml.Device) ([]nvml.VgpuTypeId, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetSupportedVgpus", arg0)
	ret0, _ := ret[0].([]nvml.VgpuTypeId)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetSupportedVgpus indicates an expected call of DeviceGetSupportedVgpus.
func (mr *MockInterfaceMockRecorder) DeviceGetSupportedVgpus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetSupportedVgpus", reflect.TypeOf((*MockInterface)(nil).DeviceGetSupportedVgpus), arg0)
}

// DeviceGetTargetFanSpeed mocks base method.
func (m *MockInterface) DeviceGetTargetFanSpeed(arg0 nvml.Device, arg1 int) (int, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetTargetFanSpeed", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetTargetFanSpeed indicates an expected call of DeviceGetTargetFanSpeed.
func (mr *MockInterfaceMockRecorder) DeviceGetTargetFanSpeed(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetTargetFanSpeed", reflect.TypeOf((*MockInterface)(nil).DeviceGetTargetFanSpeed), arg0, arg1)
}

// DeviceGetTemperature mocks base method.
func (m *MockInterface) DeviceGetTemperature(arg0 nvml.Device, arg1 nvml.TemperatureSensors) (uint32, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetTemperature", arg0, arg1)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetTemperature indicates an expected call of DeviceGetTemperature.
func (mr *MockInterfaceMockRecorder) DeviceGetTemperature(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetTemperature", reflect.TypeOf((*MockInterface)(nil).DeviceGetTemperature), arg0, arg1)
}

// DeviceGetTemperatureThreshold mocks base method.
func (m *MockInterface) DeviceGetTemperatureThreshold(arg0 nvml.Device, arg1 nvml.TemperatureThresholds) (uint32, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetTemperatureThreshold", arg0, arg1)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetTemperatureThreshold indicates an expected call of DeviceGetTemperatureThreshold.
func (mr *MockInterfaceMockRecorder) DeviceGetTemperatureThreshold(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetTemperatureThreshold", reflect.TypeOf((*MockInterface)(nil).DeviceGetTemperatureThreshold), arg0, arg1)
}

// DeviceGetThermalSettings mocks base method.
func (m *MockInterface) DeviceGetThermalSettings(arg0 nvml.Device, arg1 uint32) (nvml.GpuThermalSettings, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetThermalSettings", arg0, arg1)
	ret0, _ := ret[0].(nvml.GpuThermalSettings)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetThermalSettings indicates an expected call of DeviceGetThermalSettings.
func (mr *MockInterfaceMockRecorder) DeviceGetThermalSettings(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetThermalSettings", reflect.TypeOf((*MockInterface)(nil).DeviceGetThermalSettings), arg0, arg1)
}

// DeviceGetTopologyCommonAncestor mocks base method.
func (m *MockInterface) DeviceGetTopologyCommonAncestor(arg0, arg1 nvml.Device) (nvml.GpuTopologyLevel, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetTopologyCommonAncestor", arg0, arg1)
	ret0, _ := ret[0].(nvml.GpuTopologyLevel)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetTopologyCommonAncestor indicates an expected call of DeviceGetTopologyCommonAncestor.
func (mr *MockInterfaceMockRecorder) DeviceGetTopologyCommonAncestor(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetTopologyCommonAncestor", reflect.TypeOf((*MockInterface)(nil).DeviceGetTopologyCommonAncestor), arg0, arg1)
}

// DeviceGetTopologyNearestGpus mocks base method.
func (m *MockInterface) DeviceGetTopologyNearestGpus(arg0 nvml.Device, arg1 nvml.GpuTopologyLevel) ([]nvml.Device, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetTopologyNearestGpus", arg0, arg1)
	ret0, _ := ret[0].([]nvml.Device)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetTopologyNearestGpus indicates an expected call of DeviceGetTopologyNearestGpus.
func (mr *MockInterfaceMockRecorder) DeviceGetTopologyNearestGpus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetTopologyNearestGpus", reflect.TypeOf((*MockInterface)(nil).DeviceGetTopologyNearestGpus), arg0, arg1)
}

// DeviceGetTotalEccErrors mocks base method.
func (m *MockInterface) DeviceGetTotalEccErrors(arg0 nvml.Device, arg1 nvml.MemoryErrorType, arg2 nvml.EccCounterType) (uint64, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetTotalEccErrors", arg0, arg1, arg2)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetTotalEccErrors indicates an expected call of DeviceGetTotalEccErrors.
func (mr *MockInterfaceMockRecorder) DeviceGetTotalEccErrors(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetTotalEccErrors", reflect.TypeOf((*MockInterface)(nil).DeviceGetTotalEccErrors), arg0, arg1, arg2)
}

// DeviceGetTotalEnergyConsumption mocks base method.
func (m *MockInterface) DeviceGetTotalEnergyConsumption(arg0 nvml.Device) (uint64, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetTotalEnergyConsumption", arg0)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetTotalEnergyConsumption indicates an expected call of DeviceGetTotalEnergyConsumption.
func (mr *MockInterfaceMockRecorder) DeviceGetTotalEnergyConsumption(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetTotalEnergyConsumption", reflect.TypeOf((*MockInterface)(nil).DeviceGetTotalEnergyConsumption), arg0)
}

// DeviceGetUUID mocks base method.
func (m *MockInterface) DeviceGetUUID(arg0 nvml.Device) (string, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetUUID", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetUUID indicates an expected call of DeviceGetUUID.
func (mr *MockInterfaceMockRecorder) DeviceGetUUID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetUUID", reflect.TypeOf((*MockInterface)(nil).DeviceGetUUID), arg0)
}

// DeviceGetUtilizationRates mocks base method.
func (m *MockInterface) DeviceGetUtilizationRates(arg0 nvml.Device) (nvml.Utilization, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetUtilizationRates", arg0)
	ret0, _ := ret[0].(nvml.Utilization)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetUtilizationRates indicates an expected call of DeviceGetUtilizationRates.
func (mr *MockInterfaceMockRecorder) DeviceGetUtilizationRates(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetUtilizationRates", reflect.TypeOf((*MockInterface)(nil).DeviceGetUtilizationRates), arg0)
}

// DeviceGetVbiosVersion mocks base method.
func (m *MockInterface) DeviceGetVbiosVersion(arg0 nvml.Device) (string, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetVbiosVersion", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetVbiosVersion indicates an expected call of DeviceGetVbiosVersion.
func (mr *MockInterfaceMockRecorder) DeviceGetVbiosVersion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetVbiosVersion", reflect.TypeOf((*MockInterface)(nil).DeviceGetVbiosVersion), arg0)
}

// DeviceGetVgpuCapabilities mocks base method.
func (m *MockInterface) DeviceGetVgpuCapabilities(arg0 nvml.Device, arg1 nvml.DeviceVgpuCapability) (bool, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetVgpuCapabilities", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetVgpuCapabilities indicates an expected call of DeviceGetVgpuCapabilities.
func (mr *MockInterfaceMockRecorder) DeviceGetVgpuCapabilities(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetVgpuCapabilities", reflect.TypeOf((*MockInterface)(nil).DeviceGetVgpuCapabilities), arg0, arg1)
}

// DeviceGetVgpuHeterogeneousMode mocks base method.
func (m *MockInterface) DeviceGetVgpuHeterogeneousMode(arg0 nvml.Device) (nvml.VgpuHeterogeneousMode, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetVgpuHeterogeneousMode", arg0)
	ret0, _ := ret[0].(nvml.VgpuHeterogeneousMode)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetVgpuHeterogeneousMode indicates an expected call of DeviceGetVgpuHeterogeneousMode.
func (mr *MockInterfaceMockRecorder) DeviceGetVgpuHeterogeneousMode(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetVgpuHeterogeneousMode", reflect.TypeOf((*MockInterface)(nil).DeviceGetVgpuHeterogeneousMode), arg0)
}

// DeviceGetVgpuInstancesUtilizationInfo mocks base method.
func (m *MockInterface) DeviceGetVgpuInstancesUtilizationInfo(arg0 nvml.Device) (nvml.VgpuInstancesUtilizationInfo, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetVgpuInstancesUtilizationInfo", arg0)
	ret0, _ := ret[0].(nvml.VgpuInstancesUtilizationInfo)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetVgpuInstancesUtilizationInfo indicates an expected call of DeviceGetVgpuInstancesUtilizationInfo.
func (mr *MockInterfaceMockRecorder) DeviceGetVgpuInstancesUtilizationInfo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetVgpuInstancesUtilizationInfo", reflect.TypeOf((*MockInterface)(nil).DeviceGetVgpuInstancesUtilizationInfo), arg0)
}

// DeviceGetVgpuMetadata mocks base method.
func (m *MockInterface) DeviceGetVgpuMetadata(arg0 nvml.Device) (nvml.VgpuPgpuMetadata, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetVgpuMetadata", arg0)
	ret0, _ := ret[0].(nvml.VgpuPgpuMetadata)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetVgpuMetadata indicates an expected call of DeviceGetVgpuMetadata.
func (mr *MockInterfaceMockRecorder) DeviceGetVgpuMetadata(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetVgpuMetadata", reflect.TypeOf((*MockInterface)(nil).DeviceGetVgpuMetadata), arg0)
}

// DeviceGetVgpuProcessUtilization mocks base method.
func (m *MockInterface) DeviceGetVgpuProcessUtilization(arg0 nvml.Device, arg1 uint64) ([]nvml.VgpuProcessUtilizationSample, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetVgpuProcessUtilization", arg0, arg1)
	ret0, _ := ret[0].([]nvml.VgpuProcessUtilizationSample)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetVgpuProcessUtilization indicates an expected call of DeviceGetVgpuProcessUtilization.
func (mr *MockInterfaceMockRecorder) DeviceGetVgpuProcessUtilization(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetVgpuProcessUtilization", reflect.TypeOf((*MockInterface)(nil).DeviceGetVgpuProcessUtilization), arg0, arg1)
}

// DeviceGetVgpuProcessesUtilizationInfo mocks base method.
func (m *MockInterface) DeviceGetVgpuProcessesUtilizationInfo(arg0 nvml.Device) (nvml.VgpuProcessesUtilizationInfo, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetVgpuProcessesUtilizationInfo", arg0)
	ret0, _ := ret[0].(nvml.VgpuProcessesUtilizationInfo)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetVgpuProcessesUtilizationInfo indicates an expected call of DeviceGetVgpuProcessesUtilizationInfo.
func (mr *MockInterfaceMockRecorder) DeviceGetVgpuProcessesUtilizationInfo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetVgpuProcessesUtilizationInfo", reflect.TypeOf((*MockInterface)(nil).DeviceGetVgpuProcessesUtilizationInfo), arg0)
}

// DeviceGetVgpuSchedulerCapabilities mocks base method.
func (m *MockInterface) DeviceGetVgpuSchedulerCapabilities(arg0 nvml.Device) (nvml.VgpuSchedulerCapabilities, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetVgpuSchedulerCapabilities", arg0)
	ret0, _ := ret[0].(nvml.VgpuSchedulerCapabilities)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetVgpuSchedulerCapabilities indicates an expected call of DeviceGetVgpuSchedulerCapabilities.
func (mr *MockInterfaceMockRecorder) DeviceGetVgpuSchedulerCapabilities(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetVgpuSchedulerCapabilities", reflect.TypeOf((*MockInterface)(nil).DeviceGetVgpuSchedulerCapabilities), arg0)
}

// DeviceGetVgpuSchedulerLog mocks base method.
func (m *MockInterface) DeviceGetVgpuSchedulerLog(arg0 nvml.Device) (nvml.VgpuSchedulerLog, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetVgpuSchedulerLog", arg0)
	ret0, _ := ret[0].(nvml.VgpuSchedulerLog)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetVgpuSchedulerLog indicates an expected call of DeviceGetVgpuSchedulerLog.
func (mr *MockInterfaceMockRecorder) DeviceGetVgpuSchedulerLog(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetVgpuSchedulerLog", reflect.TypeOf((*MockInterface)(nil).DeviceGetVgpuSchedulerLog), arg0)
}

// DeviceGetVgpuSchedulerState mocks base method.
func (m *MockInterface) DeviceGetVgpuSchedulerState(arg0 nvml.Device) (nvml.VgpuSchedulerGetState, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetVgpuSchedulerState", arg0)
	ret0, _ := ret[0].(nvml.VgpuSchedulerGetState)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetVgpuSchedulerState indicates an expected call of DeviceGetVgpuSchedulerState.
func (mr *MockInterfaceMockRecorder) DeviceGetVgpuSchedulerState(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetVgpuSchedulerState", reflect.TypeOf((*MockInterface)(nil).DeviceGetVgpuSchedulerState), arg0)
}

// DeviceGetVgpuTypeCreatablePlacements mocks base method.
func (m *MockInterface) DeviceGetVgpuTypeCreatablePlacements(arg0 nvml.Device, arg1 nvml.VgpuTypeId) (nvml.VgpuPlacementList, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetVgpuTypeCreatablePlacements", arg0, arg1)
	ret0, _ := ret[0].(nvml.VgpuPlacementList)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetVgpuTypeCreatablePlacements indicates an expected call of DeviceGetVgpuTypeCreatablePlacements.
func (mr *MockInterfaceMockRecorder) DeviceGetVgpuTypeCreatablePlacements(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetVgpuTypeCreatablePlacements", reflect.TypeOf((*MockInterface)(nil).DeviceGetVgpuTypeCreatablePlacements), arg0, arg1)
}

// DeviceGetVgpuTypeSupportedPlacements mocks base method.
func (m *MockInterface) DeviceGetVgpuTypeSupportedPlacements(arg0 nvml.Device, arg1 nvml.VgpuTypeId) (nvml.VgpuPlacementList, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetVgpuTypeSupportedPlacements", arg0, arg1)
	ret0, _ := ret[0].(nvml.VgpuPlacementList)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetVgpuTypeSupportedPlacements indicates an expected call of DeviceGetVgpuTypeSupportedPlacements.
func (mr *MockInterfaceMockRecorder) DeviceGetVgpuTypeSupportedPlacements(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetVgpuTypeSupportedPlacements", reflect.TypeOf((*MockInterface)(nil).DeviceGetVgpuTypeSupportedPlacements), arg0, arg1)
}

// DeviceGetVgpuUtilization mocks base method.
func (m *MockInterface) DeviceGetVgpuUtilization(arg0 nvml.Device, arg1 uint64) (nvml.ValueType, []nvml.VgpuInstanceUtilizationSample, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetVgpuUtilization", arg0, arg1)
	ret0, _ := ret[0].(nvml.ValueType)
	ret1, _ := ret[1].([]nvml.VgpuInstanceUtilizationSample)
	ret2, _ := ret[2].(nvml.Return)
	return ret0, ret1, ret2
}

// DeviceGetVgpuUtilization indicates an expected call of DeviceGetVgpuUtilization.
func (mr *MockInterfaceMockRecorder) DeviceGetVgpuUtilization(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetVgpuUtilization", reflect.TypeOf((*MockInterface)(nil).DeviceGetVgpuUtilization), arg0, arg1)
}

// DeviceGetViolationStatus mocks base method.
func (m *MockInterface) DeviceGetViolationStatus(arg0 nvml.Device, arg1 nvml.PerfPolicyType) (nvml.ViolationTime, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetViolationStatus", arg0, arg1)
	ret0, _ := ret[0].(nvml.ViolationTime)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetViolationStatus indicates an expected call of DeviceGetViolationStatus.
func (mr *MockInterfaceMockRecorder) DeviceGetViolationStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetViolationStatus", reflect.TypeOf((*MockInterface)(nil).DeviceGetViolationStatus), arg0, arg1)
}

// DeviceGetVirtualizationMode mocks base method.
func (m *MockInterface) DeviceGetVirtualizationMode(arg0 nvml.Device) (nvml.GpuVirtualizationMode, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGetVirtualizationMode", arg0)
	ret0, _ := ret[0].(nvml.GpuVirtualizationMode)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceGetVirtualizationMode indicates an expected call of DeviceGetVirtualizationMode.
func (mr *MockInterfaceMockRecorder) DeviceGetVirtualizationMode(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGetVirtualizationMode", reflect.TypeOf((*MockInterface)(nil).DeviceGetVirtualizationMode), arg0)
}

// DeviceIsMigDeviceHandle mocks base method.
func (m *MockInterface) DeviceIsMigDeviceHandle(arg0 nvml.Device) (bool, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceIsMigDeviceHandle", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceIsMigDeviceHandle indicates an expected call of DeviceIsMigDeviceHandle.
func (mr *MockInterfaceMockRecorder) DeviceIsMigDeviceHandle(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceIsMigDeviceHandle", reflect.TypeOf((*MockInterface)(nil).DeviceIsMigDeviceHandle), arg0)
}

// DeviceModifyDrainState mocks base method.
func (m *MockInterface) DeviceModifyDrainState(arg0 *nvml.PciInfo, arg1 nvml.EnableState) nvml.Return {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceModifyDrainState", arg0, arg1)
	ret0, _ := ret[0].(nvml.Return)
	return ret0
}

// DeviceModifyDrainState indicates an expected call of DeviceModifyDrainState.
func (mr *MockInterfaceMockRecorder) DeviceModifyDrainState(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceModifyDrainState", reflect.TypeOf((*MockInterface)(nil).DeviceModifyDrainState), arg0, arg1)
}

// DeviceOnSameBoard mocks base method.
func (m *MockInterface) DeviceOnSameBoard(arg0, arg1 nvml.Device) (int, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceOnSameBoard", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceOnSameBoard indicates an expected call of DeviceOnSameBoard.
func (mr *MockInterfaceMockRecorder) DeviceOnSameBoard(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceOnSameBoard", reflect.TypeOf((*MockInterface)(nil).DeviceOnSameBoard), arg0, arg1)
}

// DeviceQueryDrainState mocks base method.
func (m *MockInterface) DeviceQueryDrainState(arg0 *nvml.PciInfo) (nvml.EnableState, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceQueryDrainState", arg0)
	ret0, _ := ret[0].(nvml.EnableState)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceQueryDrainState indicates an expected call of DeviceQueryDrainState.
func (mr *MockInterfaceMockRecorder) DeviceQueryDrainState(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceQueryDrainState", reflect.TypeOf((*MockInterface)(nil).DeviceQueryDrainState), arg0)
}

// DeviceRegisterEvents mocks base method.
func (m *MockInterface) DeviceRegisterEvents(arg0 nvml.Device, arg1 uint64, arg2 nvml.EventSet) nvml.Return {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceRegisterEvents", arg0, arg1, arg2)
	ret0, _ := ret[0].(nvml.Return)
	return ret0
}

// DeviceRegisterEvents indicates an expected call of DeviceRegisterEvents.
func (mr *MockInterfaceMockRecorder) DeviceRegisterEvents(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceRegisterEvents", reflect.TypeOf((*MockInterface)(nil).DeviceRegisterEvents), arg0, arg1, arg2)
}

// DeviceRemoveGpu mocks base method.
func (m *MockInterface) DeviceRemoveGpu(arg0 *nvml.PciInfo) nvml.Return {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceRemoveGpu", arg0)
	ret0, _ := ret[0].(nvml.Return)
	return ret0
}

// DeviceRemoveGpu indicates an expected call of DeviceRemoveGpu.
func (mr *MockInterfaceMockRecorder) DeviceRemoveGpu(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceRemoveGpu", reflect.TypeOf((*MockInterface)(nil).DeviceRemoveGpu), arg0)
}

// DeviceRemoveGpu_v2 mocks base method.
func (m *MockInterface) DeviceRemoveGpu_v2(arg0 *nvml.PciInfo, arg1 nvml.DetachGpuState, arg2 nvml.PcieLinkState) nvml.Return {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceRemoveGpu_v2", arg0, arg1, arg2)
	ret0, _ := ret[0].(nvml.Return)
	return ret0
}

// DeviceRemoveGpu_v2 indicates an expected call of DeviceRemoveGpu_v2.
func (mr *MockInterfaceMockRecorder) DeviceRemoveGpu_v2(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceRemoveGpu_v2", reflect.TypeOf((*MockInterface)(nil).DeviceRemoveGpu_v2), arg0, arg1, arg2)
}

// DeviceResetApplicationsClocks mocks base method.
func (m *MockInterface) DeviceResetApplicationsClocks(arg0 nvml.Device) nvml.Return {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceResetApplicationsClocks", arg0)
	ret0, _ := ret[0].(nvml.Return)
	return ret0
}

// DeviceResetApplicationsClocks indicates an expected call of DeviceResetApplicationsClocks.
func (mr *MockInterfaceMockRecorder) DeviceResetApplicationsClocks(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceResetApplicationsClocks", reflect.TypeOf((*MockInterface)(nil).DeviceResetApplicationsClocks), arg0)
}

// DeviceResetGpuLockedClocks mocks base method.
func (m *MockInterface) DeviceResetGpuLockedClocks(arg0 nvml.Device) nvml.Return {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceResetGpuLockedClocks", arg0)
	ret0, _ := ret[0].(nvml.Return)
	return ret0
}

// DeviceResetGpuLockedClocks indicates an expected call of DeviceResetGpuLockedClocks.
func (mr *MockInterfaceMockRecorder) DeviceResetGpuLockedClocks(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceResetGpuLockedClocks", reflect.TypeOf((*MockInterface)(nil).DeviceResetGpuLockedClocks), arg0)
}

// DeviceResetMemoryLockedClocks mocks base method.
func (m *MockInterface) DeviceResetMemoryLockedClocks(arg0 nvml.Device) nvml.Return {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceResetMemoryLockedClocks", arg0)
	ret0, _ := ret[0].(nvml.Return)
	return ret0
}

// DeviceResetMemoryLockedClocks indicates an expected call of DeviceResetMemoryLockedClocks.
func (mr *MockInterfaceMockRecorder) DeviceResetMemoryLockedClocks(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceResetMemoryLockedClocks", reflect.TypeOf((*MockInterface)(nil).DeviceResetMemoryLockedClocks), arg0)
}

// DeviceResetNvLinkErrorCounters mocks base method.
func (m *MockInterface) DeviceResetNvLinkErrorCounters(arg0 nvml.Device, arg1 int) nvml.Return {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceResetNvLinkErrorCounters", arg0, arg1)
	ret0, _ := ret[0].(nvml.Return)
	return ret0
}

// DeviceResetNvLinkErrorCounters indicates an expected call of DeviceResetNvLinkErrorCounters.
func (mr *MockInterfaceMockRecorder) DeviceResetNvLinkErrorCounters(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceResetNvLinkErrorCounters", reflect.TypeOf((*MockInterface)(nil).DeviceResetNvLinkErrorCounters), arg0, arg1)
}

// DeviceResetNvLinkUtilizationCounter mocks base method.
func (m *MockInterface) DeviceResetNvLinkUtilizationCounter(arg0 nvml.Device, arg1, arg2 int) nvml.Return {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceResetNvLinkUtilizationCounter", arg0, arg1, arg2)
	ret0, _ := ret[0].(nvml.Return)
	return ret0
}

// DeviceResetNvLinkUtilizationCounter indicates an expected call of DeviceResetNvLinkUtilizationCounter.
func (mr *MockInterfaceMockRecorder) DeviceResetNvLinkUtilizationCounter(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceResetNvLinkUtilizationCounter", reflect.TypeOf((*MockInterface)(nil).DeviceResetNvLinkUtilizationCounter), arg0, arg1, arg2)
}

// DeviceSetAPIRestriction mocks base method.
func (m *MockInterface) DeviceSetAPIRestriction(arg0 nvml.Device, arg1 nvml.RestrictedAPI, arg2 nvml.EnableState) nvml.Return {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceSetAPIRestriction", arg0, arg1, arg2)
	ret0, _ := ret[0].(nvml.Return)
	return ret0
}

// DeviceSetAPIRestriction indicates an expected call of DeviceSetAPIRestriction.
func (mr *MockInterfaceMockRecorder) DeviceSetAPIRestriction(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceSetAPIRestriction", reflect.TypeOf((*MockInterface)(nil).DeviceSetAPIRestriction), arg0, arg1, arg2)
}

// DeviceSetAccountingMode mocks base method.
func (m *MockInterface) DeviceSetAccountingMode(arg0 nvml.Device, arg1 nvml.EnableState) nvml.Return {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceSetAccountingMode", arg0, arg1)
	ret0, _ := ret[0].(nvml.Return)
	return ret0
}

// DeviceSetAccountingMode indicates an expected call of DeviceSetAccountingMode.
func (mr *MockInterfaceMockRecorder) DeviceSetAccountingMode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceSetAccountingMode", reflect.TypeOf((*MockInterface)(nil).DeviceSetAccountingMode), arg0, arg1)
}

// DeviceSetApplicationsClocks mocks base method.
func (m *MockInterface) DeviceSetApplicationsClocks(arg0 nvml.Device, arg1, arg2 uint32) nvml.Return {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceSetApplicationsClocks", arg0, arg1, arg2)
	ret0, _ := ret[0].(nvml.Return)
	return ret0
}

// DeviceSetApplicationsClocks indicates an expected call of DeviceSetApplicationsClocks.
func (mr *MockInterfaceMockRecorder) DeviceSetApplicationsClocks(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceSetApplicationsClocks", reflect.TypeOf((*MockInterface)(nil).DeviceSetApplicationsClocks), arg0, arg1, arg2)
}

// DeviceSetAutoBoostedClocksEnabled mocks base method.
func (m *MockInterface) DeviceSetAutoBoostedClocksEnabled(arg0 nvml.Device, arg1 nvml.EnableState) nvml.Return {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceSetAutoBoostedClocksEnabled", arg0, arg1)
	ret0, _ := ret[0].(nvml.Return)
	return ret0
}

// DeviceSetAutoBoostedClocksEnabled indicates an expected call of DeviceSetAutoBoostedClocksEnabled.
func (mr *MockInterfaceMockRecorder) DeviceSetAutoBoostedClocksEnabled(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceSetAutoBoostedClocksEnabled", reflect.TypeOf((*MockInterface)(nil).DeviceSetAutoBoostedClocksEnabled), arg0, arg1)
}

// DeviceSetComputeMode mocks base method.
func (m *MockInterface) DeviceSetComputeMode(arg0 nvml.Device, arg1 nvml.ComputeMode) nvml.Return {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceSetComputeMode", arg0, arg1)
	ret0, _ := ret[0].(nvml.Return)
	return ret0
}

// DeviceSetComputeMode indicates an expected call of DeviceSetComputeMode.
func (mr *MockInterfaceMockRecorder) DeviceSetComputeMode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceSetComputeMode", reflect.TypeOf((*MockInterface)(nil).DeviceSetComputeMode), arg0, arg1)
}

// DeviceSetConfComputeUnprotectedMemSize mocks base method.
func (m *MockInterface) DeviceSetConfComputeUnprotectedMemSize(arg0 nvml.Device, arg1 uint64) nvml.Return {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceSetConfComputeUnprotectedMemSize", arg0, arg1)
	ret0, _ := ret[0].(nvml.Return)
	return ret0
}

// DeviceSetConfComputeUnprotectedMemSize indicates an expected call of DeviceSetConfComputeUnprotectedMemSize.
func (mr *MockInterfaceMockRecorder) DeviceSetConfComputeUnprotectedMemSize(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceSetConfComputeUnprotectedMemSize", reflect.TypeOf((*MockInterface)(nil).DeviceSetConfComputeUnprotectedMemSize), arg0, arg1)
}

// DeviceSetCpuAffinity mocks base method.
func (m *MockInterface) DeviceSetCpuAffinity(arg0 nvml.Device) nvml.Return {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceSetCpuAffinity", arg0)
	ret0, _ := ret[0].(nvml.Return)
	return ret0
}

// DeviceSetCpuAffinity indicates an expected call of DeviceSetCpuAffinity.
func (mr *MockInterfaceMockRecorder) DeviceSetCpuAffinity(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceSetCpuAffinity", reflect.TypeOf((*MockInterface)(nil).DeviceSetCpuAffinity), arg0)
}

// DeviceSetDefaultAutoBoostedClocksEnabled mocks base method.
func (m *MockInterface) DeviceSetDefaultAutoBoostedClocksEnabled(arg0 nvml.Device, arg1 nvml.EnableState, arg2 uint32) nvml.Return {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceSetDefaultAutoBoostedClocksEnabled", arg0, arg1, arg2)
	ret0, _ := ret[0].(nvml.Return)
	return ret0
}

// DeviceSetDefaultAutoBoostedClocksEnabled indicates an expected call of DeviceSetDefaultAutoBoostedClocksEnabled.
func (mr *MockInterfaceMockRecorder) DeviceSetDefaultAutoBoostedClocksEnabled(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceSetDefaultAutoBoostedClocksEnabled", reflect.TypeOf((*MockInterface)(nil).DeviceSetDefaultAutoBoostedClocksEnabled), arg0, arg1, arg2)
}

// DeviceSetDefaultFanSpeed_v2 mocks base method.
func (m *MockInterface) DeviceSetDefaultFanSpeed_v2(arg0 nvml.Device, arg1 int) nvml.Return {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceSetDefaultFanSpeed_v2", arg0, arg1)
	ret0, _ := ret[0].(nvml.Return)
	return ret0
}

// DeviceSetDefaultFanSpeed_v2 indicates an expected call of DeviceSetDefaultFanSpeed_v2.
func (mr *MockInterfaceMockRecorder) DeviceSetDefaultFanSpeed_v2(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceSetDefaultFanSpeed_v2", reflect.TypeOf((*MockInterface)(nil).DeviceSetDefaultFanSpeed_v2), arg0, arg1)
}

// DeviceSetDriverModel mocks base method.
func (m *MockInterface) DeviceSetDriverModel(arg0 nvml.Device, arg1 nvml.DriverModel, arg2 uint32) nvml.Return {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceSetDriverModel", arg0, arg1, arg2)
	ret0, _ := ret[0].(nvml.Return)
	return ret0
}

// DeviceSetDriverModel indicates an expected call of DeviceSetDriverModel.
func (mr *MockInterfaceMockRecorder) DeviceSetDriverModel(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceSetDriverModel", reflect.TypeOf((*MockInterface)(nil).DeviceSetDriverModel), arg0, arg1, arg2)
}

// DeviceSetEccMode mocks base method.
func (m *MockInterface) DeviceSetEccMode(arg0 nvml.Device, arg1 nvml.EnableState) nvml.Return {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceSetEccMode", arg0, arg1)
	ret0, _ := ret[0].(nvml.Return)
	return ret0
}

// DeviceSetEccMode indicates an expected call of DeviceSetEccMode.
func (mr *MockInterfaceMockRecorder) DeviceSetEccMode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceSetEccMode", reflect.TypeOf((*MockInterface)(nil).DeviceSetEccMode), arg0, arg1)
}

// DeviceSetFanControlPolicy mocks base method.
func (m *MockInterface) DeviceSetFanControlPolicy(arg0 nvml.Device, arg1 int, arg2 nvml.FanControlPolicy) nvml.Return {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceSetFanControlPolicy", arg0, arg1, arg2)
	ret0, _ := ret[0].(nvml.Return)
	return ret0
}

// DeviceSetFanControlPolicy indicates an expected call of DeviceSetFanControlPolicy.
func (mr *MockInterfaceMockRecorder) DeviceSetFanControlPolicy(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceSetFanControlPolicy", reflect.TypeOf((*MockInterface)(nil).DeviceSetFanControlPolicy), arg0, arg1, arg2)
}

// DeviceSetFanSpeed_v2 mocks base method.
func (m *MockInterface) DeviceSetFanSpeed_v2(arg0 nvml.Device, arg1, arg2 int) nvml.Return {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceSetFanSpeed_v2", arg0, arg1, arg2)
	ret0, _ := ret[0].(nvml.Return)
	return ret0
}

// DeviceSetFanSpeed_v2 indicates an expected call of DeviceSetFanSpeed_v2.
func (mr *MockInterfaceMockRecorder) DeviceSetFanSpeed_v2(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceSetFanSpeed_v2", reflect.TypeOf((*MockInterface)(nil).DeviceSetFanSpeed_v2), arg0, arg1, arg2)
}

// DeviceSetGpcClkVfOffset mocks base method.
func (m *MockInterface) DeviceSetGpcClkVfOffset(arg0 nvml.Device, arg1 int) nvml.Return {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceSetGpcClkVfOffset", arg0, arg1)
	ret0, _ := ret[0].(nvml.Return)
	return ret0
}

// DeviceSetGpcClkVfOffset indicates an expected call of DeviceSetGpcClkVfOffset.
func (mr *MockInterfaceMockRecorder) DeviceSetGpcClkVfOffset(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceSetGpcClkVfOffset", reflect.TypeOf((*MockInterface)(nil).DeviceSetGpcClkVfOffset), arg0, arg1)
}

// DeviceSetGpuLockedClocks mocks base method.
func (m *MockInterface) DeviceSetGpuLockedClocks(arg0 nvml.Device, arg1, arg2 uint32) nvml.Return {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceSetGpuLockedClocks", arg0, arg1, arg2)
	ret0, _ := ret[0].(nvml.Return)
	return ret0
}

// DeviceSetGpuLockedClocks indicates an expected call of DeviceSetGpuLockedClocks.
func (mr *MockInterfaceMockRecorder) DeviceSetGpuLockedClocks(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceSetGpuLockedClocks", reflect.TypeOf((*MockInterface)(nil).DeviceSetGpuLockedClocks), arg0, arg1, arg2)
}

// DeviceSetGpuOperationMode mocks base method.
func (m *MockInterface) DeviceSetGpuOperationMode(arg0 nvml.Device, arg1 nvml.GpuOperationMode) nvml.Return {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceSetGpuOperationMode", arg0, arg1)
	ret0, _ := ret[0].(nvml.Return)
	return ret0
}

// DeviceSetGpuOperationMode indicates an expected call of DeviceSetGpuOperationMode.
func (mr *MockInterfaceMockRecorder) DeviceSetGpuOperationMode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceSetGpuOperationMode", reflect.TypeOf((*MockInterface)(nil).DeviceSetGpuOperationMode), arg0, arg1)
}

// DeviceSetMemClkVfOffset mocks base method.
func (m *MockInterface) DeviceSetMemClkVfOffset(arg0 nvml.Device, arg1 int) nvml.Return {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceSetMemClkVfOffset", arg0, arg1)
	ret0, _ := ret[0].(nvml.Return)
	return ret0
}

// DeviceSetMemClkVfOffset indicates an expected call of DeviceSetMemClkVfOffset.
func (mr *MockInterfaceMockRecorder) DeviceSetMemClkVfOffset(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceSetMemClkVfOffset", reflect.TypeOf((*MockInterface)(nil).DeviceSetMemClkVfOffset), arg0, arg1)
}

// DeviceSetMemoryLockedClocks mocks base method.
func (m *MockInterface) DeviceSetMemoryLockedClocks(arg0 nvml.Device, arg1, arg2 uint32) nvml.Return {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceSetMemoryLockedClocks", arg0, arg1, arg2)
	ret0, _ := ret[0].(nvml.Return)
	return ret0
}

// DeviceSetMemoryLockedClocks indicates an expected call of DeviceSetMemoryLockedClocks.
func (mr *MockInterfaceMockRecorder) DeviceSetMemoryLockedClocks(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceSetMemoryLockedClocks", reflect.TypeOf((*MockInterface)(nil).DeviceSetMemoryLockedClocks), arg0, arg1, arg2)
}

// DeviceSetMigMode mocks base method.
func (m *MockInterface) DeviceSetMigMode(arg0 nvml.Device, arg1 int) (nvml.Return, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceSetMigMode", arg0, arg1)
	ret0, _ := ret[0].(nvml.Return)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// DeviceSetMigMode indicates an expected call of DeviceSetMigMode.
func (mr *MockInterfaceMockRecorder) DeviceSetMigMode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceSetMigMode", reflect.TypeOf((*MockInterface)(nil).DeviceSetMigMode), arg0, arg1)
}

// DeviceSetNvLinkDeviceLowPowerThreshold mocks base method.
func (m *MockInterface) DeviceSetNvLinkDeviceLowPowerThreshold(arg0 nvml.Device, arg1 *nvml.NvLinkPowerThres) nvml.Return {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceSetNvLinkDeviceLowPowerThreshold", arg0, arg1)
	ret0, _ := ret[0].(nvml.Return)
	return ret0
}

// DeviceSetNvLinkDeviceLowPowerThreshold indicates an expected call of DeviceSetNvLinkDeviceLowPowerThreshold.
func (mr *MockInterfaceMockRecorder) DeviceSetNvLinkDeviceLowPowerThreshold(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceSetNvLinkDeviceLowPowerThreshold", reflect.TypeOf((*MockInterface)(nil).DeviceSetNvLinkDeviceLowPowerThreshold), arg0, arg1)
}

// DeviceSetNvLinkUtilizationControl mocks base method.
func (m *MockInterface) DeviceSetNvLinkUtilizationControl(arg0 nvml.Device, arg1, arg2 int, arg3 *nvml.NvLinkUtilizationControl, arg4 bool) nvml.Return {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceSetNvLinkUtilizationControl", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(nvml.Return)
	return ret0
}

// DeviceSetNvLinkUtilizationControl indicates an expected call of DeviceSetNvLinkUtilizationControl.
func (mr *MockInterfaceMockRecorder) DeviceSetNvLinkUtilizationControl(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceSetNvLinkUtilizationControl", reflect.TypeOf((*MockInterface)(nil).DeviceSetNvLinkUtilizationControl), arg0, arg1, arg2, arg3, arg4)
}

// DeviceSetPersistenceMode mocks base method.
func (m *MockInterface) DeviceSetPersistenceMode(arg0 nvml.Device, arg1 nvml.EnableState) nvml.Return {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceSetPersistenceMode", arg0, arg1)
	ret0, _ := ret[0].(nvml.Return)
	return ret0
}

// DeviceSetPersistenceMode indicates an expected call of DeviceSetPersistenceMode.
func (mr *MockInterfaceMockRecorder) DeviceSetPersistenceMode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceSetPersistenceMode", reflect.TypeOf((*MockInterface)(nil).DeviceSetPersistenceMode), arg0, arg1)
}

// DeviceSetPowerManagementLimit mocks base method.
func (m *MockInterface) DeviceSetPowerManagementLimit(arg0 nvml.Device, arg1 uint32) nvml.Return {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceSetPowerManagementLimit", arg0, arg1)
	ret0, _ := ret[0].(nvml.Return)
	return ret0
}

// DeviceSetPowerManagementLimit indicates an expected call of DeviceSetPowerManagementLimit.
func (mr *MockInterfaceMockRecorder) DeviceSetPowerManagementLimit(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceSetPowerManagementLimit", reflect.TypeOf((*MockInterface)(nil).DeviceSetPowerManagementLimit), arg0, arg1)
}

// DeviceSetPowerManagementLimit_v2 mocks base method.
func (m *MockInterface) DeviceSetPowerManagementLimit_v2(arg0 nvml.Device, arg1 *nvml.PowerValue_v2) nvml.Return {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceSetPowerManagementLimit_v2", arg0, arg1)
	ret0, _ := ret[0].(nvml.Return)
	return ret0
}

// DeviceSetPowerManagementLimit_v2 indicates an expected call of DeviceSetPowerManagementLimit_v2.
func (mr *MockInterfaceMockRecorder) DeviceSetPowerManagementLimit_v2(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceSetPowerManagementLimit_v2", reflect.TypeOf((*MockInterface)(nil).DeviceSetPowerManagementLimit_v2), arg0, arg1)
}

// DeviceSetTemperatureThreshold mocks base method.
func (m *MockInterface) DeviceSetTemperatureThreshold(arg0 nvml.Device, arg1 nvml.TemperatureThresholds, arg2 int) nvml.Return {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceSetTemperatureThreshold", arg0, arg1, arg2)
	ret0, _ := ret[0].(nvml.Return)
	return ret0
}

// DeviceSetTemperatureThreshold indicates an expected call of DeviceSetTemperatureThreshold.
func (mr *MockInterfaceMockRecorder) DeviceSetTemperatureThreshold(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceSetTemperatureThreshold", reflect.TypeOf((*MockInterface)(nil).DeviceSetTemperatureThreshold), arg0, arg1, arg2)
}

// DeviceSetVgpuCapabilities mocks base method.
func (m *MockInterface) DeviceSetVgpuCapabilities(arg0 nvml.Device, arg1 nvml.DeviceVgpuCapability, arg2 nvml.EnableState) nvml.Return {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceSetVgpuCapabilities", arg0, arg1, arg2)
	ret0, _ := ret[0].(nvml.Return)
	return ret0
}

// DeviceSetVgpuCapabilities indicates an expected call of DeviceSetVgpuCapabilities.
func (mr *MockInterfaceMockRecorder) DeviceSetVgpuCapabilities(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceSetVgpuCapabilities", reflect.TypeOf((*MockInterface)(nil).DeviceSetVgpuCapabilities), arg0, arg1, arg2)
}

// DeviceSetVgpuHeterogeneousMode mocks base method.
func (m *MockInterface) DeviceSetVgpuHeterogeneousMode(arg0 nvml.Device, arg1 nvml.VgpuHeterogeneousMode) nvml.Return {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceSetVgpuHeterogeneousMode", arg0, arg1)
	ret0, _ := ret[0].(nvml.Return)
	return ret0
}

// DeviceSetVgpuHeterogeneousMode indicates an expected call of DeviceSetVgpuHeterogeneousMode.
func (mr *MockInterfaceMockRecorder) DeviceSetVgpuHeterogeneousMode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceSetVgpuHeterogeneousMode", reflect.TypeOf((*MockInterface)(nil).DeviceSetVgpuHeterogeneousMode), arg0, arg1)
}

// DeviceSetVgpuSchedulerState mocks base method.
func (m *MockInterface) DeviceSetVgpuSchedulerState(arg0 nvml.Device, arg1 *nvml.VgpuSchedulerSetState) nvml.Return {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceSetVgpuSchedulerState", arg0, arg1)
	ret0, _ := ret[0].(nvml.Return)
	return ret0
}

// DeviceSetVgpuSchedulerState indicates an expected call of DeviceSetVgpuSchedulerState.
func (mr *MockInterfaceMockRecorder) DeviceSetVgpuSchedulerState(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceSetVgpuSchedulerState", reflect.TypeOf((*MockInterface)(nil).DeviceSetVgpuSchedulerState), arg0, arg1)
}

// DeviceSetVirtualizationMode mocks base method.
func (m *MockInterface) DeviceSetVirtualizationMode(arg0 nvml.Device, arg1 nvml.GpuVirtualizationMode) nvml.Return {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceSetVirtualizationMode", arg0, arg1)
	ret0, _ := ret[0].(nvml.Return)
	return ret0
}

// DeviceSetVirtualizationMode indicates an expected call of DeviceSetVirtualizationMode.
func (mr *MockInterfaceMockRecorder) DeviceSetVirtualizationMode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceSetVirtualizationMode", reflect.TypeOf((*MockInterface)(nil).DeviceSetVirtualizationMode), arg0, arg1)
}

// DeviceValidateInforom mocks base method.
func (m *MockInterface) DeviceValidateInforom(arg0 nvml.Device) nvml.Return {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceValidateInforom", arg0)
	ret0, _ := ret[0].(nvml.Return)
	return ret0
}

// DeviceValidateInforom indicates an expected call of DeviceValidateInforom.
func (mr *MockInterfaceMockRecorder) DeviceValidateInforom(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceValidateInforom", reflect.TypeOf((*MockInterface)(nil).DeviceValidateInforom), arg0)
}

// ErrorString mocks base method.
func (m *MockInterface) ErrorString(arg0 nvml.Return) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ErrorString", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// ErrorString indicates an expected call of ErrorString.
func (mr *MockInterfaceMockRecorder) ErrorString(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ErrorString", reflect.TypeOf((*MockInterface)(nil).ErrorString), arg0)
}

// EventSetCreate mocks base method.
func (m *MockInterface) EventSetCreate() (nvml.EventSet, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventSetCreate")
	ret0, _ := ret[0].(nvml.EventSet)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// EventSetCreate indicates an expected call of EventSetCreate.
func (mr *MockInterfaceMockRecorder) EventSetCreate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventSetCreate", reflect.TypeOf((*MockInterface)(nil).EventSetCreate))
}

// EventSetFree mocks base method.
func (m *MockInterface) EventSetFree(arg0 nvml.EventSet) nvml.Return {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventSetFree", arg0)
	ret0, _ := ret[0].(nvml.Return)
	return ret0
}

// EventSetFree indicates an expected call of EventSetFree.
func (mr *MockInterfaceMockRecorder) EventSetFree(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventSetFree", reflect.TypeOf((*MockInterface)(nil).EventSetFree), arg0)
}

// EventSetWait mocks base method.
func (m *MockInterface) EventSetWait(arg0 nvml.EventSet, arg1 uint32) (nvml.EventData, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventSetWait", arg0, arg1)
	ret0, _ := ret[0].(nvml.EventData)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// EventSetWait indicates an expected call of EventSetWait.
func (mr *MockInterfaceMockRecorder) EventSetWait(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventSetWait", reflect.TypeOf((*MockInterface)(nil).EventSetWait), arg0, arg1)
}

// Extensions mocks base method.
func (m *MockInterface) Extensions() nvml.ExtendedInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Extensions")
	ret0, _ := ret[0].(nvml.ExtendedInterface)
	return ret0
}

// Extensions indicates an expected call of Extensions.
func (mr *MockInterfaceMockRecorder) Extensions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Extensions", reflect.TypeOf((*MockInterface)(nil).Extensions))
}

// GetExcludedDeviceCount mocks base method.
func (m *MockInterface) GetExcludedDeviceCount() (int, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExcludedDeviceCount")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetExcludedDeviceCount indicates an expected call of GetExcludedDeviceCount.
func (mr *MockInterfaceMockRecorder) GetExcludedDeviceCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExcludedDeviceCount", reflect.TypeOf((*MockInterface)(nil).GetExcludedDeviceCount))
}

// GetExcludedDeviceInfoByIndex mocks base method.
func (m *MockInterface) GetExcludedDeviceInfoByIndex(arg0 int) (nvml.ExcludedDeviceInfo, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExcludedDeviceInfoByIndex", arg0)
	ret0, _ := ret[0].(nvml.ExcludedDeviceInfo)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetExcludedDeviceInfoByIndex indicates an expected call of GetExcludedDeviceInfoByIndex.
func (mr *MockInterfaceMockRecorder) GetExcludedDeviceInfoByIndex(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExcludedDeviceInfoByIndex", reflect.TypeOf((*MockInterface)(nil).GetExcludedDeviceInfoByIndex), arg0)
}

// GetVgpuCompatibility mocks base method.
func (m *MockInterface) GetVgpuCompatibility(arg0 *nvml.VgpuMetadata, arg1 *nvml.VgpuPgpuMetadata) (nvml.VgpuPgpuCompatibility, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVgpuCompatibility", arg0, arg1)
	ret0, _ := ret[0].(nvml.VgpuPgpuCompatibility)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetVgpuCompatibility indicates an expected call of GetVgpuCompatibility.
func (mr *MockInterfaceMockRecorder) GetVgpuCompatibility(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVgpuCompatibility", reflect.TypeOf((*MockInterface)(nil).GetVgpuCompatibility), arg0, arg1)
}

// GetVgpuDriverCapabilities mocks base method.
func (m *MockInterface) GetVgpuDriverCapabilities(arg0 nvml.VgpuDriverCapability) (bool, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVgpuDriverCapabilities", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetVgpuDriverCapabilities indicates an expected call of GetVgpuDriverCapabilities.
func (mr *MockInterfaceMockRecorder) GetVgpuDriverCapabilities(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVgpuDriverCapabilities", reflect.TypeOf((*MockInterface)(nil).GetVgpuDriverCapabilities), arg0)
}

// GetVgpuVersion mocks base method.
func (m *MockInterface) GetVgpuVersion() (nvml.VgpuVersion, nvml.VgpuVersion, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVgpuVersion")
	ret0, _ := ret[0].(nvml.VgpuVersion)
	ret1, _ := ret[1].(nvml.VgpuVersion)
	ret2, _ := ret[2].(nvml.Return)
	return ret0, ret1, ret2
}

// GetVgpuVersion indicates an expected call of GetVgpuVersion.
func (mr *MockInterfaceMockRecorder) GetVgpuVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVgpuVersion", reflect.TypeOf((*MockInterface)(nil).GetVgpuVersion))
}

// GpmMetricsGet mocks base method.
func (m *MockInterface) GpmMetricsGet(arg0 *nvml.GpmMetricsGetType) nvml.Return {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GpmMetricsGet", arg0)
	ret0, _ := ret[0].(nvml.Return)
	return ret0
}

// GpmMetricsGet indicates an expected call of GpmMetricsGet.
func (mr *MockInterfaceMockRecorder) GpmMetricsGet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GpmMetricsGet", reflect.TypeOf((*MockInterface)(nil).GpmMetricsGet), arg0)
}

// GpmMetricsGetV mocks base method.
func (m *MockInterface) GpmMetricsGetV(arg0 *nvml.GpmMetricsGetType) nvml.GpmMetricsGetVType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GpmMetricsGetV", arg0)
	ret0, _ := ret[0].(nvml.GpmMetricsGetVType)
	return ret0
}

// GpmMetricsGetV indicates an expected call of GpmMetricsGetV.
func (mr *MockInterfaceMockRecorder) GpmMetricsGetV(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GpmMetricsGetV", reflect.TypeOf((*MockInterface)(nil).GpmMetricsGetV), arg0)
}

// GpmMigSampleGet mocks base method.
func (m *MockInterface) GpmMigSampleGet(arg0 nvml.Device, arg1 int, arg2 nvml.GpmSample) nvml.Return {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GpmMigSampleGet", arg0, arg1, arg2)
	ret0, _ := ret[0].(nvml.Return)
	return ret0
}

// GpmMigSampleGet indicates an expected call of GpmMigSampleGet.
func (mr *MockInterfaceMockRecorder) GpmMigSampleGet(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GpmMigSampleGet", reflect.TypeOf((*MockInterface)(nil).GpmMigSampleGet), arg0, arg1, arg2)
}

// GpmQueryDeviceSupport mocks base method.
func (m *MockInterface) GpmQueryDeviceSupport(arg0 nvml.Device) (nvml.GpmSupport, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GpmQueryDeviceSupport", arg0)
	ret0, _ := ret[0].(nvml.GpmSupport)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GpmQueryDeviceSupport indicates an expected call of GpmQueryDeviceSupport.
func (mr *MockInterfaceMockRecorder) GpmQueryDeviceSupport(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GpmQueryDeviceSupport", reflect.TypeOf((*MockInterface)(nil).GpmQueryDeviceSupport), arg0)
}

// GpmQueryDeviceSupportV mocks base method.
func (m *MockInterface) GpmQueryDeviceSupportV(arg0 nvml.Device) nvml.GpmSupportV {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GpmQueryDeviceSupportV", arg0)
	ret0, _ := ret[0].(nvml.GpmSupportV)
	return ret0
}

// GpmQueryDeviceSupportV indicates an expected call of GpmQueryDeviceSupportV.
func (mr *MockInterfaceMockRecorder) GpmQueryDeviceSupportV(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GpmQueryDeviceSupportV", reflect.TypeOf((*MockInterface)(nil).GpmQueryDeviceSupportV), arg0)
}

// GpmQueryIfStreamingEnabled mocks base method.
func (m *MockInterface) GpmQueryIfStreamingEnabled(arg0 nvml.Device) (uint32, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GpmQueryIfStreamingEnabled", arg0)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GpmQueryIfStreamingEnabled indicates an expected call of GpmQueryIfStreamingEnabled.
func (mr *MockInterfaceMockRecorder) GpmQueryIfStreamingEnabled(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GpmQueryIfStreamingEnabled", reflect.TypeOf((*MockInterface)(nil).GpmQueryIfStreamingEnabled), arg0)
}

// GpmSampleAlloc mocks base method.
func (m *MockInterface) GpmSampleAlloc() (nvml.GpmSample, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GpmSampleAlloc")
	ret0, _ := ret[0].(nvml.GpmSample)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GpmSampleAlloc indicates an expected call of GpmSampleAlloc.
func (mr *MockInterfaceMockRecorder) GpmSampleAlloc() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GpmSampleAlloc", reflect.TypeOf((*MockInterface)(nil).GpmSampleAlloc))
}

// GpmSampleFree mocks base method.
func (m *MockInterface) GpmSampleFree(arg0 nvml.GpmSample) nvml.Return {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GpmSampleFree", arg0)
	ret0, _ := ret[0].(nvml.Return)
	return ret0
}

// GpmSampleFree indicates an expected call of GpmSampleFree.
func (mr *MockInterfaceMockRecorder) GpmSampleFree(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GpmSampleFree", reflect.TypeOf((*MockInterface)(nil).GpmSampleFree), arg0)
}

// GpmSampleGet mocks base method.
func (m *MockInterface) GpmSampleGet(arg0 nvml.Device, arg1 nvml.GpmSample) nvml.Return {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GpmSampleGet", arg0, arg1)
	ret0, _ := ret[0].(nvml.Return)
	return ret0
}

// GpmSampleGet indicates an expected call of GpmSampleGet.
func (mr *MockInterfaceMockRecorder) GpmSampleGet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GpmSampleGet", reflect.TypeOf((*MockInterface)(nil).GpmSampleGet), arg0, arg1)
}

// GpmSetStreamingEnabled mocks base method.
func (m *MockInterface) GpmSetStreamingEnabled(arg0 nvml.Device, arg1 uint32) nvml.Return {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GpmSetStreamingEnabled", arg0, arg1)
	ret0, _ := ret[0].(nvml.Return)
	return ret0
}

// GpmSetStreamingEnabled indicates an expected call of GpmSetStreamingEnabled.
func (mr *MockInterfaceMockRecorder) GpmSetStreamingEnabled(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GpmSetStreamingEnabled", reflect.TypeOf((*MockInterface)(nil).GpmSetStreamingEnabled), arg0, arg1)
}

// GpuInstanceCreateComputeInstance mocks base method.
func (m *MockInterface) GpuInstanceCreateComputeInstance(arg0 nvml.GpuInstance, arg1 *nvml.ComputeInstanceProfileInfo) (nvml.ComputeInstance, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GpuInstanceCreateComputeInstance", arg0, arg1)
	ret0, _ := ret[0].(nvml.ComputeInstance)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GpuInstanceCreateComputeInstance indicates an expected call of GpuInstanceCreateComputeInstance.
func (mr *MockInterfaceMockRecorder) GpuInstanceCreateComputeInstance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GpuInstanceCreateComputeInstance", reflect.TypeOf((*MockInterface)(nil).GpuInstanceCreateComputeInstance), arg0, arg1)
}

// GpuInstanceCreateComputeInstanceWithPlacement mocks base method.
func (m *MockInterface) GpuInstanceCreateComputeInstanceWithPlacement(arg0 nvml.GpuInstance, arg1 *nvml.ComputeInstanceProfileInfo, arg2 *nvml.ComputeInstancePlacement) (nvml.ComputeInstance, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GpuInstanceCreateComputeInstanceWithPlacement", arg0, arg1, arg2)
	ret0, _ := ret[0].(nvml.ComputeInstance)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GpuInstanceCreateComputeInstanceWithPlacement indicates an expected call of GpuInstanceCreateComputeInstanceWithPlacement.
func (mr *MockInterfaceMockRecorder) GpuInstanceCreateComputeInstanceWithPlacement(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GpuInstanceCreateComputeInstanceWithPlacement", reflect.TypeOf((*MockInterface)(nil).GpuInstanceCreateComputeInstanceWithPlacement), arg0, arg1, arg2)
}

// GpuInstanceDestroy mocks base method.
func (m *MockInterface) GpuInstanceDestroy(arg0 nvml.GpuInstance) nvml.Return {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GpuInstanceDestroy", arg0)
	ret0, _ := ret[0].(nvml.Return)
	return ret0
}

// GpuInstanceDestroy indicates an expected call of GpuInstanceDestroy.
func (mr *MockInterfaceMockRecorder) GpuInstanceDestroy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GpuInstanceDestroy", reflect.TypeOf((*MockInterface)(nil).GpuInstanceDestroy), arg0)
}

// GpuInstanceGetComputeInstanceById mocks base method.
func (m *MockInterface) GpuInstanceGetComputeInstanceById(arg0 nvml.GpuInstance, arg1 int) (nvml.ComputeInstance, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GpuInstanceGetComputeInstanceById", arg0, arg1)
	ret0, _ := ret[0].(nvml.ComputeInstance)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GpuInstanceGetComputeInstanceById indicates an expected call of GpuInstanceGetComputeInstanceById.
func (mr *MockInterfaceMockRecorder) GpuInstanceGetComputeInstanceById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GpuInstanceGetComputeInstanceById", reflect.TypeOf((*MockInterface)(nil).GpuInstanceGetComputeInstanceById), arg0, arg1)
}

// GpuInstanceGetComputeInstancePossiblePlacements mocks base method.
func (m *MockInterface) GpuInstanceGetComputeInstancePossiblePlacements(arg0 nvml.GpuInstance, arg1 *nvml.ComputeInstanceProfileInfo) ([]nvml.ComputeInstancePlacement, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GpuInstanceGetComputeInstancePossiblePlacements", arg0, arg1)
	ret0, _ := ret[0].([]nvml.ComputeInstancePlacement)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GpuInstanceGetComputeInstancePossiblePlacements indicates an expected call of GpuInstanceGetComputeInstancePossiblePlacements.
func (mr *MockInterfaceMockRecorder) GpuInstanceGetComputeInstancePossiblePlacements(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GpuInstanceGetComputeInstancePossiblePlacements", reflect.TypeOf((*MockInterface)(nil).GpuInstanceGetComputeInstancePossiblePlacements), arg0, arg1)
}

// GpuInstanceGetComputeInstanceProfileInfo mocks base method.
func (m *MockInterface) GpuInstanceGetComputeInstanceProfileInfo(arg0 nvml.GpuInstance, arg1, arg2 int) (nvml.ComputeInstanceProfileInfo, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GpuInstanceGetComputeInstanceProfileInfo", arg0, arg1, arg2)
	ret0, _ := ret[0].(nvml.ComputeInstanceProfileInfo)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GpuInstanceGetComputeInstanceProfileInfo indicates an expected call of GpuInstanceGetComputeInstanceProfileInfo.
func (mr *MockInterfaceMockRecorder) GpuInstanceGetComputeInstanceProfileInfo(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GpuInstanceGetComputeInstanceProfileInfo", reflect.TypeOf((*MockInterface)(nil).GpuInstanceGetComputeInstanceProfileInfo), arg0, arg1, arg2)
}

// GpuInstanceGetComputeInstanceProfileInfoV mocks base method.
func (m *MockInterface) GpuInstanceGetComputeInstanceProfileInfoV(arg0 nvml.GpuInstance, arg1, arg2 int) nvml.ComputeInstanceProfileInfoHandler {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GpuInstanceGetComputeInstanceProfileInfoV", arg0, arg1, arg2)
	ret0, _ := ret[0].(nvml.ComputeInstanceProfileInfoHandler)
	return ret0
}

// GpuInstanceGetComputeInstanceProfileInfoV indicates an expected call of GpuInstanceGetComputeInstanceProfileInfoV.
func (mr *MockInterfaceMockRecorder) GpuInstanceGetComputeInstanceProfileInfoV(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GpuInstanceGetComputeInstanceProfileInfoV", reflect.TypeOf((*MockInterface)(nil).GpuInstanceGetComputeInstanceProfileInfoV), arg0, arg1, arg2)
}

// GpuInstanceGetComputeInstanceRemainingCapacity mocks base method.
func (m *MockInterface) GpuInstanceGetComputeInstanceRemainingCapacity(arg0 nvml.GpuInstance, arg1 *nvml.ComputeInstanceProfileInfo) (int, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GpuInstanceGetComputeInstanceRemainingCapacity", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GpuInstanceGetComputeInstanceRemainingCapacity indicates an expected call of GpuInstanceGetComputeInstanceRemainingCapacity.
func (mr *MockInterfaceMockRecorder) GpuInstanceGetComputeInstanceRemainingCapacity(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GpuInstanceGetComputeInstanceRemainingCapacity", reflect.TypeOf((*MockInterface)(nil).GpuInstanceGetComputeInstanceRemainingCapacity), arg0, arg1)
}

// GpuInstanceGetComputeInstances mocks base method.
func (m *MockInterface) GpuInstanceGetComputeInstances(arg0 nvml.GpuInstance, arg1 *nvml.ComputeInstanceProfileInfo) ([]nvml.ComputeInstance, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GpuInstanceGetComputeInstances", arg0, arg1)
	ret0, _ := ret[0].([]nvml.ComputeInstance)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GpuInstanceGetComputeInstances indicates an expected call of GpuInstanceGetComputeInstances.
func (mr *MockInterfaceMockRecorder) GpuInstanceGetComputeInstances(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GpuInstanceGetComputeInstances", reflect.TypeOf((*MockInterface)(nil).GpuInstanceGetComputeInstances), arg0, arg1)
}

// GpuInstanceGetInfo mocks base method.
func (m *MockInterface) GpuInstanceGetInfo(arg0 nvml.GpuInstance) (nvml.GpuInstanceInfo, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GpuInstanceGetInfo", arg0)
	ret0, _ := ret[0].(nvml.GpuInstanceInfo)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GpuInstanceGetInfo indicates an expected call of GpuInstanceGetInfo.
func (mr *MockInterfaceMockRecorder) GpuInstanceGetInfo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GpuInstanceGetInfo", reflect.TypeOf((*MockInterface)(nil).GpuInstanceGetInfo), arg0)
}

// Init mocks base method.
func (m *MockInterface) Init() nvml.Return {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init")
	ret0, _ := ret[0].(nvml.Return)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockInterfaceMockRecorder) Init() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockInterface)(nil).Init))
}

// InitWithFlags mocks base method.
func (m *MockInterface) InitWithFlags(arg0 uint32) nvml.Return {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitWithFlags", arg0)
	ret0, _ := ret[0].(nvml.Return)
	return ret0
}

// InitWithFlags indicates an expected call of InitWithFlags.
func (mr *MockInterfaceMockRecorder) InitWithFlags(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitWithFlags", reflect.TypeOf((*MockInterface)(nil).InitWithFlags), arg0)
}

// SetVgpuVersion mocks base method.
func (m *MockInterface) SetVgpuVersion(arg0 *nvml.VgpuVersion) nvml.Return {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetVgpuVersion", arg0)
	ret0, _ := ret[0].(nvml.Return)
	return ret0
}

// SetVgpuVersion indicates an expected call of SetVgpuVersion.
func (mr *MockInterfaceMockRecorder) SetVgpuVersion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetVgpuVersion", reflect.TypeOf((*MockInterface)(nil).SetVgpuVersion), arg0)
}

// Shutdown mocks base method.
func (m *MockInterface) Shutdown() nvml.Return {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Shutdown")
	ret0, _ := ret[0].(nvml.Return)
	return ret0
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockInterfaceMockRecorder) Shutdown() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockInterface)(nil).Shutdown))
}

// SystemGetConfComputeCapabilities mocks base method.
func (m *MockInterface) SystemGetConfComputeCapabilities() (nvml.ConfComputeSystemCaps, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SystemGetConfComputeCapabilities")
	ret0, _ := ret[0].(nvml.ConfComputeSystemCaps)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// SystemGetConfComputeCapabilities indicates an expected call of SystemGetConfComputeCapabilities.
func (mr *MockInterfaceMockRecorder) SystemGetConfComputeCapabilities() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SystemGetConfComputeCapabilities", reflect.TypeOf((*MockInterface)(nil).SystemGetConfComputeCapabilities))
}

// SystemGetConfComputeKeyRotationThresholdInfo mocks base method.
func (m *MockInterface) SystemGetConfComputeKeyRotationThresholdInfo() (nvml.ConfComputeGetKeyRotationThresholdInfo, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SystemGetConfComputeKeyRotationThresholdInfo")
	ret0, _ := ret[0].(nvml.ConfComputeGetKeyRotationThresholdInfo)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// SystemGetConfComputeKeyRotationThresholdInfo indicates an expected call of SystemGetConfComputeKeyRotationThresholdInfo.
func (mr *MockInterfaceMockRecorder) SystemGetConfComputeKeyRotationThresholdInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SystemGetConfComputeKeyRotationThresholdInfo", reflect.TypeOf((*MockInterface)(nil).SystemGetConfComputeKeyRotationThresholdInfo))
}

// SystemGetConfComputeSettings mocks base method.
func (m *MockInterface) SystemGetConfComputeSettings() (nvml.SystemConfComputeSettings, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SystemGetConfComputeSettings")
	ret0, _ := ret[0].(nvml.SystemConfComputeSettings)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// SystemGetConfComputeSettings indicates an expected call of SystemGetConfComputeSettings.
func (mr *MockInterfaceMockRecorder) SystemGetConfComputeSettings() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SystemGetConfComputeSettings", reflect.TypeOf((*MockInterface)(nil).SystemGetConfComputeSettings))
}

// SystemGetCudaDriverVersion mocks base method.
func (m *MockInterface) SystemGetCudaDriverVersion() (int, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SystemGetCudaDriverVersion")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// SystemGetCudaDriverVersion indicates an expected call of SystemGetCudaDriverVersion.
func (mr *MockInterfaceMockRecorder) SystemGetCudaDriverVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SystemGetCudaDriverVersion", reflect.TypeOf((*MockInterface)(nil).SystemGetCudaDriverVersion))
}

// SystemGetCudaDriverVersion_v2 mocks base method.
func (m *MockInterface) SystemGetCudaDriverVersion_v2() (int, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SystemGetCudaDriverVersion_v2")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// SystemGetCudaDriverVersion_v2 indicates an expected call of SystemGetCudaDriverVersion_v2.
func (mr *MockInterfaceMockRecorder) SystemGetCudaDriverVersion_v2() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SystemGetCudaDriverVersion_v2", reflect.TypeOf((*MockInterface)(nil).SystemGetCudaDriverVersion_v2))
}

// SystemGetDriverVersion mocks base method.
func (m *MockInterface) SystemGetDriverVersion() (string, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SystemGetDriverVersion")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// SystemGetDriverVersion indicates an expected call of SystemGetDriverVersion.
func (mr *MockInterfaceMockRecorder) SystemGetDriverVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SystemGetDriverVersion", reflect.TypeOf((*MockInterface)(nil).SystemGetDriverVersion))
}

// SystemGetHicVersion mocks base method.
func (m *MockInterface) SystemGetHicVersion() ([]nvml.HwbcEntry, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SystemGetHicVersion")
	ret0, _ := ret[0].([]nvml.HwbcEntry)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// SystemGetHicVersion indicates an expected call of SystemGetHicVersion.
func (mr *MockInterfaceMockRecorder) SystemGetHicVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SystemGetHicVersion", reflect.TypeOf((*MockInterface)(nil).SystemGetHicVersion))
}

// SystemGetNVMLVersion mocks base method.
func (m *MockInterface) SystemGetNVMLVersion() (string, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SystemGetNVMLVersion")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// SystemGetNVMLVersion indicates an expected call of SystemGetNVMLVersion.
func (mr *MockInterfaceMockRecorder) SystemGetNVMLVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SystemGetNVMLVersion", reflect.TypeOf((*MockInterface)(nil).SystemGetNVMLVersion))
}

// SystemGetProcessName mocks base method.
func (m *MockInterface) SystemGetProcessName(arg0 int) (string, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SystemGetProcessName", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// SystemGetProcessName indicates an expected call of SystemGetProcessName.
func (mr *MockInterfaceMockRecorder) SystemGetProcessName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SystemGetProcessName", reflect.TypeOf((*MockInterface)(nil).SystemGetProcessName), arg0)
}

// SystemGetTopologyGpuSet mocks base method.
func (m *MockInterface) SystemGetTopologyGpuSet(arg0 int) ([]nvml.Device, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SystemGetTopologyGpuSet", arg0)
	ret0, _ := ret[0].([]nvml.Device)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// SystemGetTopologyGpuSet indicates an expected call of SystemGetTopologyGpuSet.
func (mr *MockInterfaceMockRecorder) SystemGetTopologyGpuSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SystemGetTopologyGpuSet", reflect.TypeOf((*MockInterface)(nil).SystemGetTopologyGpuSet), arg0)
}

// SystemSetConfComputeKeyRotationThresholdInfo mocks base method.
func (m *MockInterface) SystemSetConfComputeKeyRotationThresholdInfo(arg0 nvml.ConfComputeSetKeyRotationThresholdInfo) nvml.Return {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SystemSetConfComputeKeyRotationThresholdInfo", arg0)
	ret0, _ := ret[0].(nvml.Return)
	return ret0
}

// SystemSetConfComputeKeyRotationThresholdInfo indicates an expected call of SystemSetConfComputeKeyRotationThresholdInfo.
func (mr *MockInterfaceMockRecorder) SystemSetConfComputeKeyRotationThresholdInfo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SystemSetConfComputeKeyRotationThresholdInfo", reflect.TypeOf((*MockInterface)(nil).SystemSetConfComputeKeyRotationThresholdInfo), arg0)
}

// UnitGetCount mocks base method.
func (m *MockInterface) UnitGetCount() (int, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnitGetCount")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// UnitGetCount indicates an expected call of UnitGetCount.
func (mr *MockInterfaceMockRecorder) UnitGetCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnitGetCount", reflect.TypeOf((*MockInterface)(nil).UnitGetCount))
}

// UnitGetDevices mocks base method.
func (m *MockInterface) UnitGetDevices(arg0 nvml.Unit) ([]nvml.Device, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnitGetDevices", arg0)
	ret0, _ := ret[0].([]nvml.Device)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// UnitGetDevices indicates an expected call of UnitGetDevices.
func (mr *MockInterfaceMockRecorder) UnitGetDevices(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnitGetDevices", reflect.TypeOf((*MockInterface)(nil).UnitGetDevices), arg0)
}

// UnitGetFanSpeedInfo mocks base method.
func (m *MockInterface) UnitGetFanSpeedInfo(arg0 nvml.Unit) (nvml.UnitFanSpeeds, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnitGetFanSpeedInfo", arg0)
	ret0, _ := ret[0].(nvml.UnitFanSpeeds)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// UnitGetFanSpeedInfo indicates an expected call of UnitGetFanSpeedInfo.
func (mr *MockInterfaceMockRecorder) UnitGetFanSpeedInfo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnitGetFanSpeedInfo", reflect.TypeOf((*MockInterface)(nil).UnitGetFanSpeedInfo), arg0)
}

// UnitGetHandleByIndex mocks base method.
func (m *MockInterface) UnitGetHandleByIndex(arg0 int) (nvml.Unit, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnitGetHandleByIndex", arg0)
	ret0, _ := ret[0].(nvml.Unit)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// UnitGetHandleByIndex indicates an expected call of UnitGetHandleByIndex.
func (mr *MockInterfaceMockRecorder) UnitGetHandleByIndex(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnitGetHandleByIndex", reflect.TypeOf((*MockInterface)(nil).UnitGetHandleByIndex), arg0)
}

// UnitGetLedState mocks base method.
func (m *MockInterface) UnitGetLedState(arg0 nvml.Unit) (nvml.LedState, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnitGetLedState", arg0)
	ret0, _ := ret[0].(nvml.LedState)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// UnitGetLedState indicates an expected call of UnitGetLedState.
func (mr *MockInterfaceMockRecorder) UnitGetLedState(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnitGetLedState", reflect.TypeOf((*MockInterface)(nil).UnitGetLedState), arg0)
}

// UnitGetPsuInfo mocks base method.
func (m *MockInterface) UnitGetPsuInfo(arg0 nvml.Unit) (nvml.PSUInfo, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnitGetPsuInfo", arg0)
	ret0, _ := ret[0].(nvml.PSUInfo)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// UnitGetPsuInfo indicates an expected call of UnitGetPsuInfo.
func (mr *MockInterfaceMockRecorder) UnitGetPsuInfo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnitGetPsuInfo", reflect.TypeOf((*MockInterface)(nil).UnitGetPsuInfo), arg0)
}

// UnitGetTemperature mocks base method.
func (m *MockInterface) UnitGetTemperature(arg0 nvml.Unit, arg1 int) (uint32, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnitGetTemperature", arg0, arg1)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// UnitGetTemperature indicates an expected call of UnitGetTemperature.
func (mr *MockInterfaceMockRecorder) UnitGetTemperature(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnitGetTemperature", reflect.TypeOf((*MockInterface)(nil).UnitGetTemperature), arg0, arg1)
}

// UnitGetUnitInfo mocks base method.
func (m *MockInterface) UnitGetUnitInfo(arg0 nvml.Unit) (nvml.UnitInfo, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnitGetUnitInfo", arg0)
	ret0, _ := ret[0].(nvml.UnitInfo)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// UnitGetUnitInfo indicates an expected call of UnitGetUnitInfo.
func (mr *MockInterfaceMockRecorder) UnitGetUnitInfo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnitGetUnitInfo", reflect.TypeOf((*MockInterface)(nil).UnitGetUnitInfo), arg0)
}

// UnitSetLedState mocks base method.
func (m *MockInterface) UnitSetLedState(arg0 nvml.Unit, arg1 nvml.LedColor) nvml.Return {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnitSetLedState", arg0, arg1)
	ret0, _ := ret[0].(nvml.Return)
	return ret0
}

// UnitSetLedState indicates an expected call of UnitSetLedState.
func (mr *MockInterfaceMockRecorder) UnitSetLedState(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnitSetLedState", reflect.TypeOf((*MockInterface)(nil).UnitSetLedState), arg0, arg1)
}

// VgpuInstanceClearAccountingPids mocks base method.
func (m *MockInterface) VgpuInstanceClearAccountingPids(arg0 nvml.VgpuInstance) nvml.Return {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VgpuInstanceClearAccountingPids", arg0)
	ret0, _ := ret[0].(nvml.Return)
	return ret0
}

// VgpuInstanceClearAccountingPids indicates an expected call of VgpuInstanceClearAccountingPids.
func (mr *MockInterfaceMockRecorder) VgpuInstanceClearAccountingPids(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VgpuInstanceClearAccountingPids", reflect.TypeOf((*MockInterface)(nil).VgpuInstanceClearAccountingPids), arg0)
}

// VgpuInstanceGetAccountingMode mocks base method.
func (m *MockInterface) VgpuInstanceGetAccountingMode(arg0 nvml.VgpuInstance) (nvml.EnableState, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VgpuInstanceGetAccountingMode", arg0)
	ret0, _ := ret[0].(nvml.EnableState)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// VgpuInstanceGetAccountingMode indicates an expected call of VgpuInstanceGetAccountingMode.
func (mr *MockInterfaceMockRecorder) VgpuInstanceGetAccountingMode(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VgpuInstanceGetAccountingMode", reflect.TypeOf((*MockInterface)(nil).VgpuInstanceGetAccountingMode), arg0)
}

// VgpuInstanceGetAccountingPids mocks base method.
func (m *MockInterface) VgpuInstanceGetAccountingPids(arg0 nvml.VgpuInstance) ([]int, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VgpuInstanceGetAccountingPids", arg0)
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// VgpuInstanceGetAccountingPids indicates an expected call of VgpuInstanceGetAccountingPids.
func (mr *MockInterfaceMockRecorder) VgpuInstanceGetAccountingPids(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VgpuInstanceGetAccountingPids", reflect.TypeOf((*MockInterface)(nil).VgpuInstanceGetAccountingPids), arg0)
}

// VgpuInstanceGetAccountingStats mocks base method.
func (m *MockInterface) VgpuInstanceGetAccountingStats(arg0 nvml.VgpuInstance, arg1 int) (nvml.AccountingStats, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VgpuInstanceGetAccountingStats", arg0, arg1)
	ret0, _ := ret[0].(nvml.AccountingStats)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// VgpuInstanceGetAccountingStats indicates an expected call of VgpuInstanceGetAccountingStats.
func (mr *MockInterfaceMockRecorder) VgpuInstanceGetAccountingStats(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VgpuInstanceGetAccountingStats", reflect.TypeOf((*MockInterface)(nil).VgpuInstanceGetAccountingStats), arg0, arg1)
}

// VgpuInstanceGetEccMode mocks base method.
func (m *MockInterface) VgpuInstanceGetEccMode(arg0 nvml.VgpuInstance) (nvml.EnableState, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VgpuInstanceGetEccMode", arg0)
	ret0, _ := ret[0].(nvml.EnableState)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// VgpuInstanceGetEccMode indicates an expected call of VgpuInstanceGetEccMode.
func (mr *MockInterfaceMockRecorder) VgpuInstanceGetEccMode(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VgpuInstanceGetEccMode", reflect.TypeOf((*MockInterface)(nil).VgpuInstanceGetEccMode), arg0)
}

// VgpuInstanceGetEncoderCapacity mocks base method.
func (m *MockInterface) VgpuInstanceGetEncoderCapacity(arg0 nvml.VgpuInstance) (int, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VgpuInstanceGetEncoderCapacity", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// VgpuInstanceGetEncoderCapacity indicates an expected call of VgpuInstanceGetEncoderCapacity.
func (mr *MockInterfaceMockRecorder) VgpuInstanceGetEncoderCapacity(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VgpuInstanceGetEncoderCapacity", reflect.TypeOf((*MockInterface)(nil).VgpuInstanceGetEncoderCapacity), arg0)
}

// VgpuInstanceGetEncoderSessions mocks base method.
func (m *MockInterface) VgpuInstanceGetEncoderSessions(arg0 nvml.VgpuInstance) (int, nvml.EncoderSessionInfo, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VgpuInstanceGetEncoderSessions", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(nvml.EncoderSessionInfo)
	ret2, _ := ret[2].(nvml.Return)
	return ret0, ret1, ret2
}

// VgpuInstanceGetEncoderSessions indicates an expected call of VgpuInstanceGetEncoderSessions.
func (mr *MockInterfaceMockRecorder) VgpuInstanceGetEncoderSessions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VgpuInstanceGetEncoderSessions", reflect.TypeOf((*MockInterface)(nil).VgpuInstanceGetEncoderSessions), arg0)
}

// VgpuInstanceGetEncoderStats mocks base method.
func (m *MockInterface) VgpuInstanceGetEncoderStats(arg0 nvml.VgpuInstance) (int, uint32, uint32, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VgpuInstanceGetEncoderStats", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(uint32)
	ret2, _ := ret[2].(uint32)
	ret3, _ := ret[3].(nvml.Return)
	return ret0, ret1, ret2, ret3
}

// VgpuInstanceGetEncoderStats indicates an expected call of VgpuInstanceGetEncoderStats.
func (mr *MockInterfaceMockRecorder) VgpuInstanceGetEncoderStats(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VgpuInstanceGetEncoderStats", reflect.TypeOf((*MockInterface)(nil).VgpuInstanceGetEncoderStats), arg0)
}

// VgpuInstanceGetFBCSessions mocks base method.
func (m *MockInterface) VgpuInstanceGetFBCSessions(arg0 nvml.VgpuInstance) (int, nvml.FBCSessionInfo, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VgpuInstanceGetFBCSessions", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(nvml.FBCSessionInfo)
	ret2, _ := ret[2].(nvml.Return)
	return ret0, ret1, ret2
}

// VgpuInstanceGetFBCSessions indicates an expected call of VgpuInstanceGetFBCSessions.
func (mr *MockInterfaceMockRecorder) VgpuInstanceGetFBCSessions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VgpuInstanceGetFBCSessions", reflect.TypeOf((*MockInterface)(nil).VgpuInstanceGetFBCSessions), arg0)
}

// VgpuInstanceGetFBCStats mocks base method.
func (m *MockInterface) VgpuInstanceGetFBCStats(arg0 nvml.VgpuInstance) (nvml.FBCStats, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VgpuInstanceGetFBCStats", arg0)
	ret0, _ := ret[0].(nvml.FBCStats)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// VgpuInstanceGetFBCStats indicates an expected call of VgpuInstanceGetFBCStats.
func (mr *MockInterfaceMockRecorder) VgpuInstanceGetFBCStats(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VgpuInstanceGetFBCStats", reflect.TypeOf((*MockInterface)(nil).VgpuInstanceGetFBCStats), arg0)
}

// VgpuInstanceGetFbUsage mocks base method.
func (m *MockInterface) VgpuInstanceGetFbUsage(arg0 nvml.VgpuInstance) (uint64, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VgpuInstanceGetFbUsage", arg0)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// VgpuInstanceGetFbUsage indicates an expected call of VgpuInstanceGetFbUsage.
func (mr *MockInterfaceMockRecorder) VgpuInstanceGetFbUsage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VgpuInstanceGetFbUsage", reflect.TypeOf((*MockInterface)(nil).VgpuInstanceGetFbUsage), arg0)
}

// VgpuInstanceGetFrameRateLimit mocks base method.
func (m *MockInterface) VgpuInstanceGetFrameRateLimit(arg0 nvml.VgpuInstance) (uint32, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VgpuInstanceGetFrameRateLimit", arg0)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// VgpuInstanceGetFrameRateLimit indicates an expected call of VgpuInstanceGetFrameRateLimit.
func (mr *MockInterfaceMockRecorder) VgpuInstanceGetFrameRateLimit(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VgpuInstanceGetFrameRateLimit", reflect.TypeOf((*MockInterface)(nil).VgpuInstanceGetFrameRateLimit), arg0)
}

// VgpuInstanceGetGpuInstanceId mocks base method.
func (m *MockInterface) VgpuInstanceGetGpuInstanceId(arg0 nvml.VgpuInstance) (int, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VgpuInstanceGetGpuInstanceId", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// VgpuInstanceGetGpuInstanceId indicates an expected call of VgpuInstanceGetGpuInstanceId.
func (mr *MockInterfaceMockRecorder) VgpuInstanceGetGpuInstanceId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VgpuInstanceGetGpuInstanceId", reflect.TypeOf((*MockInterface)(nil).VgpuInstanceGetGpuInstanceId), arg0)
}

// VgpuInstanceGetGpuPciId mocks base method.
func (m *MockInterface) VgpuInstanceGetGpuPciId(arg0 nvml.VgpuInstance) (string, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VgpuInstanceGetGpuPciId", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// VgpuInstanceGetGpuPciId indicates an expected call of VgpuInstanceGetGpuPciId.
func (mr *MockInterfaceMockRecorder) VgpuInstanceGetGpuPciId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VgpuInstanceGetGpuPciId", reflect.TypeOf((*MockInterface)(nil).VgpuInstanceGetGpuPciId), arg0)
}

// VgpuInstanceGetLicenseInfo mocks base method.
func (m *MockInterface) VgpuInstanceGetLicenseInfo(arg0 nvml.VgpuInstance) (nvml.VgpuLicenseInfo, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VgpuInstanceGetLicenseInfo", arg0)
	ret0, _ := ret[0].(nvml.VgpuLicenseInfo)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// VgpuInstanceGetLicenseInfo indicates an expected call of VgpuInstanceGetLicenseInfo.
func (mr *MockInterfaceMockRecorder) VgpuInstanceGetLicenseInfo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VgpuInstanceGetLicenseInfo", reflect.TypeOf((*MockInterface)(nil).VgpuInstanceGetLicenseInfo), arg0)
}

// VgpuInstanceGetLicenseStatus mocks base method.
func (m *MockInterface) VgpuInstanceGetLicenseStatus(arg0 nvml.VgpuInstance) (int, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VgpuInstanceGetLicenseStatus", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// VgpuInstanceGetLicenseStatus indicates an expected call of VgpuInstanceGetLicenseStatus.
func (mr *MockInterfaceMockRecorder) VgpuInstanceGetLicenseStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VgpuInstanceGetLicenseStatus", reflect.TypeOf((*MockInterface)(nil).VgpuInstanceGetLicenseStatus), arg0)
}

// VgpuInstanceGetMdevUUID mocks base method.
func (m *MockInterface) VgpuInstanceGetMdevUUID(arg0 nvml.VgpuInstance) (string, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VgpuInstanceGetMdevUUID", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// VgpuInstanceGetMdevUUID indicates an expected call of VgpuInstanceGetMdevUUID.
func (mr *MockInterfaceMockRecorder) VgpuInstanceGetMdevUUID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VgpuInstanceGetMdevUUID", reflect.TypeOf((*MockInterface)(nil).VgpuInstanceGetMdevUUID), arg0)
}

// VgpuInstanceGetMetadata mocks base method.
func (m *MockInterface) VgpuInstanceGetMetadata(arg0 nvml.VgpuInstance) (nvml.VgpuMetadata, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VgpuInstanceGetMetadata", arg0)
	ret0, _ := ret[0].(nvml.VgpuMetadata)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// VgpuInstanceGetMetadata indicates an expected call of VgpuInstanceGetMetadata.
func (mr *MockInterfaceMockRecorder) VgpuInstanceGetMetadata(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VgpuInstanceGetMetadata", reflect.TypeOf((*MockInterface)(nil).VgpuInstanceGetMetadata), arg0)
}

// VgpuInstanceGetType mocks base method.
func (m *MockInterface) VgpuInstanceGetType(arg0 nvml.VgpuInstance) (nvml.VgpuTypeId, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VgpuInstanceGetType", arg0)
	ret0, _ := ret[0].(nvml.VgpuTypeId)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// VgpuInstanceGetType indicates an expected call of VgpuInstanceGetType.
func (mr *MockInterfaceMockRecorder) VgpuInstanceGetType(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VgpuInstanceGetType", reflect.TypeOf((*MockInterface)(nil).VgpuInstanceGetType), arg0)
}

// VgpuInstanceGetUUID mocks base method.
func (m *MockInterface) VgpuInstanceGetUUID(arg0 nvml.VgpuInstance) (string, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VgpuInstanceGetUUID", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// VgpuInstanceGetUUID indicates an expected call of VgpuInstanceGetUUID.
func (mr *MockInterfaceMockRecorder) VgpuInstanceGetUUID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VgpuInstanceGetUUID", reflect.TypeOf((*MockInterface)(nil).VgpuInstanceGetUUID), arg0)
}

// VgpuInstanceGetVmDriverVersion mocks base method.
func (m *MockInterface) VgpuInstanceGetVmDriverVersion(arg0 nvml.VgpuInstance) (string, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VgpuInstanceGetVmDriverVersion", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// VgpuInstanceGetVmDriverVersion indicates an expected call of VgpuInstanceGetVmDriverVersion.
func (mr *MockInterfaceMockRecorder) VgpuInstanceGetVmDriverVersion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VgpuInstanceGetVmDriverVersion", reflect.TypeOf((*MockInterface)(nil).VgpuInstanceGetVmDriverVersion), arg0)
}

// VgpuInstanceGetVmID mocks base method.
func (m *MockInterface) VgpuInstanceGetVmID(arg0 nvml.VgpuInstance) (string, nvml.VgpuVmIdType, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VgpuInstanceGetVmID", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(nvml.VgpuVmIdType)
	ret2, _ := ret[2].(nvml.Return)
	return ret0, ret1, ret2
}

// VgpuInstanceGetVmID indicates an expected call of VgpuInstanceGetVmID.
func (mr *MockInterfaceMockRecorder) VgpuInstanceGetVmID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VgpuInstanceGetVmID", reflect.TypeOf((*MockInterface)(nil).VgpuInstanceGetVmID), arg0)
}

// VgpuInstanceSetEncoderCapacity mocks base method.
func (m *MockInterface) VgpuInstanceSetEncoderCapacity(arg0 nvml.VgpuInstance, arg1 int) nvml.Return {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VgpuInstanceSetEncoderCapacity", arg0, arg1)
	ret0, _ := ret[0].(nvml.Return)
	return ret0
}

// VgpuInstanceSetEncoderCapacity indicates an expected call of VgpuInstanceSetEncoderCapacity.
func (mr *MockInterfaceMockRecorder) VgpuInstanceSetEncoderCapacity(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VgpuInstanceSetEncoderCapacity", reflect.TypeOf((*MockInterface)(nil).VgpuInstanceSetEncoderCapacity), arg0, arg1)
}

// VgpuTypeGetCapabilities mocks base method.
func (m *MockInterface) VgpuTypeGetCapabilities(arg0 nvml.VgpuTypeId, arg1 nvml.VgpuCapability) (bool, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VgpuTypeGetCapabilities", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// VgpuTypeGetCapabilities indicates an expected call of VgpuTypeGetCapabilities.
func (mr *MockInterfaceMockRecorder) VgpuTypeGetCapabilities(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VgpuTypeGetCapabilities", reflect.TypeOf((*MockInterface)(nil).VgpuTypeGetCapabilities), arg0, arg1)
}

// VgpuTypeGetClass mocks base method.
func (m *MockInterface) VgpuTypeGetClass(arg0 nvml.VgpuTypeId) (string, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VgpuTypeGetClass", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// VgpuTypeGetClass indicates an expected call of VgpuTypeGetClass.
func (mr *MockInterfaceMockRecorder) VgpuTypeGetClass(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VgpuTypeGetClass", reflect.TypeOf((*MockInterface)(nil).VgpuTypeGetClass), arg0)
}

// VgpuTypeGetDeviceID mocks base method.
func (m *MockInterface) VgpuTypeGetDeviceID(arg0 nvml.VgpuTypeId) (uint64, uint64, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VgpuTypeGetDeviceID", arg0)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(uint64)
	ret2, _ := ret[2].(nvml.Return)
	return ret0, ret1, ret2
}

// VgpuTypeGetDeviceID indicates an expected call of VgpuTypeGetDeviceID.
func (mr *MockInterfaceMockRecorder) VgpuTypeGetDeviceID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VgpuTypeGetDeviceID", reflect.TypeOf((*MockInterface)(nil).VgpuTypeGetDeviceID), arg0)
}

// VgpuTypeGetFrameRateLimit mocks base method.
func (m *MockInterface) VgpuTypeGetFrameRateLimit(arg0 nvml.VgpuTypeId) (uint32, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VgpuTypeGetFrameRateLimit", arg0)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// VgpuTypeGetFrameRateLimit indicates an expected call of VgpuTypeGetFrameRateLimit.
func (mr *MockInterfaceMockRecorder) VgpuTypeGetFrameRateLimit(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VgpuTypeGetFrameRateLimit", reflect.TypeOf((*MockInterface)(nil).VgpuTypeGetFrameRateLimit), arg0)
}

// VgpuTypeGetFramebufferSize mocks base method.
func (m *MockInterface) VgpuTypeGetFramebufferSize(arg0 nvml.VgpuTypeId) (uint64, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VgpuTypeGetFramebufferSize", arg0)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// VgpuTypeGetFramebufferSize indicates an expected call of VgpuTypeGetFramebufferSize.
func (mr *MockInterfaceMockRecorder) VgpuTypeGetFramebufferSize(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VgpuTypeGetFramebufferSize", reflect.TypeOf((*MockInterface)(nil).VgpuTypeGetFramebufferSize), arg0)
}

// VgpuTypeGetGpuInstanceProfileId mocks base method.
func (m *MockInterface) VgpuTypeGetGpuInstanceProfileId(arg0 nvml.VgpuTypeId) (uint32, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VgpuTypeGetGpuInstanceProfileId", arg0)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// VgpuTypeGetGpuInstanceProfileId indicates an expected call of VgpuTypeGetGpuInstanceProfileId.
func (mr *MockInterfaceMockRecorder) VgpuTypeGetGpuInstanceProfileId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VgpuTypeGetGpuInstanceProfileId", reflect.TypeOf((*MockInterface)(nil).VgpuTypeGetGpuInstanceProfileId), arg0)
}

// VgpuTypeGetLicense mocks base method.
func (m *MockInterface) VgpuTypeGetLicense(arg0 nvml.VgpuTypeId) (string, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VgpuTypeGetLicense", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// VgpuTypeGetLicense indicates an expected call of VgpuTypeGetLicense.
func (mr *MockInterfaceMockRecorder) VgpuTypeGetLicense(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VgpuTypeGetLicense", reflect.TypeOf((*MockInterface)(nil).VgpuTypeGetLicense), arg0)
}

// VgpuTypeGetMaxInstances mocks base method.
func (m *MockInterface) VgpuTypeGetMaxInstances(arg0 nvml.Device, arg1 nvml.VgpuTypeId) (int, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VgpuTypeGetMaxInstances", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// VgpuTypeGetMaxInstances indicates an expected call of VgpuTypeGetMaxInstances.
func (mr *MockInterfaceMockRecorder) VgpuTypeGetMaxInstances(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VgpuTypeGetMaxInstances", reflect.TypeOf((*MockInterface)(nil).VgpuTypeGetMaxInstances), arg0, arg1)
}

// VgpuTypeGetMaxInstancesPerVm mocks base method.
func (m *MockInterface) VgpuTypeGetMaxInstancesPerVm(arg0 nvml.VgpuTypeId) (int, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VgpuTypeGetMaxInstancesPerVm", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// VgpuTypeGetMaxInstancesPerVm indicates an expected call of VgpuTypeGetMaxInstancesPerVm.
func (mr *MockInterfaceMockRecorder) VgpuTypeGetMaxInstancesPerVm(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VgpuTypeGetMaxInstancesPerVm", reflect.TypeOf((*MockInterface)(nil).VgpuTypeGetMaxInstancesPerVm), arg0)
}

// VgpuTypeGetName mocks base method.
func (m *MockInterface) VgpuTypeGetName(arg0 nvml.VgpuTypeId) (string, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VgpuTypeGetName", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// VgpuTypeGetName indicates an expected call of VgpuTypeGetName.
func (mr *MockInterfaceMockRecorder) VgpuTypeGetName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VgpuTypeGetName", reflect.TypeOf((*MockInterface)(nil).VgpuTypeGetName), arg0)
}

// VgpuTypeGetNumDisplayHeads mocks base method.
func (m *MockInterface) VgpuTypeGetNumDisplayHeads(arg0 nvml.VgpuTypeId) (int, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VgpuTypeGetNumDisplayHeads", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// VgpuTypeGetNumDisplayHeads indicates an expected call of VgpuTypeGetNumDisplayHeads.
func (mr *MockInterfaceMockRecorder) VgpuTypeGetNumDisplayHeads(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VgpuTypeGetNumDisplayHeads", reflect.TypeOf((*MockInterface)(nil).VgpuTypeGetNumDisplayHeads), arg0)
}

// VgpuTypeGetResolution mocks base method.
func (m *MockInterface) VgpuTypeGetResolution(arg0 nvml.VgpuTypeId, arg1 int) (uint32, uint32, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VgpuTypeGetResolution", arg0, arg1)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(uint32)
	ret2, _ := ret[2].(nvml.Return)
	return ret0, ret1, ret2
}

// VgpuTypeGetResolution indicates an expected call of VgpuTypeGetResolution.
func (mr *MockInterfaceMockRecorder) VgpuTypeGetResolution(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VgpuTypeGetResolution", reflect.TypeOf((*MockInterface)(nil).VgpuTypeGetResolution), arg0, arg1)
}

// MockDevice is a mock of Device interface.
type MockDevice struct {
	ctrl     *gomock.Controller
	recorder *MockDeviceMockRecorder
}

// MockDeviceMockRecorder is the mock recorder for MockDevice.
type MockDeviceMockRecorder struct {
	mock *MockDevice
}

// NewMockDevice creates a new mock instance.
func NewMockDevice(ctrl *gomock.Controller) *MockDevice {
	mock := &MockDevice{ctrl: ctrl}
	mock.recorder = &MockDeviceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDevice) EXPECT() *MockDeviceMockRecorder {
	return m.recorder
}

// ClearAccountingPids mocks base method.
func (m *MockDevice) ClearAccountingPids() nvml.Return {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearAccountingPids")
	ret0, _ := ret[0].(nvml.Return)
	return ret0
}

// ClearAccountingPids indicates an expected call of ClearAccountingPids.
func (mr *MockDeviceMockRecorder) ClearAccountingPids() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearAccountingPids", reflect.TypeOf((*MockDevice)(nil).ClearAccountingPids))
}

// ClearCpuAffinity mocks base method.
func (m *MockDevice) ClearCpuAffinity() nvml.Return {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearCpuAffinity")
	ret0, _ := ret[0].(nvml.Return)
	return ret0
}

// ClearCpuAffinity indicates an expected call of ClearCpuAffinity.
func (mr *MockDeviceMockRecorder) ClearCpuAffinity() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearCpuAffinity", reflect.TypeOf((*MockDevice)(nil).ClearCpuAffinity))
}

// ClearEccErrorCounts mocks base method.
func (m *MockDevice) ClearEccErrorCounts(arg0 nvml.EccCounterType) nvml.Return {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearEccErrorCounts", arg0)
	ret0, _ := ret[0].(nvml.Return)
	return ret0
}

// ClearEccErrorCounts indicates an expected call of ClearEccErrorCounts.
func (mr *MockDeviceMockRecorder) ClearEccErrorCounts(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearEccErrorCounts", reflect.TypeOf((*MockDevice)(nil).ClearEccErrorCounts), arg0)
}

// ClearFieldValues mocks base method.
func (m *MockDevice) ClearFieldValues(arg0 []nvml.FieldValue) nvml.Return {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearFieldValues", arg0)
	ret0, _ := ret[0].(nvml.Return)
	return ret0
}

// ClearFieldValues indicates an expected call of ClearFieldValues.
func (mr *MockDeviceMockRecorder) ClearFieldValues(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearFieldValues", reflect.TypeOf((*MockDevice)(nil).ClearFieldValues), arg0)
}

// CreateGpuInstance mocks base method.
func (m *MockDevice) CreateGpuInstance(arg0 *nvml.GpuInstanceProfileInfo) (nvml.GpuInstance, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGpuInstance", arg0)
	ret0, _ := ret[0].(nvml.GpuInstance)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// CreateGpuInstance indicates an expected call of CreateGpuInstance.
func (mr *MockDeviceMockRecorder) CreateGpuInstance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGpuInstance", reflect.TypeOf((*MockDevice)(nil).CreateGpuInstance), arg0)
}

// CreateGpuInstanceWithPlacement mocks base method.
func (m *MockDevice) CreateGpuInstanceWithPlacement(arg0 *nvml.GpuInstanceProfileInfo, arg1 *nvml.GpuInstancePlacement) (nvml.GpuInstance, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGpuInstanceWithPlacement", arg0, arg1)
	ret0, _ := ret[0].(nvml.GpuInstance)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// CreateGpuInstanceWithPlacement indicates an expected call of CreateGpuInstanceWithPlacement.
func (mr *MockDeviceMockRecorder) CreateGpuInstanceWithPlacement(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGpuInstanceWithPlacement", reflect.TypeOf((*MockDevice)(nil).CreateGpuInstanceWithPlacement), arg0, arg1)
}

// FreezeNvLinkUtilizationCounter mocks base method.
func (m *MockDevice) FreezeNvLinkUtilizationCounter(arg0, arg1 int, arg2 nvml.EnableState) nvml.Return {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FreezeNvLinkUtilizationCounter", arg0, arg1, arg2)
	ret0, _ := ret[0].(nvml.Return)
	return ret0
}

// FreezeNvLinkUtilizationCounter indicates an expected call of FreezeNvLinkUtilizationCounter.
func (mr *MockDeviceMockRecorder) FreezeNvLinkUtilizationCounter(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FreezeNvLinkUtilizationCounter", reflect.TypeOf((*MockDevice)(nil).FreezeNvLinkUtilizationCounter), arg0, arg1, arg2)
}

// GetAPIRestriction mocks base method.
func (m *MockDevice) GetAPIRestriction(arg0 nvml.RestrictedAPI) (nvml.EnableState, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAPIRestriction", arg0)
	ret0, _ := ret[0].(nvml.EnableState)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetAPIRestriction indicates an expected call of GetAPIRestriction.
func (mr *MockDeviceMockRecorder) GetAPIRestriction(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIRestriction", reflect.TypeOf((*MockDevice)(nil).GetAPIRestriction), arg0)
}

// GetAccountingBufferSize mocks base method.
func (m *MockDevice) GetAccountingBufferSize() (int, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountingBufferSize")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetAccountingBufferSize indicates an expected call of GetAccountingBufferSize.
func (mr *MockDeviceMockRecorder) GetAccountingBufferSize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountingBufferSize", reflect.TypeOf((*MockDevice)(nil).GetAccountingBufferSize))
}

// GetAccountingMode mocks base method.
func (m *MockDevice) GetAccountingMode() (nvml.EnableState, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountingMode")
	ret0, _ := ret[0].(nvml.EnableState)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetAccountingMode indicates an expected call of GetAccountingMode.
func (mr *MockDeviceMockRecorder) GetAccountingMode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountingMode", reflect.TypeOf((*MockDevice)(nil).GetAccountingMode))
}

// GetAccountingPids mocks base method.
func (m *MockDevice) GetAccountingPids() ([]int, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountingPids")
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetAccountingPids indicates an expected call of GetAccountingPids.
func (mr *MockDeviceMockRecorder) GetAccountingPids() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountingPids", reflect.TypeOf((*MockDevice)(nil).GetAccountingPids))
}

// GetAccountingStats mocks base method.
func (m *MockDevice) GetAccountingStats(arg0 uint32) (nvml.AccountingStats, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountingStats", arg0)
	ret0, _ := ret[0].(nvml.AccountingStats)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetAccountingStats indicates an expected call of GetAccountingStats.
func (mr *MockDeviceMockRecorder) GetAccountingStats(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountingStats", reflect.TypeOf((*MockDevice)(nil).GetAccountingStats), arg0)
}

// GetActiveVgpus mocks base method.
func (m *MockDevice) GetActiveVgpus() ([]nvml.VgpuInstance, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveVgpus")
	ret0, _ := ret[0].([]nvml.VgpuInstance)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetActiveVgpus indicates an expected call of GetActiveVgpus.
func (mr *MockDeviceMockRecorder) GetActiveVgpus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveVgpus", reflect.TypeOf((*MockDevice)(nil).GetActiveVgpus))
}

// GetAdaptiveClockInfoStatus mocks base method.
func (m *MockDevice) GetAdaptiveClockInfoStatus() (uint32, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAdaptiveClockInfoStatus")
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetAdaptiveClockInfoStatus indicates an expected call of GetAdaptiveClockInfoStatus.
func (mr *MockDeviceMockRecorder) GetAdaptiveClockInfoStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdaptiveClockInfoStatus", reflect.TypeOf((*MockDevice)(nil).GetAdaptiveClockInfoStatus))
}

// GetApplicationsClock mocks base method.
func (m *MockDevice) GetApplicationsClock(arg0 nvml.ClockType) (uint32, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationsClock", arg0)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetApplicationsClock indicates an expected call of GetApplicationsClock.
func (mr *MockDeviceMockRecorder) GetApplicationsClock(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationsClock", reflect.TypeOf((*MockDevice)(nil).GetApplicationsClock), arg0)
}

// GetArchitecture mocks base method.
func (m *MockDevice) GetArchitecture() (nvml.DeviceArchitecture, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArchitecture")
	ret0, _ := ret[0].(nvml.DeviceArchitecture)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetArchitecture indicates an expected call of GetArchitecture.
func (mr *MockDeviceMockRecorder) GetArchitecture() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArchitecture", reflect.TypeOf((*MockDevice)(nil).GetArchitecture))
}

// GetAttributes mocks base method.
func (m *MockDevice) GetAttributes() (nvml.DeviceAttributes, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAttributes")
	ret0, _ := ret[0].(nvml.DeviceAttributes)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetAttributes indicates an expected call of GetAttributes.
func (mr *MockDeviceMockRecorder) GetAttributes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAttributes", reflect.TypeOf((*MockDevice)(nil).GetAttributes))
}

// GetAutoBoostedClocksEnabled mocks base method.
func (m *MockDevice) GetAutoBoostedClocksEnabled() (nvml.EnableState, nvml.EnableState, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAutoBoostedClocksEnabled")
	ret0, _ := ret[0].(nvml.EnableState)
	ret1, _ := ret[1].(nvml.EnableState)
	ret2, _ := ret[2].(nvml.Return)
	return ret0, ret1, ret2
}

// GetAutoBoostedClocksEnabled indicates an expected call of GetAutoBoostedClocksEnabled.
func (mr *MockDeviceMockRecorder) GetAutoBoostedClocksEnabled() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAutoBoostedClocksEnabled", reflect.TypeOf((*MockDevice)(nil).GetAutoBoostedClocksEnabled))
}

// GetBAR1MemoryInfo mocks base method.
func (m *MockDevice) GetBAR1MemoryInfo() (nvml.BAR1Memory, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBAR1MemoryInfo")
	ret0, _ := ret[0].(nvml.BAR1Memory)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetBAR1MemoryInfo indicates an expected call of GetBAR1MemoryInfo.
func (mr *MockDeviceMockRecorder) GetBAR1MemoryInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBAR1MemoryInfo", reflect.TypeOf((*MockDevice)(nil).GetBAR1MemoryInfo))
}

// GetBoardId mocks base method.
func (m *MockDevice) GetBoardId() (uint32, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBoardId")
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetBoardId indicates an expected call of GetBoardId.
func (mr *MockDeviceMockRecorder) GetBoardId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBoardId", reflect.TypeOf((*MockDevice)(nil).GetBoardId))
}

// GetBoardPartNumber mocks base method.
func (m *MockDevice) GetBoardPartNumber() (string, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBoardPartNumber")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetBoardPartNumber indicates an expected call of GetBoardPartNumber.
func (mr *MockDeviceMockRecorder) GetBoardPartNumber() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBoardPartNumber", reflect.TypeOf((*MockDevice)(nil).GetBoardPartNumber))
}

// GetBrand mocks base method.
func (m *MockDevice) GetBrand() (nvml.BrandType, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBrand")
	ret0, _ := ret[0].(nvml.BrandType)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetBrand indicates an expected call of GetBrand.
func (mr *MockDeviceMockRecorder) GetBrand() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBrand", reflect.TypeOf((*MockDevice)(nil).GetBrand))
}

// GetBridgeChipInfo mocks base method.
func (m *MockDevice) GetBridgeChipInfo() (nvml.BridgeChipHierarchy, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBridgeChipInfo")
	ret0, _ := ret[0].(nvml.BridgeChipHierarchy)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetBridgeChipInfo indicates an expected call of GetBridgeChipInfo.
func (mr *MockDeviceMockRecorder) GetBridgeChipInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBridgeChipInfo", reflect.TypeOf((*MockDevice)(nil).GetBridgeChipInfo))
}

// GetBusType mocks base method.
func (m *MockDevice) GetBusType() (nvml.BusType, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBusType")
	ret0, _ := ret[0].(nvml.BusType)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetBusType indicates an expected call of GetBusType.
func (mr *MockDeviceMockRecorder) GetBusType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBusType", reflect.TypeOf((*MockDevice)(nil).GetBusType))
}

// GetC2cModeInfoV mocks base method.
func (m *MockDevice) GetC2cModeInfoV() nvml.C2cModeInfoHandler {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetC2cModeInfoV")
	ret0, _ := ret[0].(nvml.C2cModeInfoHandler)
	return ret0
}

// GetC2cModeInfoV indicates an expected call of GetC2cModeInfoV.
func (mr *MockDeviceMockRecorder) GetC2cModeInfoV() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetC2cModeInfoV", reflect.TypeOf((*MockDevice)(nil).GetC2cModeInfoV))
}

// GetClkMonStatus mocks base method.
func (m *MockDevice) GetClkMonStatus() (nvml.ClkMonStatus, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClkMonStatus")
	ret0, _ := ret[0].(nvml.ClkMonStatus)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetClkMonStatus indicates an expected call of GetClkMonStatus.
func (mr *MockDeviceMockRecorder) GetClkMonStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClkMonStatus", reflect.TypeOf((*MockDevice)(nil).GetClkMonStatus))
}

// GetClock mocks base method.
func (m *MockDevice) GetClock(arg0 nvml.ClockType, arg1 nvml.ClockId) (uint32, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClock", arg0, arg1)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetClock indicates an expected call of GetClock.
func (mr *MockDeviceMockRecorder) GetClock(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClock", reflect.TypeOf((*MockDevice)(nil).GetClock), arg0, arg1)
}

// GetClockInfo mocks base method.
func (m *MockDevice) GetClockInfo(arg0 nvml.ClockType) (uint32, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClockInfo", arg0)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetClockInfo indicates an expected call of GetClockInfo.
func (mr *MockDeviceMockRecorder) GetClockInfo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClockInfo", reflect.TypeOf((*MockDevice)(nil).GetClockInfo), arg0)
}

// GetComputeInstanceId mocks base method.
func (m *MockDevice) GetComputeInstanceId() (int, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComputeInstanceId")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetComputeInstanceId indicates an expected call of GetComputeInstanceId.
func (mr *MockDeviceMockRecorder) GetComputeInstanceId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComputeInstanceId", reflect.TypeOf((*MockDevice)(nil).GetComputeInstanceId))
}

// GetComputeMode mocks base method.
func (m *MockDevice) GetComputeMode() (nvml.ComputeMode, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComputeMode")
	ret0, _ := ret[0].(nvml.ComputeMode)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetComputeMode indicates an expected call of GetComputeMode.
func (mr *MockDeviceMockRecorder) GetComputeMode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComputeMode", reflect.TypeOf((*MockDevice)(nil).GetComputeMode))
}

// GetComputeRunningProcesses mocks base method.
func (m *MockDevice) GetComputeRunningProcesses() ([]nvml.ProcessInfo, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComputeRunningProcesses")
	ret0, _ := ret[0].([]nvml.ProcessInfo)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetComputeRunningProcesses indicates an expected call of GetComputeRunningProcesses.
func (mr *MockDeviceMockRecorder) GetComputeRunningProcesses() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComputeRunningProcesses", reflect.TypeOf((*MockDevice)(nil).GetComputeRunningProcesses))
}

// GetConfComputeGpuAttestationReport mocks base method.
func (m *MockDevice) GetConfComputeGpuAttestationReport() (nvml.ConfComputeGpuAttestationReport, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfComputeGpuAttestationReport")
	ret0, _ := ret[0].(nvml.ConfComputeGpuAttestationReport)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetConfComputeGpuAttestationReport indicates an expected call of GetConfComputeGpuAttestationReport.
func (mr *MockDeviceMockRecorder) GetConfComputeGpuAttestationReport() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfComputeGpuAttestationReport", reflect.TypeOf((*MockDevice)(nil).GetConfComputeGpuAttestationReport))
}

// GetConfComputeGpuCertificate mocks base method.
func (m *MockDevice) GetConfComputeGpuCertificate() (nvml.ConfComputeGpuCertificate, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfComputeGpuCertificate")
	ret0, _ := ret[0].(nvml.ConfComputeGpuCertificate)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetConfComputeGpuCertificate indicates an expected call of GetConfComputeGpuCertificate.
func (mr *MockDeviceMockRecorder) GetConfComputeGpuCertificate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfComputeGpuCertificate", reflect.TypeOf((*MockDevice)(nil).GetConfComputeGpuCertificate))
}

// GetConfComputeMemSizeInfo mocks base method.
func (m *MockDevice) GetConfComputeMemSizeInfo() (nvml.ConfComputeMemSizeInfo, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfComputeMemSizeInfo")
	ret0, _ := ret[0].(nvml.ConfComputeMemSizeInfo)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetConfComputeMemSizeInfo indicates an expected call of GetConfComputeMemSizeInfo.
func (mr *MockDeviceMockRecorder) GetConfComputeMemSizeInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfComputeMemSizeInfo", reflect.TypeOf((*MockDevice)(nil).GetConfComputeMemSizeInfo))
}

// GetConfComputeProtectedMemoryUsage mocks base method.
func (m *MockDevice) GetConfComputeProtectedMemoryUsage() (nvml.Memory, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfComputeProtectedMemoryUsage")
	ret0, _ := ret[0].(nvml.Memory)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetConfComputeProtectedMemoryUsage indicates an expected call of GetConfComputeProtectedMemoryUsage.
func (mr *MockDeviceMockRecorder) GetConfComputeProtectedMemoryUsage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfComputeProtectedMemoryUsage", reflect.TypeOf((*MockDevice)(nil).GetConfComputeProtectedMemoryUsage))
}

// GetCpuAffinity mocks base method.
func (m *MockDevice) GetCpuAffinity(arg0 int) ([]uint, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCpuAffinity", arg0)
	ret0, _ := ret[0].([]uint)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetCpuAffinity indicates an expected call of GetCpuAffinity.
func (mr *MockDeviceMockRecorder) GetCpuAffinity(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCpuAffinity", reflect.TypeOf((*MockDevice)(nil).GetCpuAffinity), arg0)
}

// GetCpuAffinityWithinScope mocks base method.
func (m *MockDevice) GetCpuAffinityWithinScope(arg0 int, arg1 nvml.AffinityScope) ([]uint, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCpuAffinityWithinScope", arg0, arg1)
	ret0, _ := ret[0].([]uint)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetCpuAffinityWithinScope indicates an expected call of GetCpuAffinityWithinScope.
func (mr *MockDeviceMockRecorder) GetCpuAffinityWithinScope(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCpuAffinityWithinScope", reflect.TypeOf((*MockDevice)(nil).GetCpuAffinityWithinScope), arg0, arg1)
}

// GetCreatableVgpus mocks base method.
func (m *MockDevice) GetCreatableVgpus() ([]nvml.VgpuTypeId, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCreatableVgpus")
	ret0, _ := ret[0].([]nvml.VgpuTypeId)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetCreatableVgpus indicates an expected call of GetCreatableVgpus.
func (mr *MockDeviceMockRecorder) GetCreatableVgpus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCreatableVgpus", reflect.TypeOf((*MockDevice)(nil).GetCreatableVgpus))
}

// GetCudaComputeCapability mocks base method.
func (m *MockDevice) GetCudaComputeCapability() (int, int, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCudaComputeCapability")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(nvml.Return)
	return ret0, ret1, ret2
}

// GetCudaComputeCapability indicates an expected call of GetCudaComputeCapability.
func (mr *MockDeviceMockRecorder) GetCudaComputeCapability() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCudaComputeCapability", reflect.TypeOf((*MockDevice)(nil).GetCudaComputeCapability))
}

// GetCurrPcieLinkGeneration mocks base method.
func (m *MockDevice) GetCurrPcieLinkGeneration() (int, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrPcieLinkGeneration")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetCurrPcieLinkGeneration indicates an expected call of GetCurrPcieLinkGeneration.
func (mr *MockDeviceMockRecorder) GetCurrPcieLinkGeneration() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrPcieLinkGeneration", reflect.TypeOf((*MockDevice)(nil).GetCurrPcieLinkGeneration))
}

// GetCurrPcieLinkWidth mocks base method.
func (m *MockDevice) GetCurrPcieLinkWidth() (int, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrPcieLinkWidth")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetCurrPcieLinkWidth indicates an expected call of GetCurrPcieLinkWidth.
func (mr *MockDeviceMockRecorder) GetCurrPcieLinkWidth() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrPcieLinkWidth", reflect.TypeOf((*MockDevice)(nil).GetCurrPcieLinkWidth))
}

// GetCurrentClocksEventReasons mocks base method.
func (m *MockDevice) GetCurrentClocksEventReasons() (uint64, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentClocksEventReasons")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetCurrentClocksEventReasons indicates an expected call of GetCurrentClocksEventReasons.
func (mr *MockDeviceMockRecorder) GetCurrentClocksEventReasons() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentClocksEventReasons", reflect.TypeOf((*MockDevice)(nil).GetCurrentClocksEventReasons))
}

// GetCurrentClocksThrottleReasons mocks base method.
func (m *MockDevice) GetCurrentClocksThrottleReasons() (uint64, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentClocksThrottleReasons")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetCurrentClocksThrottleReasons indicates an expected call of GetCurrentClocksThrottleReasons.
func (mr *MockDeviceMockRecorder) GetCurrentClocksThrottleReasons() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentClocksThrottleReasons", reflect.TypeOf((*MockDevice)(nil).GetCurrentClocksThrottleReasons))
}

// GetDecoderUtilization mocks base method.
func (m *MockDevice) GetDecoderUtilization() (uint32, uint32, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDecoderUtilization")
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(uint32)
	ret2, _ := ret[2].(nvml.Return)
	return ret0, ret1, ret2
}

// GetDecoderUtilization indicates an expected call of GetDecoderUtilization.
func (mr *MockDeviceMockRecorder) GetDecoderUtilization() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDecoderUtilization", reflect.TypeOf((*MockDevice)(nil).GetDecoderUtilization))
}

// GetDefaultApplicationsClock mocks base method.
func (m *MockDevice) GetDefaultApplicationsClock(arg0 nvml.ClockType) (uint32, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDefaultApplicationsClock", arg0)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetDefaultApplicationsClock indicates an expected call of GetDefaultApplicationsClock.
func (mr *MockDeviceMockRecorder) GetDefaultApplicationsClock(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDefaultApplicationsClock", reflect.TypeOf((*MockDevice)(nil).GetDefaultApplicationsClock), arg0)
}

// GetDefaultEccMode mocks base method.
func (m *MockDevice) GetDefaultEccMode() (nvml.EnableState, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDefaultEccMode")
	ret0, _ := ret[0].(nvml.EnableState)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetDefaultEccMode indicates an expected call of GetDefaultEccMode.
func (mr *MockDeviceMockRecorder) GetDefaultEccMode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDefaultEccMode", reflect.TypeOf((*MockDevice)(nil).GetDefaultEccMode))
}

// GetDetailedEccErrors mocks base method.
func (m *MockDevice) GetDetailedEccErrors(arg0 nvml.MemoryErrorType, arg1 nvml.EccCounterType) (nvml.EccErrorCounts, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDetailedEccErrors", arg0, arg1)
	ret0, _ := ret[0].(nvml.EccErrorCounts)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetDetailedEccErrors indicates an expected call of GetDetailedEccErrors.
func (mr *MockDeviceMockRecorder) GetDetailedEccErrors(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDetailedEccErrors", reflect.TypeOf((*MockDevice)(nil).GetDetailedEccErrors), arg0, arg1)
}

// GetDeviceHandleFromMigDeviceHandle mocks base method.
func (m *MockDevice) GetDeviceHandleFromMigDeviceHandle() (nvml.Device, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceHandleFromMigDeviceHandle")
	ret0, _ := ret[0].(nvml.Device)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetDeviceHandleFromMigDeviceHandle indicates an expected call of GetDeviceHandleFromMigDeviceHandle.
func (mr *MockDeviceMockRecorder) GetDeviceHandleFromMigDeviceHandle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceHandleFromMigDeviceHandle", reflect.TypeOf((*MockDevice)(nil).GetDeviceHandleFromMigDeviceHandle))
}

// GetDisplayActive mocks base method.
func (m *MockDevice) GetDisplayActive() (nvml.EnableState, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDisplayActive")
	ret0, _ := ret[0].(nvml.EnableState)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetDisplayActive indicates an expected call of GetDisplayActive.
func (mr *MockDeviceMockRecorder) GetDisplayActive() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDisplayActive", reflect.TypeOf((*MockDevice)(nil).GetDisplayActive))
}

// GetDisplayMode mocks base method.
func (m *MockDevice) GetDisplayMode() (nvml.EnableState, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDisplayMode")
	ret0, _ := ret[0].(nvml.EnableState)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetDisplayMode indicates an expected call of GetDisplayMode.
func (mr *MockDeviceMockRecorder) GetDisplayMode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDisplayMode", reflect.TypeOf((*MockDevice)(nil).GetDisplayMode))
}

// GetDriverModel mocks base method.
func (m *MockDevice) GetDriverModel() (nvml.DriverModel, nvml.DriverModel, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDriverModel")
	ret0, _ := ret[0].(nvml.DriverModel)
	ret1, _ := ret[1].(nvml.DriverModel)
	ret2, _ := ret[2].(nvml.Return)
	return ret0, ret1, ret2
}

// GetDriverModel indicates an expected call of GetDriverModel.
func (mr *MockDeviceMockRecorder) GetDriverModel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDriverModel", reflect.TypeOf((*MockDevice)(nil).GetDriverModel))
}

// GetDynamicPstatesInfo mocks base method.
func (m *MockDevice) GetDynamicPstatesInfo() (nvml.GpuDynamicPstatesInfo, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDynamicPstatesInfo")
	ret0, _ := ret[0].(nvml.GpuDynamicPstatesInfo)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetDynamicPstatesInfo indicates an expected call of GetDynamicPstatesInfo.
func (mr *MockDeviceMockRecorder) GetDynamicPstatesInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDynamicPstatesInfo", reflect.TypeOf((*MockDevice)(nil).GetDynamicPstatesInfo))
}

// GetEccMode mocks base method.
func (m *MockDevice) GetEccMode() (nvml.EnableState, nvml.EnableState, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEccMode")
	ret0, _ := ret[0].(nvml.EnableState)
	ret1, _ := ret[1].(nvml.EnableState)
	ret2, _ := ret[2].(nvml.Return)
	return ret0, ret1, ret2
}

// GetEccMode indicates an expected call of GetEccMode.
func (mr *MockDeviceMockRecorder) GetEccMode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEccMode", reflect.TypeOf((*MockDevice)(nil).GetEccMode))
}

// GetEncoderCapacity mocks base method.
func (m *MockDevice) GetEncoderCapacity(arg0 nvml.EncoderType) (int, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEncoderCapacity", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetEncoderCapacity indicates an expected call of GetEncoderCapacity.
func (mr *MockDeviceMockRecorder) GetEncoderCapacity(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEncoderCapacity", reflect.TypeOf((*MockDevice)(nil).GetEncoderCapacity), arg0)
}

// GetEncoderSessions mocks base method.
func (m *MockDevice) GetEncoderSessions() ([]nvml.EncoderSessionInfo, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEncoderSessions")
	ret0, _ := ret[0].([]nvml.EncoderSessionInfo)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetEncoderSessions indicates an expected call of GetEncoderSessions.
func (mr *MockDeviceMockRecorder) GetEncoderSessions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEncoderSessions", reflect.TypeOf((*MockDevice)(nil).GetEncoderSessions))
}

// GetEncoderStats mocks base method.
func (m *MockDevice) GetEncoderStats() (int, uint32, uint32, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEncoderStats")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(uint32)
	ret2, _ := ret[2].(uint32)
	ret3, _ := ret[3].(nvml.Return)
	return ret0, ret1, ret2, ret3
}

// GetEncoderStats indicates an expected call of GetEncoderStats.
func (mr *MockDeviceMockRecorder) GetEncoderStats() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEncoderStats", reflect.TypeOf((*MockDevice)(nil).GetEncoderStats))
}

// GetEncoderUtilization mocks base method.
func (m *MockDevice) GetEncoderUtilization() (uint32, uint32, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEncoderUtilization")
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(uint32)
	ret2, _ := ret[2].(nvml.Return)
	return ret0, ret1, ret2
}

// GetEncoderUtilization indicates an expected call of GetEncoderUtilization.
func (mr *MockDeviceMockRecorder) GetEncoderUtilization() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEncoderUtilization", reflect.TypeOf((*MockDevice)(nil).GetEncoderUtilization))
}

// GetEnforcedPowerLimit mocks base method.
func (m *MockDevice) GetEnforcedPowerLimit() (uint32, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnforcedPowerLimit")
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetEnforcedPowerLimit indicates an expected call of GetEnforcedPowerLimit.
func (mr *MockDeviceMockRecorder) GetEnforcedPowerLimit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnforcedPowerLimit", reflect.TypeOf((*MockDevice)(nil).GetEnforcedPowerLimit))
}

// GetFBCSessions mocks base method.
func (m *MockDevice) GetFBCSessions() ([]nvml.FBCSessionInfo, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFBCSessions")
	ret0, _ := ret[0].([]nvml.FBCSessionInfo)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetFBCSessions indicates an expected call of GetFBCSessions.
func (mr *MockDeviceMockRecorder) GetFBCSessions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFBCSessions", reflect.TypeOf((*MockDevice)(nil).GetFBCSessions))
}

// GetFBCStats mocks base method.
func (m *MockDevice) GetFBCStats() (nvml.FBCStats, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFBCStats")
	ret0, _ := ret[0].(nvml.FBCStats)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetFBCStats indicates an expected call of GetFBCStats.
func (mr *MockDeviceMockRecorder) GetFBCStats() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFBCStats", reflect.TypeOf((*MockDevice)(nil).GetFBCStats))
}

// GetFanControlPolicy_v2 mocks base method.
func (m *MockDevice) GetFanControlPolicy_v2(arg0 int) (nvml.FanControlPolicy, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFanControlPolicy_v2", arg0)
	ret0, _ := ret[0].(nvml.FanControlPolicy)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetFanControlPolicy_v2 indicates an expected call of GetFanControlPolicy_v2.
func (mr *MockDeviceMockRecorder) GetFanControlPolicy_v2(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFanControlPolicy_v2", reflect.TypeOf((*MockDevice)(nil).GetFanControlPolicy_v2), arg0)
}

// GetFanSpeed mocks base method.
func (m *MockDevice) GetFanSpeed() (uint32, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFanSpeed")
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetFanSpeed indicates an expected call of GetFanSpeed.
func (mr *MockDeviceMockRecorder) GetFanSpeed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFanSpeed", reflect.TypeOf((*MockDevice)(nil).GetFanSpeed))
}

// GetFanSpeed_v2 mocks base method.
func (m *MockDevice) GetFanSpeed_v2(arg0 int) (uint32, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFanSpeed_v2", arg0)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetFanSpeed_v2 indicates an expected call of GetFanSpeed_v2.
func (mr *MockDeviceMockRecorder) GetFanSpeed_v2(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFanSpeed_v2", reflect.TypeOf((*MockDevice)(nil).GetFanSpeed_v2), arg0)
}

// GetFieldValues mocks base method.
func (m *MockDevice) GetFieldValues(arg0 []nvml.FieldValue) nvml.Return {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFieldValues", arg0)
	ret0, _ := ret[0].(nvml.Return)
	return ret0
}

// GetFieldValues indicates an expected call of GetFieldValues.
func (mr *MockDeviceMockRecorder) GetFieldValues(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFieldValues", reflect.TypeOf((*MockDevice)(nil).GetFieldValues), arg0)
}

// GetGpcClkMinMaxVfOffset mocks base method.
func (m *MockDevice) GetGpcClkMinMaxVfOffset() (int, int, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGpcClkMinMaxVfOffset")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(nvml.Return)
	return ret0, ret1, ret2
}

// GetGpcClkMinMaxVfOffset indicates an expected call of GetGpcClkMinMaxVfOffset.
func (mr *MockDeviceMockRecorder) GetGpcClkMinMaxVfOffset() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGpcClkMinMaxVfOffset", reflect.TypeOf((*MockDevice)(nil).GetGpcClkMinMaxVfOffset))
}

// GetGpcClkVfOffset mocks base method.
func (m *MockDevice) GetGpcClkVfOffset() (int, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGpcClkVfOffset")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetGpcClkVfOffset indicates an expected call of GetGpcClkVfOffset.
func (mr *MockDeviceMockRecorder) GetGpcClkVfOffset() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGpcClkVfOffset", reflect.TypeOf((*MockDevice)(nil).GetGpcClkVfOffset))
}

// GetGpuFabricInfo mocks base method.
func (m *MockDevice) GetGpuFabricInfo() (nvml.GpuFabricInfo, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGpuFabricInfo")
	ret0, _ := ret[0].(nvml.GpuFabricInfo)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetGpuFabricInfo indicates an expected call of GetGpuFabricInfo.
func (mr *MockDeviceMockRecorder) GetGpuFabricInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGpuFabricInfo", reflect.TypeOf((*MockDevice)(nil).GetGpuFabricInfo))
}

// GetGpuFabricInfoV mocks base method.
func (m *MockDevice) GetGpuFabricInfoV() nvml.GpuFabricInfoHandler {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGpuFabricInfoV")
	ret0, _ := ret[0].(nvml.GpuFabricInfoHandler)
	return ret0
}

// GetGpuFabricInfoV indicates an expected call of GetGpuFabricInfoV.
func (mr *MockDeviceMockRecorder) GetGpuFabricInfoV() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGpuFabricInfoV", reflect.TypeOf((*MockDevice)(nil).GetGpuFabricInfoV))
}

// GetGpuInstanceById mocks base method.
func (m *MockDevice) GetGpuInstanceById(arg0 int) (nvml.GpuInstance, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGpuInstanceById", arg0)
	ret0, _ := ret[0].(nvml.GpuInstance)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetGpuInstanceById indicates an expected call of GetGpuInstanceById.
func (mr *MockDeviceMockRecorder) GetGpuInstanceById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGpuInstanceById", reflect.TypeOf((*MockDevice)(nil).GetGpuInstanceById), arg0)
}

// GetGpuInstanceId mocks base method.
func (m *MockDevice) GetGpuInstanceId() (int, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGpuInstanceId")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetGpuInstanceId indicates an expected call of GetGpuInstanceId.
func (mr *MockDeviceMockRecorder) GetGpuInstanceId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGpuInstanceId", reflect.TypeOf((*MockDevice)(nil).GetGpuInstanceId))
}

// GetGpuInstancePossiblePlacements mocks base method.
func (m *MockDevice) GetGpuInstancePossiblePlacements(arg0 *nvml.GpuInstanceProfileInfo) ([]nvml.GpuInstancePlacement, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGpuInstancePossiblePlacements", arg0)
	ret0, _ := ret[0].([]nvml.GpuInstancePlacement)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetGpuInstancePossiblePlacements indicates an expected call of GetGpuInstancePossiblePlacements.
func (mr *MockDeviceMockRecorder) GetGpuInstancePossiblePlacements(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGpuInstancePossiblePlacements", reflect.TypeOf((*MockDevice)(nil).GetGpuInstancePossiblePlacements), arg0)
}

// GetGpuInstanceProfileInfo mocks base method.
func (m *MockDevice) GetGpuInstanceProfileInfo(arg0 int) (nvml.GpuInstanceProfileInfo, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGpuInstanceProfileInfo", arg0)
	ret0, _ := ret[0].(nvml.GpuInstanceProfileInfo)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetGpuInstanceProfileInfo indicates an expected call of GetGpuInstanceProfileInfo.
func (mr *MockDeviceMockRecorder) GetGpuInstanceProfileInfo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGpuInstanceProfileInfo", reflect.TypeOf((*MockDevice)(nil).GetGpuInstanceProfileInfo), arg0)
}

// GetGpuInstanceProfileInfoV mocks base method.
func (m *MockDevice) GetGpuInstanceProfileInfoV(arg0 int) nvml.GpuInstanceProfileInfoHandler {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGpuInstanceProfileInfoV", arg0)
	ret0, _ := ret[0].(nvml.GpuInstanceProfileInfoHandler)
	return ret0
}

// GetGpuInstanceProfileInfoV indicates an expected call of GetGpuInstanceProfileInfoV.
func (mr *MockDeviceMockRecorder) GetGpuInstanceProfileInfoV(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGpuInstanceProfileInfoV", reflect.TypeOf((*MockDevice)(nil).GetGpuInstanceProfileInfoV), arg0)
}

// GetGpuInstanceRemainingCapacity mocks base method.
func (m *MockDevice) GetGpuInstanceRemainingCapacity(arg0 *nvml.GpuInstanceProfileInfo) (int, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGpuInstanceRemainingCapacity", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetGpuInstanceRemainingCapacity indicates an expected call of GetGpuInstanceRemainingCapacity.
func (mr *MockDeviceMockRecorder) GetGpuInstanceRemainingCapacity(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGpuInstanceRemainingCapacity", reflect.TypeOf((*MockDevice)(nil).GetGpuInstanceRemainingCapacity), arg0)
}

// GetGpuInstances mocks base method.
func (m *MockDevice) GetGpuInstances(arg0 *nvml.GpuInstanceProfileInfo) ([]nvml.GpuInstance, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGpuInstances", arg0)
	ret0, _ := ret[0].([]nvml.GpuInstance)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetGpuInstances indicates an expected call of GetGpuInstances.
func (mr *MockDeviceMockRecorder) GetGpuInstances(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGpuInstances", reflect.TypeOf((*MockDevice)(nil).GetGpuInstances), arg0)
}

// GetGpuMaxPcieLinkGeneration mocks base method.
func (m *MockDevice) GetGpuMaxPcieLinkGeneration() (int, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGpuMaxPcieLinkGeneration")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetGpuMaxPcieLinkGeneration indicates an expected call of GetGpuMaxPcieLinkGeneration.
func (mr *MockDeviceMockRecorder) GetGpuMaxPcieLinkGeneration() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGpuMaxPcieLinkGeneration", reflect.TypeOf((*MockDevice)(nil).GetGpuMaxPcieLinkGeneration))
}

// GetGpuOperationMode mocks base method.
func (m *MockDevice) GetGpuOperationMode() (nvml.GpuOperationMode, nvml.GpuOperationMode, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGpuOperationMode")
	ret0, _ := ret[0].(nvml.GpuOperationMode)
	ret1, _ := ret[1].(nvml.GpuOperationMode)
	ret2, _ := ret[2].(nvml.Return)
	return ret0, ret1, ret2
}

// GetGpuOperationMode indicates an expected call of GetGpuOperationMode.
func (mr *MockDeviceMockRecorder) GetGpuOperationMode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGpuOperationMode", reflect.TypeOf((*MockDevice)(nil).GetGpuOperationMode))
}

// GetGraphicsRunningProcesses mocks base method.
func (m *MockDevice) GetGraphicsRunningProcesses() ([]nvml.ProcessInfo, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGraphicsRunningProcesses")
	ret0, _ := ret[0].([]nvml.ProcessInfo)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetGraphicsRunningProcesses indicates an expected call of GetGraphicsRunningProcesses.
func (mr *MockDeviceMockRecorder) GetGraphicsRunningProcesses() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGraphicsRunningProcesses", reflect.TypeOf((*MockDevice)(nil).GetGraphicsRunningProcesses))
}

// GetGridLicensableFeatures mocks base method.
func (m *MockDevice) GetGridLicensableFeatures() (nvml.GridLicensableFeatures, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGridLicensableFeatures")
	ret0, _ := ret[0].(nvml.GridLicensableFeatures)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetGridLicensableFeatures indicates an expected call of GetGridLicensableFeatures.
func (mr *MockDeviceMockRecorder) GetGridLicensableFeatures() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGridLicensableFeatures", reflect.TypeOf((*MockDevice)(nil).GetGridLicensableFeatures))
}

// GetGspFirmwareMode mocks base method.
func (m *MockDevice) GetGspFirmwareMode() (bool, bool, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGspFirmwareMode")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(nvml.Return)
	return ret0, ret1, ret2
}

// GetGspFirmwareMode indicates an expected call of GetGspFirmwareMode.
func (mr *MockDeviceMockRecorder) GetGspFirmwareMode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGspFirmwareMode", reflect.TypeOf((*MockDevice)(nil).GetGspFirmwareMode))
}

// GetGspFirmwareVersion mocks base method.
func (m *MockDevice) GetGspFirmwareVersion() (string, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGspFirmwareVersion")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetGspFirmwareVersion indicates an expected call of GetGspFirmwareVersion.
func (mr *MockDeviceMockRecorder) GetGspFirmwareVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGspFirmwareVersion", reflect.TypeOf((*MockDevice)(nil).GetGspFirmwareVersion))
}

// GetHostVgpuMode mocks base method.
func (m *MockDevice) GetHostVgpuMode() (nvml.HostVgpuMode, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHostVgpuMode")
	ret0, _ := ret[0].(nvml.HostVgpuMode)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetHostVgpuMode indicates an expected call of GetHostVgpuMode.
func (mr *MockDeviceMockRecorder) GetHostVgpuMode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHostVgpuMode", reflect.TypeOf((*MockDevice)(nil).GetHostVgpuMode))
}

// GetIndex mocks base method.
func (m *MockDevice) GetIndex() (int, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIndex")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetIndex indicates an expected call of GetIndex.
func (mr *MockDeviceMockRecorder) GetIndex() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIndex", reflect.TypeOf((*MockDevice)(nil).GetIndex))
}

// GetInforomConfigurationChecksum mocks base method.
func (m *MockDevice) GetInforomConfigurationChecksum() (uint32, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInforomConfigurationChecksum")
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetInforomConfigurationChecksum indicates an expected call of GetInforomConfigurationChecksum.
func (mr *MockDeviceMockRecorder) GetInforomConfigurationChecksum() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInforomConfigurationChecksum", reflect.TypeOf((*MockDevice)(nil).GetInforomConfigurationChecksum))
}

// GetInforomImageVersion mocks base method.
func (m *MockDevice) GetInforomImageVersion() (string, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInforomImageVersion")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetInforomImageVersion indicates an expected call of GetInforomImageVersion.
func (mr *MockDeviceMockRecorder) GetInforomImageVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInforomImageVersion", reflect.TypeOf((*MockDevice)(nil).GetInforomImageVersion))
}

// GetInforomVersion mocks base method.
func (m *MockDevice) GetInforomVersion(arg0 nvml.InforomObject) (string, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInforomVersion", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetInforomVersion indicates an expected call of GetInforomVersion.
func (mr *MockDeviceMockRecorder) GetInforomVersion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInforomVersion", reflect.TypeOf((*MockDevice)(nil).GetInforomVersion), arg0)
}

// GetIrqNum mocks base method.
func (m *MockDevice) GetIrqNum() (int, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIrqNum")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetIrqNum indicates an expected call of GetIrqNum.
func (mr *MockDeviceMockRecorder) GetIrqNum() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIrqNum", reflect.TypeOf((*MockDevice)(nil).GetIrqNum))
}

// GetJpgUtilization mocks base method.
func (m *MockDevice) GetJpgUtilization() (uint32, uint32, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJpgUtilization")
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(uint32)
	ret2, _ := ret[2].(nvml.Return)
	return ret0, ret1, ret2
}

// GetJpgUtilization indicates an expected call of GetJpgUtilization.
func (mr *MockDeviceMockRecorder) GetJpgUtilization() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJpgUtilization", reflect.TypeOf((*MockDevice)(nil).GetJpgUtilization))
}

// GetLastBBXFlushTime mocks base method.
func (m *MockDevice) GetLastBBXFlushTime() (uint64, uint, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastBBXFlushTime")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(uint)
	ret2, _ := ret[2].(nvml.Return)
	return ret0, ret1, ret2
}

// GetLastBBXFlushTime indicates an expected call of GetLastBBXFlushTime.
func (mr *MockDeviceMockRecorder) GetLastBBXFlushTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastBBXFlushTime", reflect.TypeOf((*MockDevice)(nil).GetLastBBXFlushTime))
}

// GetMPSComputeRunningProcesses mocks base method.
func (m *MockDevice) GetMPSComputeRunningProcesses() ([]nvml.ProcessInfo, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMPSComputeRunningProcesses")
	ret0, _ := ret[0].([]nvml.ProcessInfo)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetMPSComputeRunningProcesses indicates an expected call of GetMPSComputeRunningProcesses.
func (mr *MockDeviceMockRecorder) GetMPSComputeRunningProcesses() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMPSComputeRunningProcesses", reflect.TypeOf((*MockDevice)(nil).GetMPSComputeRunningProcesses))
}

// GetMaxClockInfo mocks base method.
func (m *MockDevice) GetMaxClockInfo(arg0 nvml.ClockType) (uint32, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMaxClockInfo", arg0)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetMaxClockInfo indicates an expected call of GetMaxClockInfo.
func (mr *MockDeviceMockRecorder) GetMaxClockInfo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMaxClockInfo", reflect.TypeOf((*MockDevice)(nil).GetMaxClockInfo), arg0)
}

// GetMaxCustomerBoostClock mocks base method.
func (m *MockDevice) GetMaxCustomerBoostClock(arg0 nvml.ClockType) (uint32, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMaxCustomerBoostClock", arg0)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetMaxCustomerBoostClock indicates an expected call of GetMaxCustomerBoostClock.
func (mr *MockDeviceMockRecorder) GetMaxCustomerBoostClock(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMaxCustomerBoostClock", reflect.TypeOf((*MockDevice)(nil).GetMaxCustomerBoostClock), arg0)
}

// GetMaxMigDeviceCount mocks base method.
func (m *MockDevice) GetMaxMigDeviceCount() (int, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMaxMigDeviceCount")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetMaxMigDeviceCount indicates an expected call of GetMaxMigDeviceCount.
func (mr *MockDeviceMockRecorder) GetMaxMigDeviceCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMaxMigDeviceCount", reflect.TypeOf((*MockDevice)(nil).GetMaxMigDeviceCount))
}

// GetMaxPcieLinkGeneration mocks base method.
func (m *MockDevice) GetMaxPcieLinkGeneration() (int, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMaxPcieLinkGeneration")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetMaxPcieLinkGeneration indicates an expected call of GetMaxPcieLinkGeneration.
func (mr *MockDeviceMockRecorder) GetMaxPcieLinkGeneration() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMaxPcieLinkGeneration", reflect.TypeOf((*MockDevice)(nil).GetMaxPcieLinkGeneration))
}

// GetMaxPcieLinkWidth mocks base method.
func (m *MockDevice) GetMaxPcieLinkWidth() (int, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMaxPcieLinkWidth")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetMaxPcieLinkWidth indicates an expected call of GetMaxPcieLinkWidth.
func (mr *MockDeviceMockRecorder) GetMaxPcieLinkWidth() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMaxPcieLinkWidth", reflect.TypeOf((*MockDevice)(nil).GetMaxPcieLinkWidth))
}

// GetMemClkMinMaxVfOffset mocks base method.
func (m *MockDevice) GetMemClkMinMaxVfOffset() (int, int, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMemClkMinMaxVfOffset")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(nvml.Return)
	return ret0, ret1, ret2
}

// GetMemClkMinMaxVfOffset indicates an expected call of GetMemClkMinMaxVfOffset.
func (mr *MockDeviceMockRecorder) GetMemClkMinMaxVfOffset() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMemClkMinMaxVfOffset", reflect.TypeOf((*MockDevice)(nil).GetMemClkMinMaxVfOffset))
}

// GetMemClkVfOffset mocks base method.
func (m *MockDevice) GetMemClkVfOffset() (int, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMemClkVfOffset")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetMemClkVfOffset indicates an expected call of GetMemClkVfOffset.
func (mr *MockDeviceMockRecorder) GetMemClkVfOffset() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMemClkVfOffset", reflect.TypeOf((*MockDevice)(nil).GetMemClkVfOffset))
}

// GetMemoryAffinity mocks base method.
func (m *MockDevice) GetMemoryAffinity(arg0 int, arg1 nvml.AffinityScope) ([]uint, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMemoryAffinity", arg0, arg1)
	ret0, _ := ret[0].([]uint)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetMemoryAffinity indicates an expected call of GetMemoryAffinity.
func (mr *MockDeviceMockRecorder) GetMemoryAffinity(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMemoryAffinity", reflect.TypeOf((*MockDevice)(nil).GetMemoryAffinity), arg0, arg1)
}

// GetMemoryBusWidth mocks base method.
func (m *MockDevice) GetMemoryBusWidth() (uint32, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMemoryBusWidth")
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetMemoryBusWidth indicates an expected call of GetMemoryBusWidth.
func (mr *MockDeviceMockRecorder) GetMemoryBusWidth() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMemoryBusWidth", reflect.TypeOf((*MockDevice)(nil).GetMemoryBusWidth))
}

// GetMemoryErrorCounter mocks base method.
func (m *MockDevice) GetMemoryErrorCounter(arg0 nvml.MemoryErrorType, arg1 nvml.EccCounterType, arg2 nvml.MemoryLocation) (uint64, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMemoryErrorCounter", arg0, arg1, arg2)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetMemoryErrorCounter indicates an expected call of GetMemoryErrorCounter.
func (mr *MockDeviceMockRecorder) GetMemoryErrorCounter(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMemoryErrorCounter", reflect.TypeOf((*MockDevice)(nil).GetMemoryErrorCounter), arg0, arg1, arg2)
}

// GetMemoryInfo mocks base method.
func (m *MockDevice) GetMemoryInfo() (nvml.Memory, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMemoryInfo")
	ret0, _ := ret[0].(nvml.Memory)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetMemoryInfo indicates an expected call of GetMemoryInfo.
func (mr *MockDeviceMockRecorder) GetMemoryInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMemoryInfo", reflect.TypeOf((*MockDevice)(nil).GetMemoryInfo))
}

// GetMemoryInfo_v2 mocks base method.
func (m *MockDevice) GetMemoryInfo_v2() (nvml.Memory_v2, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMemoryInfo_v2")
	ret0, _ := ret[0].(nvml.Memory_v2)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetMemoryInfo_v2 indicates an expected call of GetMemoryInfo_v2.
func (mr *MockDeviceMockRecorder) GetMemoryInfo_v2() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMemoryInfo_v2", reflect.TypeOf((*MockDevice)(nil).GetMemoryInfo_v2))
}

// GetMigDeviceHandleByIndex mocks base method.
func (m *MockDevice) GetMigDeviceHandleByIndex(arg0 int) (nvml.Device, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMigDeviceHandleByIndex", arg0)
	ret0, _ := ret[0].(nvml.Device)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetMigDeviceHandleByIndex indicates an expected call of GetMigDeviceHandleByIndex.
func (mr *MockDeviceMockRecorder) GetMigDeviceHandleByIndex(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMigDeviceHandleByIndex", reflect.TypeOf((*MockDevice)(nil).GetMigDeviceHandleByIndex), arg0)
}

// GetMigMode mocks base method.
func (m *MockDevice) GetMigMode() (int, int, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMigMode")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(nvml.Return)
	return ret0, ret1, ret2
}

// GetMigMode indicates an expected call of GetMigMode.
func (mr *MockDeviceMockRecorder) GetMigMode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMigMode", reflect.TypeOf((*MockDevice)(nil).GetMigMode))
}

// GetMinMaxClockOfPState mocks base method.
func (m *MockDevice) GetMinMaxClockOfPState(arg0 nvml.ClockType, arg1 nvml.Pstates) (uint32, uint32, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMinMaxClockOfPState", arg0, arg1)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(uint32)
	ret2, _ := ret[2].(nvml.Return)
	return ret0, ret1, ret2
}

// GetMinMaxClockOfPState indicates an expected call of GetMinMaxClockOfPState.
func (mr *MockDeviceMockRecorder) GetMinMaxClockOfPState(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMinMaxClockOfPState", reflect.TypeOf((*MockDevice)(nil).GetMinMaxClockOfPState), arg0, arg1)
}

// GetMinMaxFanSpeed mocks base method.
func (m *MockDevice) GetMinMaxFanSpeed() (int, int, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMinMaxFanSpeed")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(nvml.Return)
	return ret0, ret1, ret2
}

// GetMinMaxFanSpeed indicates an expected call of GetMinMaxFanSpeed.
func (mr *MockDeviceMockRecorder) GetMinMaxFanSpeed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMinMaxFanSpeed", reflect.TypeOf((*MockDevice)(nil).GetMinMaxFanSpeed))
}

// GetMinorNumber mocks base method.
func (m *MockDevice) GetMinorNumber() (int, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMinorNumber")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetMinorNumber indicates an expected call of GetMinorNumber.
func (mr *MockDeviceMockRecorder) GetMinorNumber() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMinorNumber", reflect.TypeOf((*MockDevice)(nil).GetMinorNumber))
}

// GetModuleId mocks base method.
func (m *MockDevice) GetModuleId() (int, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModuleId")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetModuleId indicates an expected call of GetModuleId.
func (mr *MockDeviceMockRecorder) GetModuleId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModuleId", reflect.TypeOf((*MockDevice)(nil).GetModuleId))
}

// GetMultiGpuBoard mocks base method.
func (m *MockDevice) GetMultiGpuBoard() (int, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMultiGpuBoard")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetMultiGpuBoard indicates an expected call of GetMultiGpuBoard.
func (mr *MockDeviceMockRecorder) GetMultiGpuBoard() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMultiGpuBoard", reflect.TypeOf((*MockDevice)(nil).GetMultiGpuBoard))
}

// GetName mocks base method.
func (m *MockDevice) GetName() (string, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetName indicates an expected call of GetName.
func (mr *MockDeviceMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockDevice)(nil).GetName))
}

// GetNumFans mocks base method.
func (m *MockDevice) GetNumFans() (int, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNumFans")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetNumFans indicates an expected call of GetNumFans.
func (mr *MockDeviceMockRecorder) GetNumFans() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNumFans", reflect.TypeOf((*MockDevice)(nil).GetNumFans))
}

// GetNumGpuCores mocks base method.
func (m *MockDevice) GetNumGpuCores() (int, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNumGpuCores")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetNumGpuCores indicates an expected call of GetNumGpuCores.
func (mr *MockDeviceMockRecorder) GetNumGpuCores() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNumGpuCores", reflect.TypeOf((*MockDevice)(nil).GetNumGpuCores))
}

// GetNumaNodeId mocks base method.
func (m *MockDevice) GetNumaNodeId() (int, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNumaNodeId")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetNumaNodeId indicates an expected call of GetNumaNodeId.
func (mr *MockDeviceMockRecorder) GetNumaNodeId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNumaNodeId", reflect.TypeOf((*MockDevice)(nil).GetNumaNodeId))
}

// GetNvLinkCapability mocks base method.
func (m *MockDevice) GetNvLinkCapability(arg0 int, arg1 nvml.NvLinkCapability) (uint32, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNvLinkCapability", arg0, arg1)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetNvLinkCapability indicates an expected call of GetNvLinkCapability.
func (mr *MockDeviceMockRecorder) GetNvLinkCapability(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNvLinkCapability", reflect.TypeOf((*MockDevice)(nil).GetNvLinkCapability), arg0, arg1)
}

// GetNvLinkErrorCounter mocks base method.
func (m *MockDevice) GetNvLinkErrorCounter(arg0 int, arg1 nvml.NvLinkErrorCounter) (uint64, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNvLinkErrorCounter", arg0, arg1)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetNvLinkErrorCounter indicates an expected call of GetNvLinkErrorCounter.
func (mr *MockDeviceMockRecorder) GetNvLinkErrorCounter(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNvLinkErrorCounter", reflect.TypeOf((*MockDevice)(nil).GetNvLinkErrorCounter), arg0, arg1)
}

// GetNvLinkRemoteDeviceType mocks base method.
func (m *MockDevice) GetNvLinkRemoteDeviceType(arg0 int) (nvml.IntNvLinkDeviceType, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNvLinkRemoteDeviceType", arg0)
	ret0, _ := ret[0].(nvml.IntNvLinkDeviceType)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetNvLinkRemoteDeviceType indicates an expected call of GetNvLinkRemoteDeviceType.
func (mr *MockDeviceMockRecorder) GetNvLinkRemoteDeviceType(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNvLinkRemoteDeviceType", reflect.TypeOf((*MockDevice)(nil).GetNvLinkRemoteDeviceType), arg0)
}

// GetNvLinkRemotePciInfo mocks base method.
func (m *MockDevice) GetNvLinkRemotePciInfo(arg0 int) (nvml.PciInfo, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNvLinkRemotePciInfo", arg0)
	ret0, _ := ret[0].(nvml.PciInfo)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetNvLinkRemotePciInfo indicates an expected call of GetNvLinkRemotePciInfo.
func (mr *MockDeviceMockRecorder) GetNvLinkRemotePciInfo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNvLinkRemotePciInfo", reflect.TypeOf((*MockDevice)(nil).GetNvLinkRemotePciInfo), arg0)
}

// GetNvLinkState mocks base method.
func (m *MockDevice) GetNvLinkState(arg0 int) (nvml.EnableState, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNvLinkState", arg0)
	ret0, _ := ret[0].(nvml.EnableState)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetNvLinkState indicates an expected call of GetNvLinkState.
func (mr *MockDeviceMockRecorder) GetNvLinkState(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNvLinkState", reflect.TypeOf((*MockDevice)(nil).GetNvLinkState), arg0)
}

// GetNvLinkUtilizationControl mocks base method.
func (m *MockDevice) GetNvLinkUtilizationControl(arg0, arg1 int) (nvml.NvLinkUtilizationControl, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNvLinkUtilizationControl", arg0, arg1)
	ret0, _ := ret[0].(nvml.NvLinkUtilizationControl)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetNvLinkUtilizationControl indicates an expected call of GetNvLinkUtilizationControl.
func (mr *MockDeviceMockRecorder) GetNvLinkUtilizationControl(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNvLinkUtilizationControl", reflect.TypeOf((*MockDevice)(nil).GetNvLinkUtilizationControl), arg0, arg1)
}

// GetNvLinkUtilizationCounter mocks base method.
func (m *MockDevice) GetNvLinkUtilizationCounter(arg0, arg1 int) (uint64, uint64, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNvLinkUtilizationCounter", arg0, arg1)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(uint64)
	ret2, _ := ret[2].(nvml.Return)
	return ret0, ret1, ret2
}

// GetNvLinkUtilizationCounter indicates an expected call of GetNvLinkUtilizationCounter.
func (mr *MockDeviceMockRecorder) GetNvLinkUtilizationCounter(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNvLinkUtilizationCounter", reflect.TypeOf((*MockDevice)(nil).GetNvLinkUtilizationCounter), arg0, arg1)
}

// GetNvLinkVersion mocks base method.
func (m *MockDevice) GetNvLinkVersion(arg0 int) (uint32, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNvLinkVersion", arg0)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetNvLinkVersion indicates an expected call of GetNvLinkVersion.
func (mr *MockDeviceMockRecorder) GetNvLinkVersion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNvLinkVersion", reflect.TypeOf((*MockDevice)(nil).GetNvLinkVersion), arg0)
}

// GetOfaUtilization mocks base method.
func (m *MockDevice) GetOfaUtilization() (uint32, uint32, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOfaUtilization")
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(uint32)
	ret2, _ := ret[2].(nvml.Return)
	return ret0, ret1, ret2
}

// GetOfaUtilization indicates an expected call of GetOfaUtilization.
func (mr *MockDeviceMockRecorder) GetOfaUtilization() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOfaUtilization", reflect.TypeOf((*MockDevice)(nil).GetOfaUtilization))
}

// GetP2PStatus mocks base method.
func (m *MockDevice) GetP2PStatus(arg0 nvml.Device, arg1 nvml.GpuP2PCapsIndex) (nvml.GpuP2PStatus, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetP2PStatus", arg0, arg1)
	ret0, _ := ret[0].(nvml.GpuP2PStatus)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetP2PStatus indicates an expected call of GetP2PStatus.
func (mr *MockDeviceMockRecorder) GetP2PStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetP2PStatus", reflect.TypeOf((*MockDevice)(nil).GetP2PStatus), arg0, arg1)
}

// GetPciInfo mocks base method.
func (m *MockDevice) GetPciInfo() (nvml.PciInfo, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPciInfo")
	ret0, _ := ret[0].(nvml.PciInfo)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetPciInfo indicates an expected call of GetPciInfo.
func (mr *MockDeviceMockRecorder) GetPciInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPciInfo", reflect.TypeOf((*MockDevice)(nil).GetPciInfo))
}

// GetPciInfoExt mocks base method.
func (m *MockDevice) GetPciInfoExt() (nvml.PciInfoExt, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPciInfoExt")
	ret0, _ := ret[0].(nvml.PciInfoExt)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetPciInfoExt indicates an expected call of GetPciInfoExt.
func (mr *MockDeviceMockRecorder) GetPciInfoExt() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPciInfoExt", reflect.TypeOf((*MockDevice)(nil).GetPciInfoExt))
}

// GetPcieLinkMaxSpeed mocks base method.
func (m *MockDevice) GetPcieLinkMaxSpeed() (uint32, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPcieLinkMaxSpeed")
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetPcieLinkMaxSpeed indicates an expected call of GetPcieLinkMaxSpeed.
func (mr *MockDeviceMockRecorder) GetPcieLinkMaxSpeed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPcieLinkMaxSpeed", reflect.TypeOf((*MockDevice)(nil).GetPcieLinkMaxSpeed))
}

// GetPcieReplayCounter mocks base method.
func (m *MockDevice) GetPcieReplayCounter() (int, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPcieReplayCounter")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetPcieReplayCounter indicates an expected call of GetPcieReplayCounter.
func (mr *MockDeviceMockRecorder) GetPcieReplayCounter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPcieReplayCounter", reflect.TypeOf((*MockDevice)(nil).GetPcieReplayCounter))
}

// GetPcieSpeed mocks base method.
func (m *MockDevice) GetPcieSpeed() (int, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPcieSpeed")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetPcieSpeed indicates an expected call of GetPcieSpeed.
func (mr *MockDeviceMockRecorder) GetPcieSpeed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPcieSpeed", reflect.TypeOf((*MockDevice)(nil).GetPcieSpeed))
}

// GetPcieThroughput mocks base method.
func (m *MockDevice) GetPcieThroughput(arg0 nvml.PcieUtilCounter) (uint32, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPcieThroughput", arg0)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetPcieThroughput indicates an expected call of GetPcieThroughput.
func (mr *MockDeviceMockRecorder) GetPcieThroughput(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPcieThroughput", reflect.TypeOf((*MockDevice)(nil).GetPcieThroughput), arg0)
}

// GetPerformanceState mocks base method.
func (m *MockDevice) GetPerformanceState() (nvml.Pstates, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPerformanceState")
	ret0, _ := ret[0].(nvml.Pstates)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetPerformanceState indicates an expected call of GetPerformanceState.
func (mr *MockDeviceMockRecorder) GetPerformanceState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPerformanceState", reflect.TypeOf((*MockDevice)(nil).GetPerformanceState))
}

// GetPersistenceMode mocks base method.
func (m *MockDevice) GetPersistenceMode() (nvml.EnableState, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPersistenceMode")
	ret0, _ := ret[0].(nvml.EnableState)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetPersistenceMode indicates an expected call of GetPersistenceMode.
func (mr *MockDeviceMockRecorder) GetPersistenceMode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPersistenceMode", reflect.TypeOf((*MockDevice)(nil).GetPersistenceMode))
}

// GetPgpuMetadataString mocks base method.
func (m *MockDevice) GetPgpuMetadataString() (string, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPgpuMetadataString")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetPgpuMetadataString indicates an expected call of GetPgpuMetadataString.
func (mr *MockDeviceMockRecorder) GetPgpuMetadataString() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPgpuMetadataString", reflect.TypeOf((*MockDevice)(nil).GetPgpuMetadataString))
}

// GetPowerManagementDefaultLimit mocks base method.
func (m *MockDevice) GetPowerManagementDefaultLimit() (uint32, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPowerManagementDefaultLimit")
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetPowerManagementDefaultLimit indicates an expected call of GetPowerManagementDefaultLimit.
func (mr *MockDeviceMockRecorder) GetPowerManagementDefaultLimit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPowerManagementDefaultLimit", reflect.TypeOf((*MockDevice)(nil).GetPowerManagementDefaultLimit))
}

// GetPowerManagementLimit mocks base method.
func (m *MockDevice) GetPowerManagementLimit() (uint32, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPowerManagementLimit")
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetPowerManagementLimit indicates an expected call of GetPowerManagementLimit.
func (mr *MockDeviceMockRecorder) GetPowerManagementLimit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPowerManagementLimit", reflect.TypeOf((*MockDevice)(nil).GetPowerManagementLimit))
}

// GetPowerManagementLimitConstraints mocks base method.
func (m *MockDevice) GetPowerManagementLimitConstraints() (uint32, uint32, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPowerManagementLimitConstraints")
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(uint32)
	ret2, _ := ret[2].(nvml.Return)
	return ret0, ret1, ret2
}

// GetPowerManagementLimitConstraints indicates an expected call of GetPowerManagementLimitConstraints.
func (mr *MockDeviceMockRecorder) GetPowerManagementLimitConstraints() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPowerManagementLimitConstraints", reflect.TypeOf((*MockDevice)(nil).GetPowerManagementLimitConstraints))
}

// GetPowerManagementMode mocks base method.
func (m *MockDevice) GetPowerManagementMode() (nvml.EnableState, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPowerManagementMode")
	ret0, _ := ret[0].(nvml.EnableState)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetPowerManagementMode indicates an expected call of GetPowerManagementMode.
func (mr *MockDeviceMockRecorder) GetPowerManagementMode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPowerManagementMode", reflect.TypeOf((*MockDevice)(nil).GetPowerManagementMode))
}

// GetPowerSource mocks base method.
func (m *MockDevice) GetPowerSource() (nvml.PowerSource, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPowerSource")
	ret0, _ := ret[0].(nvml.PowerSource)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetPowerSource indicates an expected call of GetPowerSource.
func (mr *MockDeviceMockRecorder) GetPowerSource() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPowerSource", reflect.TypeOf((*MockDevice)(nil).GetPowerSource))
}

// GetPowerState mocks base method.
func (m *MockDevice) GetPowerState() (nvml.Pstates, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPowerState")
	ret0, _ := ret[0].(nvml.Pstates)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetPowerState indicates an expected call of GetPowerState.
func (mr *MockDeviceMockRecorder) GetPowerState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPowerState", reflect.TypeOf((*MockDevice)(nil).GetPowerState))
}

// GetPowerUsage mocks base method.
func (m *MockDevice) GetPowerUsage() (uint32, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPowerUsage")
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetPowerUsage indicates an expected call of GetPowerUsage.
func (mr *MockDeviceMockRecorder) GetPowerUsage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPowerUsage", reflect.TypeOf((*MockDevice)(nil).GetPowerUsage))
}

// GetProcessUtilization mocks base method.
func (m *MockDevice) GetProcessUtilization(arg0 uint64) ([]nvml.ProcessUtilizationSample, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProcessUtilization", arg0)
	ret0, _ := ret[0].([]nvml.ProcessUtilizationSample)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetProcessUtilization indicates an expected call of GetProcessUtilization.
func (mr *MockDeviceMockRecorder) GetProcessUtilization(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProcessUtilization", reflect.TypeOf((*MockDevice)(nil).GetProcessUtilization), arg0)
}

// GetProcessesUtilizationInfo mocks base method.
func (m *MockDevice) GetProcessesUtilizationInfo() (nvml.ProcessesUtilizationInfo, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProcessesUtilizationInfo")
	ret0, _ := ret[0].(nvml.ProcessesUtilizationInfo)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetProcessesUtilizationInfo indicates an expected call of GetProcessesUtilizationInfo.
func (mr *MockDeviceMockRecorder) GetProcessesUtilizationInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProcessesUtilizationInfo", reflect.TypeOf((*MockDevice)(nil).GetProcessesUtilizationInfo))
}

// GetRemappedRows mocks base method.
func (m *MockDevice) GetRemappedRows() (int, int, bool, bool, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRemappedRows")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(bool)
	ret3, _ := ret[3].(bool)
	ret4, _ := ret[4].(nvml.Return)
	return ret0, ret1, ret2, ret3, ret4
}

// GetRemappedRows indicates an expected call of GetRemappedRows.
func (mr *MockDeviceMockRecorder) GetRemappedRows() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRemappedRows", reflect.TypeOf((*MockDevice)(nil).GetRemappedRows))
}

// GetRetiredPages mocks base method.
func (m *MockDevice) GetRetiredPages(arg0 nvml.PageRetirementCause) ([]uint64, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRetiredPages", arg0)
	ret0, _ := ret[0].([]uint64)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetRetiredPages indicates an expected call of GetRetiredPages.
func (mr *MockDeviceMockRecorder) GetRetiredPages(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRetiredPages", reflect.TypeOf((*MockDevice)(nil).GetRetiredPages), arg0)
}

// GetRetiredPagesPendingStatus mocks base method.
func (m *MockDevice) GetRetiredPagesPendingStatus() (nvml.EnableState, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRetiredPagesPendingStatus")
	ret0, _ := ret[0].(nvml.EnableState)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetRetiredPagesPendingStatus indicates an expected call of GetRetiredPagesPendingStatus.
func (mr *MockDeviceMockRecorder) GetRetiredPagesPendingStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRetiredPagesPendingStatus", reflect.TypeOf((*MockDevice)(nil).GetRetiredPagesPendingStatus))
}

// GetRetiredPages_v2 mocks base method.
func (m *MockDevice) GetRetiredPages_v2(arg0 nvml.PageRetirementCause) ([]uint64, []uint64, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRetiredPages_v2", arg0)
	ret0, _ := ret[0].([]uint64)
	ret1, _ := ret[1].([]uint64)
	ret2, _ := ret[2].(nvml.Return)
	return ret0, ret1, ret2
}

// GetRetiredPages_v2 indicates an expected call of GetRetiredPages_v2.
func (mr *MockDeviceMockRecorder) GetRetiredPages_v2(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRetiredPages_v2", reflect.TypeOf((*MockDevice)(nil).GetRetiredPages_v2), arg0)
}

// GetRowRemapperHistogram mocks base method.
func (m *MockDevice) GetRowRemapperHistogram() (nvml.RowRemapperHistogramValues, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRowRemapperHistogram")
	ret0, _ := ret[0].(nvml.RowRemapperHistogramValues)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetRowRemapperHistogram indicates an expected call of GetRowRemapperHistogram.
func (mr *MockDeviceMockRecorder) GetRowRemapperHistogram() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRowRemapperHistogram", reflect.TypeOf((*MockDevice)(nil).GetRowRemapperHistogram))
}

// GetRunningProcessDetailList mocks base method.
func (m *MockDevice) GetRunningProcessDetailList() (nvml.ProcessDetailList, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRunningProcessDetailList")
	ret0, _ := ret[0].(nvml.ProcessDetailList)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetRunningProcessDetailList indicates an expected call of GetRunningProcessDetailList.
func (mr *MockDeviceMockRecorder) GetRunningProcessDetailList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRunningProcessDetailList", reflect.TypeOf((*MockDevice)(nil).GetRunningProcessDetailList))
}

// GetSamples mocks base method.
func (m *MockDevice) GetSamples(arg0 nvml.SamplingType, arg1 uint64) (nvml.ValueType, []nvml.Sample, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSamples", arg0, arg1)
	ret0, _ := ret[0].(nvml.ValueType)
	ret1, _ := ret[1].([]nvml.Sample)
	ret2, _ := ret[2].(nvml.Return)
	return ret0, ret1, ret2
}

// GetSamples indicates an expected call of GetSamples.
func (mr *MockDeviceMockRecorder) GetSamples(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSamples", reflect.TypeOf((*MockDevice)(nil).GetSamples), arg0, arg1)
}

// GetSerial mocks base method.
func (m *MockDevice) GetSerial() (string, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSerial")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetSerial indicates an expected call of GetSerial.
func (mr *MockDeviceMockRecorder) GetSerial() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSerial", reflect.TypeOf((*MockDevice)(nil).GetSerial))
}

// GetSramEccErrorStatus mocks base method.
func (m *MockDevice) GetSramEccErrorStatus() (nvml.EccSramErrorStatus, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSramEccErrorStatus")
	ret0, _ := ret[0].(nvml.EccSramErrorStatus)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetSramEccErrorStatus indicates an expected call of GetSramEccErrorStatus.
func (mr *MockDeviceMockRecorder) GetSramEccErrorStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSramEccErrorStatus", reflect.TypeOf((*MockDevice)(nil).GetSramEccErrorStatus))
}

// GetSupportedClocksEventReasons mocks base method.
func (m *MockDevice) GetSupportedClocksEventReasons() (uint64, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSupportedClocksEventReasons")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetSupportedClocksEventReasons indicates an expected call of GetSupportedClocksEventReasons.
func (mr *MockDeviceMockRecorder) GetSupportedClocksEventReasons() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSupportedClocksEventReasons", reflect.TypeOf((*MockDevice)(nil).GetSupportedClocksEventReasons))
}

// GetSupportedClocksThrottleReasons mocks base method.
func (m *MockDevice) GetSupportedClocksThrottleReasons() (uint64, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSupportedClocksThrottleReasons")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetSupportedClocksThrottleReasons indicates an expected call of GetSupportedClocksThrottleReasons.
func (mr *MockDeviceMockRecorder) GetSupportedClocksThrottleReasons() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSupportedClocksThrottleReasons", reflect.TypeOf((*MockDevice)(nil).GetSupportedClocksThrottleReasons))
}

// GetSupportedEventTypes mocks base method.
func (m *MockDevice) GetSupportedEventTypes() (uint64, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSupportedEventTypes")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetSupportedEventTypes indicates an expected call of GetSupportedEventTypes.
func (mr *MockDeviceMockRecorder) GetSupportedEventTypes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSupportedEventTypes", reflect.TypeOf((*MockDevice)(nil).GetSupportedEventTypes))
}

// GetSupportedGraphicsClocks mocks base method.
func (m *MockDevice) GetSupportedGraphicsClocks(arg0 int) (int, uint32, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSupportedGraphicsClocks", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(uint32)
	ret2, _ := ret[2].(nvml.Return)
	return ret0, ret1, ret2
}

// GetSupportedGraphicsClocks indicates an expected call of GetSupportedGraphicsClocks.
func (mr *MockDeviceMockRecorder) GetSupportedGraphicsClocks(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSupportedGraphicsClocks", reflect.TypeOf((*MockDevice)(nil).GetSupportedGraphicsClocks), arg0)
}

// GetSupportedMemoryClocks mocks base method.
func (m *MockDevice) GetSupportedMemoryClocks() (int, uint32, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSupportedMemoryClocks")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(uint32)
	ret2, _ := ret[2].(nvml.Return)
	return ret0, ret1, ret2
}

// GetSupportedMemoryClocks indicates an expected call of GetSupportedMemoryClocks.
func (mr *MockDeviceMockRecorder) GetSupportedMemoryClocks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSupportedMemoryClocks", reflect.TypeOf((*MockDevice)(nil).GetSupportedMemoryClocks))
}

// GetSupportedPerformanceStates mocks base method.
func (m *MockDevice) GetSupportedPerformanceStates() ([]nvml.Pstates, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSupportedPerformanceStates")
	ret0, _ := ret[0].([]nvml.Pstates)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetSupportedPerformanceStates indicates an expected call of GetSupportedPerformanceStates.
func (mr *MockDeviceMockRecorder) GetSupportedPerformanceStates() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSupportedPerformanceStates", reflect.TypeOf((*MockDevice)(nil).GetSupportedPerformanceStates))
}

// GetSupportedVgpus mocks base method.
func (m *MockDevice) GetSupportedVgpus() ([]nvml.VgpuTypeId, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSupportedVgpus")
	ret0, _ := ret[0].([]nvml.VgpuTypeId)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetSupportedVgpus indicates an expected call of GetSupportedVgpus.
func (mr *MockDeviceMockRecorder) GetSupportedVgpus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSupportedVgpus", reflect.TypeOf((*MockDevice)(nil).GetSupportedVgpus))
}

// GetTargetFanSpeed mocks base method.
func (m *MockDevice) GetTargetFanSpeed(arg0 int) (int, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTargetFanSpeed", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetTargetFanSpeed indicates an expected call of GetTargetFanSpeed.
func (mr *MockDeviceMockRecorder) GetTargetFanSpeed(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTargetFanSpeed", reflect.TypeOf((*MockDevice)(nil).GetTargetFanSpeed), arg0)
}

// GetTemperature mocks base method.
func (m *MockDevice) GetTemperature(arg0 nvml.TemperatureSensors) (uint32, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTemperature", arg0)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetTemperature indicates an expected call of GetTemperature.
func (mr *MockDeviceMockRecorder) GetTemperature(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTemperature", reflect.TypeOf((*MockDevice)(nil).GetTemperature), arg0)
}

// GetTemperatureThreshold mocks base method.
func (m *MockDevice) GetTemperatureThreshold(arg0 nvml.TemperatureThresholds) (uint32, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTemperatureThreshold", arg0)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetTemperatureThreshold indicates an expected call of GetTemperatureThreshold.
func (mr *MockDeviceMockRecorder) GetTemperatureThreshold(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTemperatureThreshold", reflect.TypeOf((*MockDevice)(nil).GetTemperatureThreshold), arg0)
}

// GetThermalSettings mocks base method.
func (m *MockDevice) GetThermalSettings(arg0 uint32) (nvml.GpuThermalSettings, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetThermalSettings", arg0)
	ret0, _ := ret[0].(nvml.GpuThermalSettings)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetThermalSettings indicates an expected call of GetThermalSettings.
func (mr *MockDeviceMockRecorder) GetThermalSettings(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetThermalSettings", reflect.TypeOf((*MockDevice)(nil).GetThermalSettings), arg0)
}

// GetTopologyCommonAncestor mocks base method.
func (m *MockDevice) GetTopologyCommonAncestor(arg0 nvml.Device) (nvml.GpuTopologyLevel, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTopologyCommonAncestor", arg0)
	ret0, _ := ret[0].(nvml.GpuTopologyLevel)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetTopologyCommonAncestor indicates an expected call of GetTopologyCommonAncestor.
func (mr *MockDeviceMockRecorder) GetTopologyCommonAncestor(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopologyCommonAncestor", reflect.TypeOf((*MockDevice)(nil).GetTopologyCommonAncestor), arg0)
}

// GetTopologyNearestGpus mocks base method.
func (m *MockDevice) GetTopologyNearestGpus(arg0 nvml.GpuTopologyLevel) ([]nvml.Device, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTopologyNearestGpus", arg0)
	ret0, _ := ret[0].([]nvml.Device)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetTopologyNearestGpus indicates an expected call of GetTopologyNearestGpus.
func (mr *MockDeviceMockRecorder) GetTopologyNearestGpus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopologyNearestGpus", reflect.TypeOf((*MockDevice)(nil).GetTopologyNearestGpus), arg0)
}

// GetTotalEccErrors mocks base method.
func (m *MockDevice) GetTotalEccErrors(arg0 nvml.MemoryErrorType, arg1 nvml.EccCounterType) (uint64, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalEccErrors", arg0, arg1)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetTotalEccErrors indicates an expected call of GetTotalEccErrors.
func (mr *MockDeviceMockRecorder) GetTotalEccErrors(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalEccErrors", reflect.TypeOf((*MockDevice)(nil).GetTotalEccErrors), arg0, arg1)
}

// GetTotalEnergyConsumption mocks base method.
func (m *MockDevice) GetTotalEnergyConsumption() (uint64, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalEnergyConsumption")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetTotalEnergyConsumption indicates an expected call of GetTotalEnergyConsumption.
func (mr *MockDeviceMockRecorder) GetTotalEnergyConsumption() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalEnergyConsumption", reflect.TypeOf((*MockDevice)(nil).GetTotalEnergyConsumption))
}

// GetUUID mocks base method.
func (m *MockDevice) GetUUID() (string, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUUID")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetUUID indicates an expected call of GetUUID.
func (mr *MockDeviceMockRecorder) GetUUID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUUID", reflect.TypeOf((*MockDevice)(nil).GetUUID))
}

// GetUtilizationRates mocks base method.
func (m *MockDevice) GetUtilizationRates() (nvml.Utilization, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUtilizationRates")
	ret0, _ := ret[0].(nvml.Utilization)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetUtilizationRates indicates an expected call of GetUtilizationRates.
func (mr *MockDeviceMockRecorder) GetUtilizationRates() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUtilizationRates", reflect.TypeOf((*MockDevice)(nil).GetUtilizationRates))
}

// GetVbiosVersion mocks base method.
func (m *MockDevice) GetVbiosVersion() (string, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVbiosVersion")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetVbiosVersion indicates an expected call of GetVbiosVersion.
func (mr *MockDeviceMockRecorder) GetVbiosVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVbiosVersion", reflect.TypeOf((*MockDevice)(nil).GetVbiosVersion))
}

// GetVgpuCapabilities mocks base method.
func (m *MockDevice) GetVgpuCapabilities(arg0 nvml.DeviceVgpuCapability) (bool, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVgpuCapabilities", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetVgpuCapabilities indicates an expected call of GetVgpuCapabilities.
func (mr *MockDeviceMockRecorder) GetVgpuCapabilities(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVgpuCapabilities", reflect.TypeOf((*MockDevice)(nil).GetVgpuCapabilities), arg0)
}

// GetVgpuHeterogeneousMode mocks base method.
func (m *MockDevice) GetVgpuHeterogeneousMode() (nvml.VgpuHeterogeneousMode, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVgpuHeterogeneousMode")
	ret0, _ := ret[0].(nvml.VgpuHeterogeneousMode)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetVgpuHeterogeneousMode indicates an expected call of GetVgpuHeterogeneousMode.
func (mr *MockDeviceMockRecorder) GetVgpuHeterogeneousMode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVgpuHeterogeneousMode", reflect.TypeOf((*MockDevice)(nil).GetVgpuHeterogeneousMode))
}

// GetVgpuInstancesUtilizationInfo mocks base method.
func (m *MockDevice) GetVgpuInstancesUtilizationInfo() (nvml.VgpuInstancesUtilizationInfo, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVgpuInstancesUtilizationInfo")
	ret0, _ := ret[0].(nvml.VgpuInstancesUtilizationInfo)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetVgpuInstancesUtilizationInfo indicates an expected call of GetVgpuInstancesUtilizationInfo.
func (mr *MockDeviceMockRecorder) GetVgpuInstancesUtilizationInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVgpuInstancesUtilizationInfo", reflect.TypeOf((*MockDevice)(nil).GetVgpuInstancesUtilizationInfo))
}

// GetVgpuMetadata mocks base method.
func (m *MockDevice) GetVgpuMetadata() (nvml.VgpuPgpuMetadata, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVgpuMetadata")
	ret0, _ := ret[0].(nvml.VgpuPgpuMetadata)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetVgpuMetadata indicates an expected call of GetVgpuMetadata.
func (mr *MockDeviceMockRecorder) GetVgpuMetadata() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVgpuMetadata", reflect.TypeOf((*MockDevice)(nil).GetVgpuMetadata))
}

// GetVgpuProcessUtilization mocks base method.
func (m *MockDevice) GetVgpuProcessUtilization(arg0 uint64) ([]nvml.VgpuProcessUtilizationSample, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVgpuProcessUtilization", arg0)
	ret0, _ := ret[0].([]nvml.VgpuProcessUtilizationSample)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetVgpuProcessUtilization indicates an expected call of GetVgpuProcessUtilization.
func (mr *MockDeviceMockRecorder) GetVgpuProcessUtilization(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVgpuProcessUtilization", reflect.TypeOf((*MockDevice)(nil).GetVgpuProcessUtilization), arg0)
}

// GetVgpuProcessesUtilizationInfo mocks base method.
func (m *MockDevice) GetVgpuProcessesUtilizationInfo() (nvml.VgpuProcessesUtilizationInfo, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVgpuProcessesUtilizationInfo")
	ret0, _ := ret[0].(nvml.VgpuProcessesUtilizationInfo)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetVgpuProcessesUtilizationInfo indicates an expected call of GetVgpuProcessesUtilizationInfo.
func (mr *MockDeviceMockRecorder) GetVgpuProcessesUtilizationInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVgpuProcessesUtilizationInfo", reflect.TypeOf((*MockDevice)(nil).GetVgpuProcessesUtilizationInfo))
}

// GetVgpuSchedulerCapabilities mocks base method.
func (m *MockDevice) GetVgpuSchedulerCapabilities() (nvml.VgpuSchedulerCapabilities, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVgpuSchedulerCapabilities")
	ret0, _ := ret[0].(nvml.VgpuSchedulerCapabilities)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetVgpuSchedulerCapabilities indicates an expected call of GetVgpuSchedulerCapabilities.
func (mr *MockDeviceMockRecorder) GetVgpuSchedulerCapabilities() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVgpuSchedulerCapabilities", reflect.TypeOf((*MockDevice)(nil).GetVgpuSchedulerCapabilities))
}

// GetVgpuSchedulerLog mocks base method.
func (m *MockDevice) GetVgpuSchedulerLog() (nvml.VgpuSchedulerLog, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVgpuSchedulerLog")
	ret0, _ := ret[0].(nvml.VgpuSchedulerLog)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetVgpuSchedulerLog indicates an expected call of GetVgpuSchedulerLog.
func (mr *MockDeviceMockRecorder) GetVgpuSchedulerLog() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVgpuSchedulerLog", reflect.TypeOf((*MockDevice)(nil).GetVgpuSchedulerLog))
}

// GetVgpuSchedulerState mocks base method.
func (m *MockDevice) GetVgpuSchedulerState() (nvml.VgpuSchedulerGetState, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVgpuSchedulerState")
	ret0, _ := ret[0].(nvml.VgpuSchedulerGetState)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetVgpuSchedulerState indicates an expected call of GetVgpuSchedulerState.
func (mr *MockDeviceMockRecorder) GetVgpuSchedulerState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVgpuSchedulerState", reflect.TypeOf((*MockDevice)(nil).GetVgpuSchedulerState))
}

// GetVgpuTypeCreatablePlacements mocks base method.
func (m *MockDevice) GetVgpuTypeCreatablePlacements(arg0 nvml.VgpuTypeId) (nvml.VgpuPlacementList, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVgpuTypeCreatablePlacements", arg0)
	ret0, _ := ret[0].(nvml.VgpuPlacementList)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetVgpuTypeCreatablePlacements indicates an expected call of GetVgpuTypeCreatablePlacements.
func (mr *MockDeviceMockRecorder) GetVgpuTypeCreatablePlacements(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVgpuTypeCreatablePlacements", reflect.TypeOf((*MockDevice)(nil).GetVgpuTypeCreatablePlacements), arg0)
}

// GetVgpuTypeSupportedPlacements mocks base method.
func (m *MockDevice) GetVgpuTypeSupportedPlacements(arg0 nvml.VgpuTypeId) (nvml.VgpuPlacementList, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVgpuTypeSupportedPlacements", arg0)
	ret0, _ := ret[0].(nvml.VgpuPlacementList)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetVgpuTypeSupportedPlacements indicates an expected call of GetVgpuTypeSupportedPlacements.
func (mr *MockDeviceMockRecorder) GetVgpuTypeSupportedPlacements(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVgpuTypeSupportedPlacements", reflect.TypeOf((*MockDevice)(nil).GetVgpuTypeSupportedPlacements), arg0)
}

// GetVgpuUtilization mocks base method.
func (m *MockDevice) GetVgpuUtilization(arg0 uint64) (nvml.ValueType, []nvml.VgpuInstanceUtilizationSample, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVgpuUtilization", arg0)
	ret0, _ := ret[0].(nvml.ValueType)
	ret1, _ := ret[1].([]nvml.VgpuInstanceUtilizationSample)
	ret2, _ := ret[2].(nvml.Return)
	return ret0, ret1, ret2
}

// GetVgpuUtilization indicates an expected call of GetVgpuUtilization.
func (mr *MockDeviceMockRecorder) GetVgpuUtilization(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVgpuUtilization", reflect.TypeOf((*MockDevice)(nil).GetVgpuUtilization), arg0)
}

// GetViolationStatus mocks base method.
func (m *MockDevice) GetViolationStatus(arg0 nvml.PerfPolicyType) (nvml.ViolationTime, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetViolationStatus", arg0)
	ret0, _ := ret[0].(nvml.ViolationTime)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetViolationStatus indicates an expected call of GetViolationStatus.
func (mr *MockDeviceMockRecorder) GetViolationStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetViolationStatus", reflect.TypeOf((*MockDevice)(nil).GetViolationStatus), arg0)
}

// GetVirtualizationMode mocks base method.
func (m *MockDevice) GetVirtualizationMode() (nvml.GpuVirtualizationMode, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVirtualizationMode")
	ret0, _ := ret[0].(nvml.GpuVirtualizationMode)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetVirtualizationMode indicates an expected call of GetVirtualizationMode.
func (mr *MockDeviceMockRecorder) GetVirtualizationMode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVirtualizationMode", reflect.TypeOf((*MockDevice)(nil).GetVirtualizationMode))
}

// GpmMigSampleGet mocks base method.
func (m *MockDevice) GpmMigSampleGet(arg0 int, arg1 nvml.GpmSample) nvml.Return {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GpmMigSampleGet", arg0, arg1)
	ret0, _ := ret[0].(nvml.Return)
	return ret0
}

// GpmMigSampleGet indicates an expected call of GpmMigSampleGet.
func (mr *MockDeviceMockRecorder) GpmMigSampleGet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GpmMigSampleGet", reflect.TypeOf((*MockDevice)(nil).GpmMigSampleGet), arg0, arg1)
}

// GpmQueryDeviceSupport mocks base method.
func (m *MockDevice) GpmQueryDeviceSupport() (nvml.GpmSupport, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GpmQueryDeviceSupport")
	ret0, _ := ret[0].(nvml.GpmSupport)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GpmQueryDeviceSupport indicates an expected call of GpmQueryDeviceSupport.
func (mr *MockDeviceMockRecorder) GpmQueryDeviceSupport() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GpmQueryDeviceSupport", reflect.TypeOf((*MockDevice)(nil).GpmQueryDeviceSupport))
}

// GpmQueryDeviceSupportV mocks base method.
func (m *MockDevice) GpmQueryDeviceSupportV() nvml.GpmSupportV {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GpmQueryDeviceSupportV")
	ret0, _ := ret[0].(nvml.GpmSupportV)
	return ret0
}

// GpmQueryDeviceSupportV indicates an expected call of GpmQueryDeviceSupportV.
func (mr *MockDeviceMockRecorder) GpmQueryDeviceSupportV() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GpmQueryDeviceSupportV", reflect.TypeOf((*MockDevice)(nil).GpmQueryDeviceSupportV))
}

// GpmQueryIfStreamingEnabled mocks base method.
func (m *MockDevice) GpmQueryIfStreamingEnabled() (uint32, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GpmQueryIfStreamingEnabled")
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GpmQueryIfStreamingEnabled indicates an expected call of GpmQueryIfStreamingEnabled.
func (mr *MockDeviceMockRecorder) GpmQueryIfStreamingEnabled() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GpmQueryIfStreamingEnabled", reflect.TypeOf((*MockDevice)(nil).GpmQueryIfStreamingEnabled))
}

// GpmSampleGet mocks base method.
func (m *MockDevice) GpmSampleGet(arg0 nvml.GpmSample) nvml.Return {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GpmSampleGet", arg0)
	ret0, _ := ret[0].(nvml.Return)
	return ret0
}

// GpmSampleGet indicates an expected call of GpmSampleGet.
func (mr *MockDeviceMockRecorder) GpmSampleGet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GpmSampleGet", reflect.TypeOf((*MockDevice)(nil).GpmSampleGet), arg0)
}

// GpmSetStreamingEnabled mocks base method.
func (m *MockDevice) GpmSetStreamingEnabled(arg0 uint32) nvml.Return {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GpmSetStreamingEnabled", arg0)
	ret0, _ := ret[0].(nvml.Return)
	return ret0
}

// GpmSetStreamingEnabled indicates an expected call of GpmSetStreamingEnabled.
func (mr *MockDeviceMockRecorder) GpmSetStreamingEnabled(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GpmSetStreamingEnabled", reflect.TypeOf((*MockDevice)(nil).GpmSetStreamingEnabled), arg0)
}

// IsMigDeviceHandle mocks base method.
func (m *MockDevice) IsMigDeviceHandle() (bool, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsMigDeviceHandle")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// IsMigDeviceHandle indicates an expected call of IsMigDeviceHandle.
func (mr *MockDeviceMockRecorder) IsMigDeviceHandle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsMigDeviceHandle", reflect.TypeOf((*MockDevice)(nil).IsMigDeviceHandle))
}

// OnSameBoard mocks base method.
func (m *MockDevice) OnSameBoard(arg0 nvml.Device) (int, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnSameBoard", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// OnSameBoard indicates an expected call of OnSameBoard.
func (mr *MockDeviceMockRecorder) OnSameBoard(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnSameBoard", reflect.TypeOf((*MockDevice)(nil).OnSameBoard), arg0)
}

// RegisterEvents mocks base method.
func (m *MockDevice) RegisterEvents(arg0 uint64, arg1 nvml.EventSet) nvml.Return {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterEvents", arg0, arg1)
	ret0, _ := ret[0].(nvml.Return)
	return ret0
}

// RegisterEvents indicates an expected call of RegisterEvents.
func (mr *MockDeviceMockRecorder) RegisterEvents(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterEvents", reflect.TypeOf((*MockDevice)(nil).RegisterEvents), arg0, arg1)
}

// ResetApplicationsClocks mocks base method.
func (m *MockDevice) ResetApplicationsClocks() nvml.Return {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetApplicationsClocks")
	ret0, _ := ret[0].(nvml.Return)
	return ret0
}

// ResetApplicationsClocks indicates an expected call of ResetApplicationsClocks.
func (mr *MockDeviceMockRecorder) ResetApplicationsClocks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetApplicationsClocks", reflect.TypeOf((*MockDevice)(nil).ResetApplicationsClocks))
}

// ResetGpuLockedClocks mocks base method.
func (m *MockDevice) ResetGpuLockedClocks() nvml.Return {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetGpuLockedClocks")
	ret0, _ := ret[0].(nvml.Return)
	return ret0
}

// ResetGpuLockedClocks indicates an expected call of ResetGpuLockedClocks.
func (mr *MockDeviceMockRecorder) ResetGpuLockedClocks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetGpuLockedClocks", reflect.TypeOf((*MockDevice)(nil).ResetGpuLockedClocks))
}

// ResetMemoryLockedClocks mocks base method.
func (m *MockDevice) ResetMemoryLockedClocks() nvml.Return {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetMemoryLockedClocks")
	ret0, _ := ret[0].(nvml.Return)
	return ret0
}

// ResetMemoryLockedClocks indicates an expected call of ResetMemoryLockedClocks.
func (mr *MockDeviceMockRecorder) ResetMemoryLockedClocks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetMemoryLockedClocks", reflect.TypeOf((*MockDevice)(nil).ResetMemoryLockedClocks))
}

// ResetNvLinkErrorCounters mocks base method.
func (m *MockDevice) ResetNvLinkErrorCounters(arg0 int) nvml.Return {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetNvLinkErrorCounters", arg0)
	ret0, _ := ret[0].(nvml.Return)
	return ret0
}

// ResetNvLinkErrorCounters indicates an expected call of ResetNvLinkErrorCounters.
func (mr *MockDeviceMockRecorder) ResetNvLinkErrorCounters(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetNvLinkErrorCounters", reflect.TypeOf((*MockDevice)(nil).ResetNvLinkErrorCounters), arg0)
}

// ResetNvLinkUtilizationCounter mocks base method.
func (m *MockDevice) ResetNvLinkUtilizationCounter(arg0, arg1 int) nvml.Return {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetNvLinkUtilizationCounter", arg0, arg1)
	ret0, _ := ret[0].(nvml.Return)
	return ret0
}

// ResetNvLinkUtilizationCounter indicates an expected call of ResetNvLinkUtilizationCounter.
func (mr *MockDeviceMockRecorder) ResetNvLinkUtilizationCounter(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetNvLinkUtilizationCounter", reflect.TypeOf((*MockDevice)(nil).ResetNvLinkUtilizationCounter), arg0, arg1)
}

// SetAPIRestriction mocks base method.
func (m *MockDevice) SetAPIRestriction(arg0 nvml.RestrictedAPI, arg1 nvml.EnableState) nvml.Return {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAPIRestriction", arg0, arg1)
	ret0, _ := ret[0].(nvml.Return)
	return ret0
}

// SetAPIRestriction indicates an expected call of SetAPIRestriction.
func (mr *MockDeviceMockRecorder) SetAPIRestriction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAPIRestriction", reflect.TypeOf((*MockDevice)(nil).SetAPIRestriction), arg0, arg1)
}

// SetAccountingMode mocks base method.
func (m *MockDevice) SetAccountingMode(arg0 nvml.EnableState) nvml.Return {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAccountingMode", arg0)
	ret0, _ := ret[0].(nvml.Return)
	return ret0
}

// SetAccountingMode indicates an expected call of SetAccountingMode.
func (mr *MockDeviceMockRecorder) SetAccountingMode(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAccountingMode", reflect.TypeOf((*MockDevice)(nil).SetAccountingMode), arg0)
}

// SetApplicationsClocks mocks base method.
func (m *MockDevice) SetApplicationsClocks(arg0, arg1 uint32) nvml.Return {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetApplicationsClocks", arg0, arg1)
	ret0, _ := ret[0].(nvml.Return)
	return ret0
}

// SetApplicationsClocks indicates an expected call of SetApplicationsClocks.
func (mr *MockDeviceMockRecorder) SetApplicationsClocks(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetApplicationsClocks", reflect.TypeOf((*MockDevice)(nil).SetApplicationsClocks), arg0, arg1)
}

// SetAutoBoostedClocksEnabled mocks base method.
func (m *MockDevice) SetAutoBoostedClocksEnabled(arg0 nvml.EnableState) nvml.Return {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAutoBoostedClocksEnabled", arg0)
	ret0, _ := ret[0].(nvml.Return)
	return ret0
}

// SetAutoBoostedClocksEnabled indicates an expected call of SetAutoBoostedClocksEnabled.
func (mr *MockDeviceMockRecorder) SetAutoBoostedClocksEnabled(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAutoBoostedClocksEnabled", reflect.TypeOf((*MockDevice)(nil).SetAutoBoostedClocksEnabled), arg0)
}

// SetComputeMode mocks base method.
func (m *MockDevice) SetComputeMode(arg0 nvml.ComputeMode) nvml.Return {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetComputeMode", arg0)
	ret0, _ := ret[0].(nvml.Return)
	return ret0
}

// SetComputeMode indicates an expected call of SetComputeMode.
func (mr *MockDeviceMockRecorder) SetComputeMode(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetComputeMode", reflect.TypeOf((*MockDevice)(nil).SetComputeMode), arg0)
}

// SetConfComputeUnprotectedMemSize mocks base method.
func (m *MockDevice) SetConfComputeUnprotectedMemSize(arg0 uint64) nvml.Return {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetConfComputeUnprotectedMemSize", arg0)
	ret0, _ := ret[0].(nvml.Return)
	return ret0
}

// SetConfComputeUnprotectedMemSize indicates an expected call of SetConfComputeUnprotectedMemSize.
func (mr *MockDeviceMockRecorder) SetConfComputeUnprotectedMemSize(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetConfComputeUnprotectedMemSize", reflect.TypeOf((*MockDevice)(nil).SetConfComputeUnprotectedMemSize), arg0)
}

// SetCpuAffinity mocks base method.
func (m *MockDevice) SetCpuAffinity() nvml.Return {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCpuAffinity")
	ret0, _ := ret[0].(nvml.Return)
	return ret0
}

// SetCpuAffinity indicates an expected call of SetCpuAffinity.
func (mr *MockDeviceMockRecorder) SetCpuAffinity() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCpuAffinity", reflect.TypeOf((*MockDevice)(nil).SetCpuAffinity))
}

// SetDefaultAutoBoostedClocksEnabled mocks base method.
func (m *MockDevice) SetDefaultAutoBoostedClocksEnabled(arg0 nvml.EnableState, arg1 uint32) nvml.Return {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDefaultAutoBoostedClocksEnabled", arg0, arg1)
	ret0, _ := ret[0].(nvml.Return)
	return ret0
}

// SetDefaultAutoBoostedClocksEnabled indicates an expected call of SetDefaultAutoBoostedClocksEnabled.
func (mr *MockDeviceMockRecorder) SetDefaultAutoBoostedClocksEnabled(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDefaultAutoBoostedClocksEnabled", reflect.TypeOf((*MockDevice)(nil).SetDefaultAutoBoostedClocksEnabled), arg0, arg1)
}

// SetDefaultFanSpeed_v2 mocks base method.
func (m *MockDevice) SetDefaultFanSpeed_v2(arg0 int) nvml.Return {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDefaultFanSpeed_v2", arg0)
	ret0, _ := ret[0].(nvml.Return)
	return ret0
}

// SetDefaultFanSpeed_v2 indicates an expected call of SetDefaultFanSpeed_v2.
func (mr *MockDeviceMockRecorder) SetDefaultFanSpeed_v2(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDefaultFanSpeed_v2", reflect.TypeOf((*MockDevice)(nil).SetDefaultFanSpeed_v2), arg0)
}

// SetDriverModel mocks base method.
func (m *MockDevice) SetDriverModel(arg0 nvml.DriverModel, arg1 uint32) nvml.Return {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDriverModel", arg0, arg1)
	ret0, _ := ret[0].(nvml.Return)
	return ret0
}

// SetDriverModel indicates an expected call of SetDriverModel.
func (mr *MockDeviceMockRecorder) SetDriverModel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDriverModel", reflect.TypeOf((*MockDevice)(nil).SetDriverModel), arg0, arg1)
}

// SetEccMode mocks base method.
func (m *MockDevice) SetEccMode(arg0 nvml.EnableState) nvml.Return {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetEccMode", arg0)
	ret0, _ := ret[0].(nvml.Return)
	return ret0
}

// SetEccMode indicates an expected call of SetEccMode.
func (mr *MockDeviceMockRecorder) SetEccMode(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetEccMode", reflect.TypeOf((*MockDevice)(nil).SetEccMode), arg0)
}

// SetFanControlPolicy mocks base method.
func (m *MockDevice) SetFanControlPolicy(arg0 int, arg1 nvml.FanControlPolicy) nvml.Return {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetFanControlPolicy", arg0, arg1)
	ret0, _ := ret[0].(nvml.Return)
	return ret0
}

// SetFanControlPolicy indicates an expected call of SetFanControlPolicy.
func (mr *MockDeviceMockRecorder) SetFanControlPolicy(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFanControlPolicy", reflect.TypeOf((*MockDevice)(nil).SetFanControlPolicy), arg0, arg1)
}

// SetFanSpeed_v2 mocks base method.
func (m *MockDevice) SetFanSpeed_v2(arg0, arg1 int) nvml.Return {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetFanSpeed_v2", arg0, arg1)
	ret0, _ := ret[0].(nvml.Return)
	return ret0
}

// SetFanSpeed_v2 indicates an expected call of SetFanSpeed_v2.
func (mr *MockDeviceMockRecorder) SetFanSpeed_v2(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFanSpeed_v2", reflect.TypeOf((*MockDevice)(nil).SetFanSpeed_v2), arg0, arg1)
}

// SetGpcClkVfOffset mocks base method.
func (m *MockDevice) SetGpcClkVfOffset(arg0 int) nvml.Return {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetGpcClkVfOffset", arg0)
	ret0, _ := ret[0].(nvml.Return)
	return ret0
}

// SetGpcClkVfOffset indicates an expected call of SetGpcClkVfOffset.
func (mr *MockDeviceMockRecorder) SetGpcClkVfOffset(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetGpcClkVfOffset", reflect.TypeOf((*MockDevice)(nil).SetGpcClkVfOffset), arg0)
}

// SetGpuLockedClocks mocks base method.
func (m *MockDevice) SetGpuLockedClocks(arg0, arg1 uint32) nvml.Return {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetGpuLockedClocks", arg0, arg1)
	ret0, _ := ret[0].(nvml.Return)
	return ret0
}

// SetGpuLockedClocks indicates an expected call of SetGpuLockedClocks.
func (mr *MockDeviceMockRecorder) SetGpuLockedClocks(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetGpuLockedClocks", reflect.TypeOf((*MockDevice)(nil).SetGpuLockedClocks), arg0, arg1)
}

// SetGpuOperationMode mocks base method.
func (m *MockDevice) SetGpuOperationMode(arg0 nvml.GpuOperationMode) nvml.Return {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetGpuOperationMode", arg0)
	ret0, _ := ret[0].(nvml.Return)
	return ret0
}

// SetGpuOperationMode indicates an expected call of SetGpuOperationMode.
func (mr *MockDeviceMockRecorder) SetGpuOperationMode(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetGpuOperationMode", reflect.TypeOf((*MockDevice)(nil).SetGpuOperationMode), arg0)
}

// SetMemClkVfOffset mocks base method.
func (m *MockDevice) SetMemClkVfOffset(arg0 int) nvml.Return {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetMemClkVfOffset", arg0)
	ret0, _ := ret[0].(nvml.Return)
	return ret0
}

// SetMemClkVfOffset indicates an expected call of SetMemClkVfOffset.
func (mr *MockDeviceMockRecorder) SetMemClkVfOffset(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMemClkVfOffset", reflect.TypeOf((*MockDevice)(nil).SetMemClkVfOffset), arg0)
}

// SetMemoryLockedClocks mocks base method.
func (m *MockDevice) SetMemoryLockedClocks(arg0, arg1 uint32) nvml.Return {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetMemoryLockedClocks", arg0, arg1)
	ret0, _ := ret[0].(nvml.Return)
	return ret0
}

// SetMemoryLockedClocks indicates an expected call of SetMemoryLockedClocks.
func (mr *MockDeviceMockRecorder) SetMemoryLockedClocks(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMemoryLockedClocks", reflect.TypeOf((*MockDevice)(nil).SetMemoryLockedClocks), arg0, arg1)
}

// SetMigMode mocks base method.
func (m *MockDevice) SetMigMode(arg0 int) (nvml.Return, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetMigMode", arg0)
	ret0, _ := ret[0].(nvml.Return)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// SetMigMode indicates an expected call of SetMigMode.
func (mr *MockDeviceMockRecorder) SetMigMode(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMigMode", reflect.TypeOf((*MockDevice)(nil).SetMigMode), arg0)
}

// SetNvLinkDeviceLowPowerThreshold mocks base method.
func (m *MockDevice) SetNvLinkDeviceLowPowerThreshold(arg0 *nvml.NvLinkPowerThres) nvml.Return {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetNvLinkDeviceLowPowerThreshold", arg0)
	ret0, _ := ret[0].(nvml.Return)
	return ret0
}

// SetNvLinkDeviceLowPowerThreshold indicates an expected call of SetNvLinkDeviceLowPowerThreshold.
func (mr *MockDeviceMockRecorder) SetNvLinkDeviceLowPowerThreshold(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNvLinkDeviceLowPowerThreshold", reflect.TypeOf((*MockDevice)(nil).SetNvLinkDeviceLowPowerThreshold), arg0)
}

// SetNvLinkUtilizationControl mocks base method.
func (m *MockDevice) SetNvLinkUtilizationControl(arg0, arg1 int, arg2 *nvml.NvLinkUtilizationControl, arg3 bool) nvml.Return {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetNvLinkUtilizationControl", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(nvml.Return)
	return ret0
}

// SetNvLinkUtilizationControl indicates an expected call of SetNvLinkUtilizationControl.
func (mr *MockDeviceMockRecorder) SetNvLinkUtilizationControl(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNvLinkUtilizationControl", reflect.TypeOf((*MockDevice)(nil).SetNvLinkUtilizationControl), arg0, arg1, arg2, arg3)
}

// SetPersistenceMode mocks base method.
func (m *MockDevice) SetPersistenceMode(arg0 nvml.EnableState) nvml.Return {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPersistenceMode", arg0)
	ret0, _ := ret[0].(nvml.Return)
	return ret0
}

// SetPersistenceMode indicates an expected call of SetPersistenceMode.
func (mr *MockDeviceMockRecorder) SetPersistenceMode(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPersistenceMode", reflect.TypeOf((*MockDevice)(nil).SetPersistenceMode), arg0)
}

// SetPowerManagementLimit mocks base method.
func (m *MockDevice) SetPowerManagementLimit(arg0 uint32) nvml.Return {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPowerManagementLimit", arg0)
	ret0, _ := ret[0].(nvml.Return)
	return ret0
}

// SetPowerManagementLimit indicates an expected call of SetPowerManagementLimit.
func (mr *MockDeviceMockRecorder) SetPowerManagementLimit(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPowerManagementLimit", reflect.TypeOf((*MockDevice)(nil).SetPowerManagementLimit), arg0)
}

// SetPowerManagementLimit_v2 mocks base method.
func (m *MockDevice) SetPowerManagementLimit_v2(arg0 *nvml.PowerValue_v2) nvml.Return {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPowerManagementLimit_v2", arg0)
	ret0, _ := ret[0].(nvml.Return)
	return ret0
}

// SetPowerManagementLimit_v2 indicates an expected call of SetPowerManagementLimit_v2.
func (mr *MockDeviceMockRecorder) SetPowerManagementLimit_v2(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPowerManagementLimit_v2", reflect.TypeOf((*MockDevice)(nil).SetPowerManagementLimit_v2), arg0)
}

// SetTemperatureThreshold mocks base method.
func (m *MockDevice) SetTemperatureThreshold(arg0 nvml.TemperatureThresholds, arg1 int) nvml.Return {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetTemperatureThreshold", arg0, arg1)
	ret0, _ := ret[0].(nvml.Return)
	return ret0
}

// SetTemperatureThreshold indicates an expected call of SetTemperatureThreshold.
func (mr *MockDeviceMockRecorder) SetTemperatureThreshold(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTemperatureThreshold", reflect.TypeOf((*MockDevice)(nil).SetTemperatureThreshold), arg0, arg1)
}

// SetVgpuCapabilities mocks base method.
func (m *MockDevice) SetVgpuCapabilities(arg0 nvml.DeviceVgpuCapability, arg1 nvml.EnableState) nvml.Return {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetVgpuCapabilities", arg0, arg1)
	ret0, _ := ret[0].(nvml.Return)
	return ret0
}

// SetVgpuCapabilities indicates an expected call of SetVgpuCapabilities.
func (mr *MockDeviceMockRecorder) SetVgpuCapabilities(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetVgpuCapabilities", reflect.TypeOf((*MockDevice)(nil).SetVgpuCapabilities), arg0, arg1)
}

// SetVgpuHeterogeneousMode mocks base method.
func (m *MockDevice) SetVgpuHeterogeneousMode(arg0 nvml.VgpuHeterogeneousMode) nvml.Return {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetVgpuHeterogeneousMode", arg0)
	ret0, _ := ret[0].(nvml.Return)
	return ret0
}

// SetVgpuHeterogeneousMode indicates an expected call of SetVgpuHeterogeneousMode.
func (mr *MockDeviceMockRecorder) SetVgpuHeterogeneousMode(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetVgpuHeterogeneousMode", reflect.TypeOf((*MockDevice)(nil).SetVgpuHeterogeneousMode), arg0)
}

// SetVgpuSchedulerState mocks base method.
func (m *MockDevice) SetVgpuSchedulerState(arg0 *nvml.VgpuSchedulerSetState) nvml.Return {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetVgpuSchedulerState", arg0)
	ret0, _ := ret[0].(nvml.Return)
	return ret0
}

// SetVgpuSchedulerState indicates an expected call of SetVgpuSchedulerState.
func (mr *MockDeviceMockRecorder) SetVgpuSchedulerState(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetVgpuSchedulerState", reflect.TypeOf((*MockDevice)(nil).SetVgpuSchedulerState), arg0)
}

// SetVirtualizationMode mocks base method.
func (m *MockDevice) SetVirtualizationMode(arg0 nvml.GpuVirtualizationMode) nvml.Return {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetVirtualizationMode", arg0)
	ret0, _ := ret[0].(nvml.Return)
	return ret0
}

// SetVirtualizationMode indicates an expected call of SetVirtualizationMode.
func (mr *MockDeviceMockRecorder) SetVirtualizationMode(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetVirtualizationMode", reflect.TypeOf((*MockDevice)(nil).SetVirtualizationMode), arg0)
}

// ValidateInforom mocks base method.
func (m *MockDevice) ValidateInforom() nvml.Return {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateInforom")
	ret0, _ := ret[0].(nvml.Return)
	return ret0
}

// ValidateInforom indicates an expected call of ValidateInforom.
func (mr *MockDeviceMockRecorder) ValidateInforom() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateInforom", reflect.TypeOf((*MockDevice)(nil).ValidateInforom))
}

// VgpuTypeGetMaxInstances mocks base method.
func (m *MockDevice) VgpuTypeGetMaxInstances(arg0 nvml.VgpuTypeId) (int, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VgpuTypeGetMaxInstances", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// VgpuTypeGetMaxInstances indicates an expected call of VgpuTypeGetMaxInstances.
func (mr *MockDeviceMockRecorder) VgpuTypeGetMaxInstances(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VgpuTypeGetMaxInstances", reflect.TypeOf((*MockDevice)(nil).VgpuTypeGetMaxInstances), arg0)
}

// MockGpuInstance is a mock of GpuInstance interface.
type MockGpuInstance struct {
	ctrl     *gomock.Controller
	recorder *MockGpuInstanceMockRecorder
}

// MockGpuInstanceMockRecorder is the mock recorder for MockGpuInstance.
type MockGpuInstanceMockRecorder struct {
	mock *MockGpuInstance
}

// NewMockGpuInstance creates a new mock instance.
func NewMockGpuInstance(ctrl *gomock.Controller) *MockGpuInstance {
	mock := &MockGpuInstance{ctrl: ctrl}
	mock.recorder = &MockGpuInstanceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGpuInstance) EXPECT() *MockGpuInstanceMockRecorder {
	return m.recorder
}

// CreateComputeInstance mocks base method.
func (m *MockGpuInstance) CreateComputeInstance(arg0 *nvml.ComputeInstanceProfileInfo) (nvml.ComputeInstance, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateComputeInstance", arg0)
	ret0, _ := ret[0].(nvml.ComputeInstance)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// CreateComputeInstance indicates an expected call of CreateComputeInstance.
func (mr *MockGpuInstanceMockRecorder) CreateComputeInstance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComputeInstance", reflect.TypeOf((*MockGpuInstance)(nil).CreateComputeInstance), arg0)
}

// CreateComputeInstanceWithPlacement mocks base method.
func (m *MockGpuInstance) CreateComputeInstanceWithPlacement(arg0 *nvml.ComputeInstanceProfileInfo, arg1 *nvml.ComputeInstancePlacement) (nvml.ComputeInstance, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateComputeInstanceWithPlacement", arg0, arg1)
	ret0, _ := ret[0].(nvml.ComputeInstance)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// CreateComputeInstanceWithPlacement indicates an expected call of CreateComputeInstanceWithPlacement.
func (mr *MockGpuInstanceMockRecorder) CreateComputeInstanceWithPlacement(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComputeInstanceWithPlacement", reflect.TypeOf((*MockGpuInstance)(nil).CreateComputeInstanceWithPlacement), arg0, arg1)
}

// Destroy mocks base method.
func (m *MockGpuInstance) Destroy() nvml.Return {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Destroy")
	ret0, _ := ret[0].(nvml.Return)
	return ret0
}

// Destroy indicates an expected call of Destroy.
func (mr *MockGpuInstanceMockRecorder) Destroy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockGpuInstance)(nil).Destroy))
}

// GetComputeInstanceById mocks base method.
func (m *MockGpuInstance) GetComputeInstanceById(arg0 int) (nvml.ComputeInstance, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComputeInstanceById", arg0)
	ret0, _ := ret[0].(nvml.ComputeInstance)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetComputeInstanceById indicates an expected call of GetComputeInstanceById.
func (mr *MockGpuInstanceMockRecorder) GetComputeInstanceById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComputeInstanceById", reflect.TypeOf((*MockGpuInstance)(nil).GetComputeInstanceById), arg0)
}

// GetComputeInstancePossiblePlacements mocks base method.
func (m *MockGpuInstance) GetComputeInstancePossiblePlacements(arg0 *nvml.ComputeInstanceProfileInfo) ([]nvml.ComputeInstancePlacement, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComputeInstancePossiblePlacements", arg0)
	ret0, _ := ret[0].([]nvml.ComputeInstancePlacement)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetComputeInstancePossiblePlacements indicates an expected call of GetComputeInstancePossiblePlacements.
func (mr *MockGpuInstanceMockRecorder) GetComputeInstancePossiblePlacements(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComputeInstancePossiblePlacements", reflect.TypeOf((*MockGpuInstance)(nil).GetComputeInstancePossiblePlacements), arg0)
}

// GetComputeInstanceProfileInfo mocks base method.
func (m *MockGpuInstance) GetComputeInstanceProfileInfo(arg0, arg1 int) (nvml.ComputeInstanceProfileInfo, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComputeInstanceProfileInfo", arg0, arg1)
	ret0, _ := ret[0].(nvml.ComputeInstanceProfileInfo)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetComputeInstanceProfileInfo indicates an expected call of GetComputeInstanceProfileInfo.
func (mr *MockGpuInstanceMockRecorder) GetComputeInstanceProfileInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComputeInstanceProfileInfo", reflect.TypeOf((*MockGpuInstance)(nil).GetComputeInstanceProfileInfo), arg0, arg1)
}

// GetComputeInstanceProfileInfoV mocks base method.
func (m *MockGpuInstance) GetComputeInstanceProfileInfoV(arg0, arg1 int) nvml.ComputeInstanceProfileInfoHandler {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComputeInstanceProfileInfoV", arg0, arg1)
	ret0, _ := ret[0].(nvml.ComputeInstanceProfileInfoHandler)
	return ret0
}

// GetComputeInstanceProfileInfoV indicates an expected call of GetComputeInstanceProfileInfoV.
func (mr *MockGpuInstanceMockRecorder) GetComputeInstanceProfileInfoV(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComputeInstanceProfileInfoV", reflect.TypeOf((*MockGpuInstance)(nil).GetComputeInstanceProfileInfoV), arg0, arg1)
}

// GetComputeInstanceRemainingCapacity mocks base method.
func (m *MockGpuInstance) GetComputeInstanceRemainingCapacity(arg0 *nvml.ComputeInstanceProfileInfo) (int, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComputeInstanceRemainingCapacity", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetComputeInstanceRemainingCapacity indicates an expected call of GetComputeInstanceRemainingCapacity.
func (mr *MockGpuInstanceMockRecorder) GetComputeInstanceRemainingCapacity(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComputeInstanceRemainingCapacity", reflect.TypeOf((*MockGpuInstance)(nil).GetComputeInstanceRemainingCapacity), arg0)
}

// GetComputeInstances mocks base method.
func (m *MockGpuInstance) GetComputeInstances(arg0 *nvml.ComputeInstanceProfileInfo) ([]nvml.ComputeInstance, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComputeInstances", arg0)
	ret0, _ := ret[0].([]nvml.ComputeInstance)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetComputeInstances indicates an expected call of GetComputeInstances.
func (mr *MockGpuInstanceMockRecorder) GetComputeInstances(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComputeInstances", reflect.TypeOf((*MockGpuInstance)(nil).GetComputeInstances), arg0)
}

// GetInfo mocks base method.
func (m *MockGpuInstance) GetInfo() (nvml.GpuInstanceInfo, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInfo")
	ret0, _ := ret[0].(nvml.GpuInstanceInfo)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetInfo indicates an expected call of GetInfo.
func (mr *MockGpuInstanceMockRecorder) GetInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInfo", reflect.TypeOf((*MockGpuInstance)(nil).GetInfo))
}

// MockComputeInstance is a mock of ComputeInstance interface.
type MockComputeInstance struct {
	ctrl     *gomock.Controller
	recorder *MockComputeInstanceMockRecorder
}

// MockComputeInstanceMockRecorder is the mock recorder for MockComputeInstance.
type MockComputeInstanceMockRecorder struct {
	mock *MockComputeInstance
}

// NewMockComputeInstance creates a new mock instance.
func NewMockComputeInstance(ctrl *gomock.Controller) *MockComputeInstance {
	mock := &MockComputeInstance{ctrl: ctrl}
	mock.recorder = &MockComputeInstanceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockComputeInstance) EXPECT() *MockComputeInstanceMockRecorder {
	return m.recorder
}

// Destroy mocks base method.
func (m *MockComputeInstance) Destroy() nvml.Return {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Destroy")
	ret0, _ := ret[0].(nvml.Return)
	return ret0
}

// Destroy indicates an expected call of Destroy.
func (mr *MockComputeInstanceMockRecorder) Destroy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockComputeInstance)(nil).Destroy))
}

// GetInfo mocks base method.
func (m *MockComputeInstance) GetInfo() (nvml.ComputeInstanceInfo, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInfo")
	ret0, _ := ret[0].(nvml.ComputeInstanceInfo)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetInfo indicates an expected call of GetInfo.
func (mr *MockComputeInstanceMockRecorder) GetInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInfo", reflect.TypeOf((*MockComputeInstance)(nil).GetInfo))
}

// MockEventSet is a mock of EventSet interface.
type MockEventSet struct {
	ctrl     *gomock.Controller
	recorder *MockEventSetMockRecorder
}

// MockEventSetMockRecorder is the mock recorder for MockEventSet.
type MockEventSetMockRecorder struct {
	mock *MockEventSet
}

// NewMockEventSet creates a new mock instance.
func NewMockEventSet(ctrl *gomock.Controller) *MockEventSet {
	mock := &MockEventSet{ctrl: ctrl}
	mock.recorder = &MockEventSetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventSet) EXPECT() *MockEventSetMockRecorder {
	return m.recorder
}

// Free mocks base method.
func (m *MockEventSet) Free() nvml.Return {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Free")
	ret0, _ := ret[0].(nvml.Return)
	return ret0
}

// Free indicates an expected call of Free.
func (mr *MockEventSetMockRecorder) Free() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Free", reflect.TypeOf((*MockEventSet)(nil).Free))
}

// Wait mocks base method.
func (m *MockEventSet) Wait(arg0 uint32) (nvml.EventData, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Wait", arg0)
	ret0, _ := ret[0].(nvml.EventData)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// Wait indicates an expected call of Wait.
func (mr *MockEventSetMockRecorder) Wait(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wait", reflect.TypeOf((*MockEventSet)(nil).Wait), arg0)
}

// MockGpmSample is a mock of GpmSample interface.
type MockGpmSample struct {
	ctrl     *gomock.Controller
	recorder *MockGpmSampleMockRecorder
}

// MockGpmSampleMockRecorder is the mock recorder for MockGpmSample.
type MockGpmSampleMockRecorder struct {
	mock *MockGpmSample
}

// NewMockGpmSample creates a new mock instance.
func NewMockGpmSample(ctrl *gomock.Controller) *MockGpmSample {
	mock := &MockGpmSample{ctrl: ctrl}
	mock.recorder = &MockGpmSampleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGpmSample) EXPECT() *MockGpmSampleMockRecorder {
	return m.recorder
}

// Free mocks base method.
func (m *MockGpmSample) Free() nvml.Return {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Free")
	ret0, _ := ret[0].(nvml.Return)
	return ret0
}

// Free indicates an expected call of Free.
func (mr *MockGpmSampleMockRecorder) Free() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Free", reflect.TypeOf((*MockGpmSample)(nil).Free))
}

// Get mocks base method.
func (m *MockGpmSample) Get(arg0 nvml.Device) nvml.Return {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(nvml.Return)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockGpmSampleMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockGpmSample)(nil).Get), arg0)
}

// MigGet mocks base method.
func (m *MockGpmSample) MigGet(arg0 nvml.Device, arg1 int) nvml.Return {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MigGet", arg0, arg1)
	ret0, _ := ret[0].(nvml.Return)
	return ret0
}

// MigGet indicates an expected call of MigGet.
func (mr *MockGpmSampleMockRecorder) MigGet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MigGet", reflect.TypeOf((*MockGpmSample)(nil).MigGet), arg0, arg1)
}

// MockUnit is a mock of Unit interface.
type MockUnit struct {
	ctrl     *gomock.Controller
	recorder *MockUnitMockRecorder
}

// MockUnitMockRecorder is the mock recorder for MockUnit.
type MockUnitMockRecorder struct {
	mock *MockUnit
}

// NewMockUnit creates a new mock instance.
func NewMockUnit(ctrl *gomock.Controller) *MockUnit {
	mock := &MockUnit{ctrl: ctrl}
	mock.recorder = &MockUnitMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnit) EXPECT() *MockUnitMockRecorder {
	return m.recorder
}

// GetDevices mocks base method.
func (m *MockUnit) GetDevices() ([]nvml.Device, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDevices")
	ret0, _ := ret[0].([]nvml.Device)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetDevices indicates an expected call of GetDevices.
func (mr *MockUnitMockRecorder) GetDevices() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDevices", reflect.TypeOf((*MockUnit)(nil).GetDevices))
}

// GetFanSpeedInfo mocks base method.
func (m *MockUnit) GetFanSpeedInfo() (nvml.UnitFanSpeeds, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFanSpeedInfo")
	ret0, _ := ret[0].(nvml.UnitFanSpeeds)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetFanSpeedInfo indicates an expected call of GetFanSpeedInfo.
func (mr *MockUnitMockRecorder) GetFanSpeedInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFanSpeedInfo", reflect.TypeOf((*MockUnit)(nil).GetFanSpeedInfo))
}

// GetLedState mocks base method.
func (m *MockUnit) GetLedState() (nvml.LedState, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLedState")
	ret0, _ := ret[0].(nvml.LedState)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetLedState indicates an expected call of GetLedState.
func (mr *MockUnitMockRecorder) GetLedState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLedState", reflect.TypeOf((*MockUnit)(nil).GetLedState))
}

// GetPsuInfo mocks base method.
func (m *MockUnit) GetPsuInfo() (nvml.PSUInfo, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPsuInfo")
	ret0, _ := ret[0].(nvml.PSUInfo)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetPsuInfo indicates an expected call of GetPsuInfo.
func (mr *MockUnitMockRecorder) GetPsuInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPsuInfo", reflect.TypeOf((*MockUnit)(nil).GetPsuInfo))
}

// GetTemperature mocks base method.
func (m *MockUnit) GetTemperature(arg0 int) (uint32, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTemperature", arg0)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetTemperature indicates an expected call of GetTemperature.
func (mr *MockUnitMockRecorder) GetTemperature(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTemperature", reflect.TypeOf((*MockUnit)(nil).GetTemperature), arg0)
}

// GetUnitInfo mocks base method.
func (m *MockUnit) GetUnitInfo() (nvml.UnitInfo, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnitInfo")
	ret0, _ := ret[0].(nvml.UnitInfo)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetUnitInfo indicates an expected call of GetUnitInfo.
func (mr *MockUnitMockRecorder) GetUnitInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnitInfo", reflect.TypeOf((*MockUnit)(nil).GetUnitInfo))
}

// SetLedState mocks base method.
func (m *MockUnit) SetLedState(arg0 nvml.LedColor) nvml.Return {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetLedState", arg0)
	ret0, _ := ret[0].(nvml.Return)
	return ret0
}

// SetLedState indicates an expected call of SetLedState.
func (mr *MockUnitMockRecorder) SetLedState(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLedState", reflect.TypeOf((*MockUnit)(nil).SetLedState), arg0)
}

// MockVgpuInstance is a mock of VgpuInstance interface.
type MockVgpuInstance struct {
	ctrl     *gomock.Controller
	recorder *MockVgpuInstanceMockRecorder
}

// MockVgpuInstanceMockRecorder is the mock recorder for MockVgpuInstance.
type MockVgpuInstanceMockRecorder struct {
	mock *MockVgpuInstance
}

// NewMockVgpuInstance creates a new mock instance.
func NewMockVgpuInstance(ctrl *gomock.Controller) *MockVgpuInstance {
	mock := &MockVgpuInstance{ctrl: ctrl}
	mock.recorder = &MockVgpuInstanceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVgpuInstance) EXPECT() *MockVgpuInstanceMockRecorder {
	return m.recorder
}

// ClearAccountingPids mocks base method.
func (m *MockVgpuInstance) ClearAccountingPids() nvml.Return {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearAccountingPids")
	ret0, _ := ret[0].(nvml.Return)
	return ret0
}

// ClearAccountingPids indicates an expected call of ClearAccountingPids.
func (mr *MockVgpuInstanceMockRecorder) ClearAccountingPids() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearAccountingPids", reflect.TypeOf((*MockVgpuInstance)(nil).ClearAccountingPids))
}

// GetAccountingMode mocks base method.
func (m *MockVgpuInstance) GetAccountingMode() (nvml.EnableState, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountingMode")
	ret0, _ := ret[0].(nvml.EnableState)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetAccountingMode indicates an expected call of GetAccountingMode.
func (mr *MockVgpuInstanceMockRecorder) GetAccountingMode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountingMode", reflect.TypeOf((*MockVgpuInstance)(nil).GetAccountingMode))
}

// GetAccountingPids mocks base method.
func (m *MockVgpuInstance) GetAccountingPids() ([]int, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountingPids")
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetAccountingPids indicates an expected call of GetAccountingPids.
func (mr *MockVgpuInstanceMockRecorder) GetAccountingPids() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountingPids", reflect.TypeOf((*MockVgpuInstance)(nil).GetAccountingPids))
}

// GetAccountingStats mocks base method.
func (m *MockVgpuInstance) GetAccountingStats(arg0 int) (nvml.AccountingStats, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountingStats", arg0)
	ret0, _ := ret[0].(nvml.AccountingStats)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetAccountingStats indicates an expected call of GetAccountingStats.
func (mr *MockVgpuInstanceMockRecorder) GetAccountingStats(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountingStats", reflect.TypeOf((*MockVgpuInstance)(nil).GetAccountingStats), arg0)
}

// GetEccMode mocks base method.
func (m *MockVgpuInstance) GetEccMode() (nvml.EnableState, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEccMode")
	ret0, _ := ret[0].(nvml.EnableState)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetEccMode indicates an expected call of GetEccMode.
func (mr *MockVgpuInstanceMockRecorder) GetEccMode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEccMode", reflect.TypeOf((*MockVgpuInstance)(nil).GetEccMode))
}

// GetEncoderCapacity mocks base method.
func (m *MockVgpuInstance) GetEncoderCapacity() (int, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEncoderCapacity")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetEncoderCapacity indicates an expected call of GetEncoderCapacity.
func (mr *MockVgpuInstanceMockRecorder) GetEncoderCapacity() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEncoderCapacity", reflect.TypeOf((*MockVgpuInstance)(nil).GetEncoderCapacity))
}

// GetEncoderSessions mocks base method.
func (m *MockVgpuInstance) GetEncoderSessions() (int, nvml.EncoderSessionInfo, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEncoderSessions")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(nvml.EncoderSessionInfo)
	ret2, _ := ret[2].(nvml.Return)
	return ret0, ret1, ret2
}

// GetEncoderSessions indicates an expected call of GetEncoderSessions.
func (mr *MockVgpuInstanceMockRecorder) GetEncoderSessions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEncoderSessions", reflect.TypeOf((*MockVgpuInstance)(nil).GetEncoderSessions))
}

// GetEncoderStats mocks base method.
func (m *MockVgpuInstance) GetEncoderStats() (int, uint32, uint32, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEncoderStats")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(uint32)
	ret2, _ := ret[2].(uint32)
	ret3, _ := ret[3].(nvml.Return)
	return ret0, ret1, ret2, ret3
}

// GetEncoderStats indicates an expected call of GetEncoderStats.
func (mr *MockVgpuInstanceMockRecorder) GetEncoderStats() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEncoderStats", reflect.TypeOf((*MockVgpuInstance)(nil).GetEncoderStats))
}

// GetFBCSessions mocks base method.
func (m *MockVgpuInstance) GetFBCSessions() (int, nvml.FBCSessionInfo, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFBCSessions")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(nvml.FBCSessionInfo)
	ret2, _ := ret[2].(nvml.Return)
	return ret0, ret1, ret2
}

// GetFBCSessions indicates an expected call of GetFBCSessions.
func (mr *MockVgpuInstanceMockRecorder) GetFBCSessions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFBCSessions", reflect.TypeOf((*MockVgpuInstance)(nil).GetFBCSessions))
}

// GetFBCStats mocks base method.
func (m *MockVgpuInstance) GetFBCStats() (nvml.FBCStats, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFBCStats")
	ret0, _ := ret[0].(nvml.FBCStats)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetFBCStats indicates an expected call of GetFBCStats.
func (mr *MockVgpuInstanceMockRecorder) GetFBCStats() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFBCStats", reflect.TypeOf((*MockVgpuInstance)(nil).GetFBCStats))
}

// GetFbUsage mocks base method.
func (m *MockVgpuInstance) GetFbUsage() (uint64, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFbUsage")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetFbUsage indicates an expected call of GetFbUsage.
func (mr *MockVgpuInstanceMockRecorder) GetFbUsage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFbUsage", reflect.TypeOf((*MockVgpuInstance)(nil).GetFbUsage))
}

// GetFrameRateLimit mocks base method.
func (m *MockVgpuInstance) GetFrameRateLimit() (uint32, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFrameRateLimit")
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetFrameRateLimit indicates an expected call of GetFrameRateLimit.
func (mr *MockVgpuInstanceMockRecorder) GetFrameRateLimit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFrameRateLimit", reflect.TypeOf((*MockVgpuInstance)(nil).GetFrameRateLimit))
}

// GetGpuInstanceId mocks base method.
func (m *MockVgpuInstance) GetGpuInstanceId() (int, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGpuInstanceId")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetGpuInstanceId indicates an expected call of GetGpuInstanceId.
func (mr *MockVgpuInstanceMockRecorder) GetGpuInstanceId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGpuInstanceId", reflect.TypeOf((*MockVgpuInstance)(nil).GetGpuInstanceId))
}

// GetGpuPciId mocks base method.
func (m *MockVgpuInstance) GetGpuPciId() (string, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGpuPciId")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetGpuPciId indicates an expected call of GetGpuPciId.
func (mr *MockVgpuInstanceMockRecorder) GetGpuPciId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGpuPciId", reflect.TypeOf((*MockVgpuInstance)(nil).GetGpuPciId))
}

// GetLicenseInfo mocks base method.
func (m *MockVgpuInstance) GetLicenseInfo() (nvml.VgpuLicenseInfo, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLicenseInfo")
	ret0, _ := ret[0].(nvml.VgpuLicenseInfo)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetLicenseInfo indicates an expected call of GetLicenseInfo.
func (mr *MockVgpuInstanceMockRecorder) GetLicenseInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLicenseInfo", reflect.TypeOf((*MockVgpuInstance)(nil).GetLicenseInfo))
}

// GetLicenseStatus mocks base method.
func (m *MockVgpuInstance) GetLicenseStatus() (int, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLicenseStatus")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetLicenseStatus indicates an expected call of GetLicenseStatus.
func (mr *MockVgpuInstanceMockRecorder) GetLicenseStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLicenseStatus", reflect.TypeOf((*MockVgpuInstance)(nil).GetLicenseStatus))
}

// GetMdevUUID mocks base method.
func (m *MockVgpuInstance) GetMdevUUID() (string, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMdevUUID")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetMdevUUID indicates an expected call of GetMdevUUID.
func (mr *MockVgpuInstanceMockRecorder) GetMdevUUID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMdevUUID", reflect.TypeOf((*MockVgpuInstance)(nil).GetMdevUUID))
}

// GetMetadata mocks base method.
func (m *MockVgpuInstance) GetMetadata() (nvml.VgpuMetadata, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetadata")
	ret0, _ := ret[0].(nvml.VgpuMetadata)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetMetadata indicates an expected call of GetMetadata.
func (mr *MockVgpuInstanceMockRecorder) GetMetadata() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetadata", reflect.TypeOf((*MockVgpuInstance)(nil).GetMetadata))
}

// GetType mocks base method.
func (m *MockVgpuInstance) GetType() (nvml.VgpuTypeId, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetType")
	ret0, _ := ret[0].(nvml.VgpuTypeId)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetType indicates an expected call of GetType.
func (mr *MockVgpuInstanceMockRecorder) GetType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetType", reflect.TypeOf((*MockVgpuInstance)(nil).GetType))
}

// GetUUID mocks base method.
func (m *MockVgpuInstance) GetUUID() (string, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUUID")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetUUID indicates an expected call of GetUUID.
func (mr *MockVgpuInstanceMockRecorder) GetUUID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUUID", reflect.TypeOf((*MockVgpuInstance)(nil).GetUUID))
}

// GetVmDriverVersion mocks base method.
func (m *MockVgpuInstance) GetVmDriverVersion() (string, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVmDriverVersion")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetVmDriverVersion indicates an expected call of GetVmDriverVersion.
func (mr *MockVgpuInstanceMockRecorder) GetVmDriverVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVmDriverVersion", reflect.TypeOf((*MockVgpuInstance)(nil).GetVmDriverVersion))
}

// GetVmID mocks base method.
func (m *MockVgpuInstance) GetVmID() (string, nvml.VgpuVmIdType, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVmID")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(nvml.VgpuVmIdType)
	ret2, _ := ret[2].(nvml.Return)
	return ret0, ret1, ret2
}

// GetVmID indicates an expected call of GetVmID.
func (mr *MockVgpuInstanceMockRecorder) GetVmID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVmID", reflect.TypeOf((*MockVgpuInstance)(nil).GetVmID))
}

// SetEncoderCapacity mocks base method.
func (m *MockVgpuInstance) SetEncoderCapacity(arg0 int) nvml.Return {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetEncoderCapacity", arg0)
	ret0, _ := ret[0].(nvml.Return)
	return ret0
}

// SetEncoderCapacity indicates an expected call of SetEncoderCapacity.
func (mr *MockVgpuInstanceMockRecorder) SetEncoderCapacity(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetEncoderCapacity", reflect.TypeOf((*MockVgpuInstance)(nil).SetEncoderCapacity), arg0)
}

// MockVgpuTypeId is a mock of VgpuTypeId interface.
type MockVgpuTypeId struct {
	ctrl     *gomock.Controller
	recorder *MockVgpuTypeIdMockRecorder
}

// MockVgpuTypeIdMockRecorder is the mock recorder for MockVgpuTypeId.
type MockVgpuTypeIdMockRecorder struct {
	mock *MockVgpuTypeId
}

// NewMockVgpuTypeId creates a new mock instance.
func NewMockVgpuTypeId(ctrl *gomock.Controller) *MockVgpuTypeId {
	mock := &MockVgpuTypeId{ctrl: ctrl}
	mock.recorder = &MockVgpuTypeIdMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVgpuTypeId) EXPECT() *MockVgpuTypeIdMockRecorder {
	return m.recorder
}

// GetCapabilities mocks base method.
func (m *MockVgpuTypeId) GetCapabilities(arg0 nvml.VgpuCapability) (bool, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCapabilities", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetCapabilities indicates an expected call of GetCapabilities.
func (mr *MockVgpuTypeIdMockRecorder) GetCapabilities(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCapabilities", reflect.TypeOf((*MockVgpuTypeId)(nil).GetCapabilities), arg0)
}

// GetClass mocks base method.
func (m *MockVgpuTypeId) GetClass() (string, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClass")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetClass indicates an expected call of GetClass.
func (mr *MockVgpuTypeIdMockRecorder) GetClass() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClass", reflect.TypeOf((*MockVgpuTypeId)(nil).GetClass))
}

// GetCreatablePlacements mocks base method.
func (m *MockVgpuTypeId) GetCreatablePlacements(arg0 nvml.Device) (nvml.VgpuPlacementList, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCreatablePlacements", arg0)
	ret0, _ := ret[0].(nvml.VgpuPlacementList)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetCreatablePlacements indicates an expected call of GetCreatablePlacements.
func (mr *MockVgpuTypeIdMockRecorder) GetCreatablePlacements(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCreatablePlacements", reflect.TypeOf((*MockVgpuTypeId)(nil).GetCreatablePlacements), arg0)
}

// GetDeviceID mocks base method.
func (m *MockVgpuTypeId) GetDeviceID() (uint64, uint64, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceID")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(uint64)
	ret2, _ := ret[2].(nvml.Return)
	return ret0, ret1, ret2
}

// GetDeviceID indicates an expected call of GetDeviceID.
func (mr *MockVgpuTypeIdMockRecorder) GetDeviceID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceID", reflect.TypeOf((*MockVgpuTypeId)(nil).GetDeviceID))
}

// GetFrameRateLimit mocks base method.
func (m *MockVgpuTypeId) GetFrameRateLimit() (uint32, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFrameRateLimit")
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetFrameRateLimit indicates an expected call of GetFrameRateLimit.
func (mr *MockVgpuTypeIdMockRecorder) GetFrameRateLimit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFrameRateLimit", reflect.TypeOf((*MockVgpuTypeId)(nil).GetFrameRateLimit))
}

// GetFramebufferSize mocks base method.
func (m *MockVgpuTypeId) GetFramebufferSize() (uint64, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFramebufferSize")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetFramebufferSize indicates an expected call of GetFramebufferSize.
func (mr *MockVgpuTypeIdMockRecorder) GetFramebufferSize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFramebufferSize", reflect.TypeOf((*MockVgpuTypeId)(nil).GetFramebufferSize))
}

// GetGpuInstanceProfileId mocks base method.
func (m *MockVgpuTypeId) GetGpuInstanceProfileId() (uint32, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGpuInstanceProfileId")
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetGpuInstanceProfileId indicates an expected call of GetGpuInstanceProfileId.
func (mr *MockVgpuTypeIdMockRecorder) GetGpuInstanceProfileId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGpuInstanceProfileId", reflect.TypeOf((*MockVgpuTypeId)(nil).GetGpuInstanceProfileId))
}

// GetLicense mocks base method.
func (m *MockVgpuTypeId) GetLicense() (string, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLicense")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetLicense indicates an expected call of GetLicense.
func (mr *MockVgpuTypeIdMockRecorder) GetLicense() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLicense", reflect.TypeOf((*MockVgpuTypeId)(nil).GetLicense))
}

// GetMaxInstances mocks base method.
func (m *MockVgpuTypeId) GetMaxInstances(arg0 nvml.Device) (int, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMaxInstances", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetMaxInstances indicates an expected call of GetMaxInstances.
func (mr *MockVgpuTypeIdMockRecorder) GetMaxInstances(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMaxInstances", reflect.TypeOf((*MockVgpuTypeId)(nil).GetMaxInstances), arg0)
}

// GetMaxInstancesPerVm mocks base method.
func (m *MockVgpuTypeId) GetMaxInstancesPerVm() (int, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMaxInstancesPerVm")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetMaxInstancesPerVm indicates an expected call of GetMaxInstancesPerVm.
func (mr *MockVgpuTypeIdMockRecorder) GetMaxInstancesPerVm() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMaxInstancesPerVm", reflect.TypeOf((*MockVgpuTypeId)(nil).GetMaxInstancesPerVm))
}

// GetName mocks base method.
func (m *MockVgpuTypeId) GetName() (string, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetName indicates an expected call of GetName.
func (mr *MockVgpuTypeIdMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockVgpuTypeId)(nil).GetName))
}

// GetNumDisplayHeads mocks base method.
func (m *MockVgpuTypeId) GetNumDisplayHeads() (int, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNumDisplayHeads")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetNumDisplayHeads indicates an expected call of GetNumDisplayHeads.
func (mr *MockVgpuTypeIdMockRecorder) GetNumDisplayHeads() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNumDisplayHeads", reflect.TypeOf((*MockVgpuTypeId)(nil).GetNumDisplayHeads))
}

// GetResolution mocks base method.
func (m *MockVgpuTypeId) GetResolution(arg0 int) (uint32, uint32, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResolution", arg0)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(uint32)
	ret2, _ := ret[2].(nvml.Return)
	return ret0, ret1, ret2
}

// GetResolution indicates an expected call of GetResolution.
func (mr *MockVgpuTypeIdMockRecorder) GetResolution(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResolution", reflect.TypeOf((*MockVgpuTypeId)(nil).GetResolution), arg0)
}

// GetSupportedPlacements mocks base method.
func (m *MockVgpuTypeId) GetSupportedPlacements(arg0 nvml.Device) (nvml.VgpuPlacementList, nvml.Return) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSupportedPlacements", arg0)
	ret0, _ := ret[0].(nvml.VgpuPlacementList)
	ret1, _ := ret[1].(nvml.Return)
	return ret0, ret1
}

// GetSupportedPlacements indicates an expected call of GetSupportedPlacements.
func (mr *MockVgpuTypeIdMockRecorder) GetSupportedPlacements(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSupportedPlacements", reflect.TypeOf((*MockVgpuTypeId)(nil).GetSupportedPlacements), arg0)
}
